import { BindingScopeEnum, BindingTypeEnum } from "../constants/literal_types";
import { getServiceIdentifierAsString } from "../utils/serialization";
import { resolveInstance } from "./instantiation";
import * as ERROR_MSGS from "../constants/error_msgs";
function _resolveRequest(request) {
    var bindings = request.bindings;
    var childRequests = request.childRequests;
    var targetIsAnAray = request.target && request.target.isArray();
    var targetParentIsNotAnArray = !request.parentRequest ||
        !request.parentRequest.target ||
        !request.target ||
        !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);
    if (targetIsAnAray && targetParentIsNotAnArray) {
        return childRequests.map(function (childRequest) {
            return _resolveRequest(childRequest);
        });
    }
    else {
        var result = null;
        if (request.target.isOptional() === true && bindings.length === 0) {
            return undefined;
        }
        var binding = bindings[0];
        var isSingleton = binding.scope === BindingScopeEnum.Singleton;
        if (isSingleton && binding.activated === true) {
            return binding.cache;
        }
        if (binding.type === BindingTypeEnum.ConstantValue) {
            result = binding.cache;
        }
        else if (binding.type === BindingTypeEnum.Function) {
            result = binding.cache;
        }
        else if (binding.type === BindingTypeEnum.Constructor) {
            result = binding.implementationType;
        }
        else if (binding.type === BindingTypeEnum.DynamicValue && binding.dynamicValue !== null) {
            result = binding.dynamicValue(request.parentContext);
        }
        else if (binding.type === BindingTypeEnum.Factory && binding.factory !== null) {
            result = binding.factory(request.parentContext);
        }
        else if (binding.type === BindingTypeEnum.Provider && binding.provider !== null) {
            result = binding.provider(request.parentContext);
        }
        else if (binding.type === BindingTypeEnum.Instance && binding.implementationType !== null) {
            result = resolveInstance(binding.implementationType, childRequests, _resolveRequest);
        }
        else {
            var serviceIdentifier = getServiceIdentifierAsString(request.serviceIdentifier);
            throw new Error(ERROR_MSGS.INVALID_BINDING_TYPE + " " + serviceIdentifier);
        }
        if (typeof binding.onActivation === "function") {
            result = binding.onActivation(request.parentContext, result);
        }
        if (isSingleton) {
            binding.cache = result;
            binding.activated = true;
        }
        return result;
    }
}
function resolve(context) {
    return _resolveRequest(context.plan.rootRequest);
}
export { resolve };
