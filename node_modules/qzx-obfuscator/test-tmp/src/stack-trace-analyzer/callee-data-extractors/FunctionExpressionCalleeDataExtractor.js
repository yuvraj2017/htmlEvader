"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var estraverse = require("estraverse");
var AbstractCalleeDataExtractor_1 = require("./AbstractCalleeDataExtractor");
var Node_1 = require("../../node/Node");
var NodeUtils_1 = require("../../node/NodeUtils");
var FunctionExpressionCalleeDataExtractor = function (_AbstractCalleeDataEx) {
    _inherits(FunctionExpressionCalleeDataExtractor, _AbstractCalleeDataEx);

    function FunctionExpressionCalleeDataExtractor() {
        _classCallCheck(this, FunctionExpressionCalleeDataExtractor);

        return _possibleConstructorReturn(this, (FunctionExpressionCalleeDataExtractor.__proto__ || Object.getPrototypeOf(FunctionExpressionCalleeDataExtractor)).apply(this, arguments));
    }

    _createClass(FunctionExpressionCalleeDataExtractor, [{
        key: "extract",
        value: function extract(blockScopeBody, callee) {
            var calleeBlockStatement = null;
            if (Node_1.Node.isIdentifierNode(callee)) {
                calleeBlockStatement = this.getCalleeBlockStatement(NodeUtils_1.NodeUtils.getBlockScopesOfNode(blockScopeBody[0])[0], callee.name);
            }
            if (Node_1.Node.isFunctionExpressionNode(callee)) {
                calleeBlockStatement = callee.body;
            }
            if (!calleeBlockStatement) {
                return null;
            }
            return {
                callee: calleeBlockStatement,
                name: callee.name || null
            };
        }
    }, {
        key: "getCalleeBlockStatement",
        value: function getCalleeBlockStatement(targetNode, name) {
            var calleeBlockStatement = null;
            estraverse.traverse(targetNode, {
                enter: function enter(node, parentNode) {
                    if (Node_1.Node.isFunctionExpressionNode(node) && Node_1.Node.isVariableDeclaratorNode(parentNode) && Node_1.Node.isIdentifierNode(parentNode.id) && parentNode.id.name === name) {
                        calleeBlockStatement = node.body;
                        return estraverse.VisitorOption.Break;
                    }
                }
            });
            return calleeBlockStatement;
        }
    }]);

    return FunctionExpressionCalleeDataExtractor;
}(AbstractCalleeDataExtractor_1.AbstractCalleeDataExtractor);
FunctionExpressionCalleeDataExtractor = tslib_1.__decorate([inversify_1.injectable()], FunctionExpressionCalleeDataExtractor);
exports.FunctionExpressionCalleeDataExtractor = FunctionExpressionCalleeDataExtractor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVuY3Rpb25FeHByZXNzaW9uQ2FsbGVlRGF0YUV4dHJhY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zdGFjay10cmFjZS1hbmFseXplci9jYWxsZWUtZGF0YS1leHRyYWN0b3JzL0Z1bmN0aW9uRXhwcmVzc2lvbkNhbGxlZURhdGFFeHRyYWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsMEJBQXVDO0FBRXZDLHlCQUF5QztBQUt6Qyw0Q0FBNEU7QUFDNUUscUJBQXVDO0FBQ3ZDLDBCQUFpRDtBQUdqRDtBQUFBLEFBQWEsQUFBcUMsQUFBQzs7Ozs7Ozs7OztnQ0FNL0IsQUFBNkIsZ0JBQUUsQUFBeUI7QUFDcEUsZ0JBQUksQUFBb0IsdUJBQStCLEFBQUksQUFBQztBQUU1RCxBQUFFLEFBQUMsZ0JBQUMsT0FBSSxLQUFDLEFBQWdCLGlCQUFDLEFBQU0sQUFBQyxBQUFDLFNBQUMsQUFBQztBQUNoQyxBQUFvQix1Q0FBRyxBQUFJLEtBQUMsQUFBdUIsd0JBQy9DLFlBQVMsVUFBQyxBQUFvQixxQkFBQyxBQUFjLGVBQUMsQUFBQyxBQUFDLEFBQUMsSUFBQyxBQUFDLEFBQUMsSUFDcEQsQUFBTSxPQUFDLEFBQUksQUFDZCxBQUFDLEFBQ047QUFBQztBQUVELEFBQUUsQUFBQyxnQkFBQyxPQUFJLEtBQUMsQUFBd0IseUJBQUMsQUFBTSxBQUFDLEFBQUMsU0FBQyxBQUFDO0FBQ3hDLEFBQW9CLHVDQUFHLEFBQU0sT0FBQyxBQUFJLEFBQUMsQUFDdkM7QUFBQztBQUVELEFBQUUsQUFBQyxnQkFBQyxDQUFDLEFBQW9CLEFBQUMsc0JBQUMsQUFBQztBQUN4QixBQUFNLHVCQUFDLEFBQUksQUFBQyxBQUNoQjtBQUFDO0FBRUQsQUFBTTtBQUNGLEFBQU0sd0JBQUUsQUFBb0I7QUFDNUIsQUFBSSxzQkFBRSxBQUFNLE9BQUMsQUFBSSxRQUFJLEFBQUksQUFDNUIsQUFBQyxBQUNOO0FBSlc7QUFJVixBQU9PLEFBQXVCOzs7Z0RBQUUsQUFBdUIsWUFBRSxBQUFZO0FBQ2xFLGdCQUFJLEFBQW9CLHVCQUErQixBQUFJLEFBQUM7QUFFNUQsQUFBVSx1QkFBQyxBQUFRLFNBQUMsQUFBVTtBQUMxQixBQUFLLHVCQUFFLGVBQUMsQUFBaUIsTUFBRSxBQUF1QjtBQUM5QyxBQUFFLEFBQUMsd0JBQ0MsT0FBSSxLQUFDLEFBQXdCLHlCQUFDLEFBQUksQUFBQyxTQUNuQyxPQUFJLEtBQUMsQUFBd0IseUJBQUMsQUFBVSxBQUFDLGVBQ3pDLE9BQUksS0FBQyxBQUFnQixpQkFBQyxBQUFVLFdBQUMsQUFBRSxBQUFDLE9BQ3BDLEFBQVUsV0FBQyxBQUFFLEdBQUMsQUFBSSxTQUFLLEFBQzNCLEFBQUMsTUFBQyxBQUFDO0FBQ0MsQUFBb0IsK0NBQUcsQUFBSSxLQUFDLEFBQUksQUFBQztBQUVqQyxBQUFNLCtCQUFDLEFBQVUsV0FBQyxBQUFhLGNBQUMsQUFBSyxBQUFDLEFBQzFDO0FBQUMsQUFDTDtBQUFDLEFBQ0osQUFBQyxBQUFDO0FBYjZCO0FBZWhDLEFBQU0sbUJBQUMsQUFBb0IsQUFBQyxBQUNoQztBQUFDLEFBQ0o7Ozs7RUF2RDBELDhCQUEyQixBQU0zRSxBQUFPO0FBTkwsQUFBcUMsNERBRGpELFlBQVUsQUFBRSxlQUNBLEFBQXFDLEFBdURqRDtBQXZEWSxnREFBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3RhYmxlIH0gZnJvbSAnaW52ZXJzaWZ5JztcblxuaW1wb3J0ICogYXMgZXN0cmF2ZXJzZSBmcm9tICdlc3RyYXZlcnNlJztcbmltcG9ydCAqIGFzIEVTVHJlZSBmcm9tICdlc3RyZWUnO1xuXG5pbXBvcnQgeyBJQ2FsbGVlRGF0YSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvc3RhY2stdHJhY2UtYW5hbHl6ZXIvSUNhbGxlZURhdGEnO1xuXG5pbXBvcnQgeyBBYnN0cmFjdENhbGxlZURhdGFFeHRyYWN0b3IgfSBmcm9tICcuL0Fic3RyYWN0Q2FsbGVlRGF0YUV4dHJhY3Rvcic7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vbm9kZS9Ob2RlJztcbmltcG9ydCB7IE5vZGVVdGlscyB9IGZyb20gJy4uLy4uL25vZGUvTm9kZVV0aWxzJztcblxuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uRXhwcmVzc2lvbkNhbGxlZURhdGFFeHRyYWN0b3IgZXh0ZW5kcyBBYnN0cmFjdENhbGxlZURhdGFFeHRyYWN0b3Ige1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZVtdfSBibG9ja1Njb3BlQm9keVxuICAgICAqIEBwYXJhbSB7SWRlbnRpZmllcn0gY2FsbGVlXG4gICAgICogQHJldHVybnMge0lDYWxsZWVEYXRhfVxuICAgICAqL1xuICAgIHB1YmxpYyBleHRyYWN0IChibG9ja1Njb3BlQm9keTogRVNUcmVlLk5vZGVbXSwgY2FsbGVlOiBFU1RyZWUuSWRlbnRpZmllcik6IElDYWxsZWVEYXRhfG51bGwge1xuICAgICAgICBsZXQgY2FsbGVlQmxvY2tTdGF0ZW1lbnQ6IEVTVHJlZS5CbG9ja1N0YXRlbWVudHxudWxsID0gbnVsbDtcblxuICAgICAgICBpZiAoTm9kZS5pc0lkZW50aWZpZXJOb2RlKGNhbGxlZSkpIHtcbiAgICAgICAgICAgIGNhbGxlZUJsb2NrU3RhdGVtZW50ID0gdGhpcy5nZXRDYWxsZWVCbG9ja1N0YXRlbWVudChcbiAgICAgICAgICAgICAgICBOb2RlVXRpbHMuZ2V0QmxvY2tTY29wZXNPZk5vZGUoYmxvY2tTY29wZUJvZHlbMF0pWzBdLFxuICAgICAgICAgICAgICAgIGNhbGxlZS5uYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE5vZGUuaXNGdW5jdGlvbkV4cHJlc3Npb25Ob2RlKGNhbGxlZSkpIHtcbiAgICAgICAgICAgIGNhbGxlZUJsb2NrU3RhdGVtZW50ID0gY2FsbGVlLmJvZHk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNhbGxlZUJsb2NrU3RhdGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjYWxsZWU6IGNhbGxlZUJsb2NrU3RhdGVtZW50LFxuICAgICAgICAgICAgbmFtZTogY2FsbGVlLm5hbWUgfHwgbnVsbFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0Tm9kZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHJldHVybnMge0Jsb2NrU3RhdGVtZW50fVxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0Q2FsbGVlQmxvY2tTdGF0ZW1lbnQgKHRhcmdldE5vZGU6IEVTVHJlZS5Ob2RlLCBuYW1lOiBzdHJpbmcpOiBFU1RyZWUuQmxvY2tTdGF0ZW1lbnR8bnVsbCB7XG4gICAgICAgIGxldCBjYWxsZWVCbG9ja1N0YXRlbWVudDogRVNUcmVlLkJsb2NrU3RhdGVtZW50fG51bGwgPSBudWxsO1xuXG4gICAgICAgIGVzdHJhdmVyc2UudHJhdmVyc2UodGFyZ2V0Tm9kZSwge1xuICAgICAgICAgICAgZW50ZXI6IChub2RlOiBFU1RyZWUuTm9kZSwgcGFyZW50Tm9kZTogRVNUcmVlLk5vZGUpOiBhbnkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgTm9kZS5pc0Z1bmN0aW9uRXhwcmVzc2lvbk5vZGUobm9kZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgTm9kZS5pc1ZhcmlhYmxlRGVjbGFyYXRvck5vZGUocGFyZW50Tm9kZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgTm9kZS5pc0lkZW50aWZpZXJOb2RlKHBhcmVudE5vZGUuaWQpICYmXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaWQubmFtZSA9PT0gbmFtZVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsZWVCbG9ja1N0YXRlbWVudCA9IG5vZGUuYm9keTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXN0cmF2ZXJzZS5WaXNpdG9yT3B0aW9uLkJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGNhbGxlZUJsb2NrU3RhdGVtZW50O1xuICAgIH1cbn1cbiJdfQ==