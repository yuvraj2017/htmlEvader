"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var estraverse = require("estraverse");
var AbstractCalleeDataExtractor_1 = require("./AbstractCalleeDataExtractor");
var Node_1 = require("../../node/Node");
var NodeUtils_1 = require("../../node/NodeUtils");
var FunctionDeclarationCalleeDataExtractor = function (_AbstractCalleeDataEx) {
    _inherits(FunctionDeclarationCalleeDataExtractor, _AbstractCalleeDataEx);

    function FunctionDeclarationCalleeDataExtractor() {
        _classCallCheck(this, FunctionDeclarationCalleeDataExtractor);

        return _possibleConstructorReturn(this, (FunctionDeclarationCalleeDataExtractor.__proto__ || Object.getPrototypeOf(FunctionDeclarationCalleeDataExtractor)).apply(this, arguments));
    }

    _createClass(FunctionDeclarationCalleeDataExtractor, [{
        key: "extract",
        value: function extract(blockScopeBody, callee) {
            if (!Node_1.Node.isIdentifierNode(callee)) {
                return null;
            }
            var calleeBlockStatement = this.getCalleeBlockStatement(NodeUtils_1.NodeUtils.getBlockScopesOfNode(blockScopeBody[0])[0], callee.name);
            if (!calleeBlockStatement) {
                return null;
            }
            return {
                callee: calleeBlockStatement,
                name: callee.name
            };
        }
    }, {
        key: "getCalleeBlockStatement",
        value: function getCalleeBlockStatement(targetNode, name) {
            var calleeBlockStatement = null;
            estraverse.traverse(targetNode, {
                enter: function enter(node) {
                    if (Node_1.Node.isFunctionDeclarationNode(node) && node.id.name === name) {
                        calleeBlockStatement = node.body;
                        return estraverse.VisitorOption.Break;
                    }
                }
            });
            return calleeBlockStatement;
        }
    }]);

    return FunctionDeclarationCalleeDataExtractor;
}(AbstractCalleeDataExtractor_1.AbstractCalleeDataExtractor);
FunctionDeclarationCalleeDataExtractor = tslib_1.__decorate([inversify_1.injectable()], FunctionDeclarationCalleeDataExtractor);
exports.FunctionDeclarationCalleeDataExtractor = FunctionDeclarationCalleeDataExtractor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVuY3Rpb25EZWNsYXJhdGlvbkNhbGxlZURhdGFFeHRyYWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc3RhY2stdHJhY2UtYW5hbHl6ZXIvY2FsbGVlLWRhdGEtZXh0cmFjdG9ycy9GdW5jdGlvbkRlY2xhcmF0aW9uQ2FsbGVlRGF0YUV4dHJhY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSwwQkFBdUM7QUFFdkMseUJBQXlDO0FBS3pDLDRDQUE0RTtBQUM1RSxxQkFBdUM7QUFDdkMsMEJBQWlEO0FBR2pEO0FBQUEsQUFBYSxBQUFzQyxBQUFDOzs7Ozs7Ozs7O2dDQU1oQyxBQUE2QixnQkFBRSxBQUF5QjtBQUNwRSxBQUFFLEFBQUMsZ0JBQUMsQ0FBQyxPQUFJLEtBQUMsQUFBZ0IsaUJBQUMsQUFBTSxBQUFDLEFBQUMsU0FBQyxBQUFDO0FBQ2pDLEFBQU0sdUJBQUMsQUFBSSxBQUFDLEFBQ2hCO0FBQUM7QUFFRCxnQkFBTSxBQUFvQix1QkFBK0IsQUFBSSxLQUFDLEFBQXVCLHdCQUNqRixZQUFTLFVBQUMsQUFBb0IscUJBQUMsQUFBYyxlQUFDLEFBQUMsQUFBQyxBQUFDLElBQUMsQUFBQyxBQUFDLElBQ3BELEFBQU0sT0FBQyxBQUFJLEFBQ2QsQUFBQztBQUVGLEFBQUUsQUFBQyxnQkFBQyxDQUFDLEFBQW9CLEFBQUMsc0JBQUMsQUFBQztBQUN4QixBQUFNLHVCQUFDLEFBQUksQUFBQyxBQUNoQjtBQUFDO0FBRUQsQUFBTTtBQUNGLEFBQU0sd0JBQUUsQUFBb0I7QUFDNUIsQUFBSSxzQkFBRSxBQUFNLE9BQUMsQUFBSSxBQUNwQixBQUFDLEFBQ047QUFKVztBQUlWLEFBT08sQUFBdUI7OztnREFBRSxBQUF1QixZQUFFLEFBQVk7QUFDbEUsZ0JBQUksQUFBb0IsdUJBQStCLEFBQUksQUFBQztBQUU1RCxBQUFVLHVCQUFDLEFBQVEsU0FBQyxBQUFVO0FBQzFCLEFBQUssdUJBQUUsZUFBQyxBQUFpQjtBQUNyQixBQUFFLEFBQUMsd0JBQUMsT0FBSSxLQUFDLEFBQXlCLDBCQUFDLEFBQUksQUFBQyxTQUFJLEFBQUksS0FBQyxBQUFFLEdBQUMsQUFBSSxTQUFLLEFBQUksQUFBQyxNQUFDLEFBQUM7QUFDaEUsQUFBb0IsK0NBQUcsQUFBSSxLQUFDLEFBQUksQUFBQztBQUVqQyxBQUFNLCtCQUFDLEFBQVUsV0FBQyxBQUFhLGNBQUMsQUFBSyxBQUFDLEFBQzFDO0FBQUMsQUFDTDtBQUFDLEFBQ0osQUFBQyxBQUFDO0FBUjZCO0FBVWhDLEFBQU0sbUJBQUMsQUFBb0IsQUFBQyxBQUNoQztBQUFDLEFBQ0o7Ozs7RUE5QzJELDhCQUEyQixBQU01RSxBQUFPO0FBTkwsQUFBc0MsNkRBRGxELFlBQVUsQUFBRSxlQUNBLEFBQXNDLEFBOENsRDtBQTlDWSxpREFBc0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3RhYmxlIH0gZnJvbSAnaW52ZXJzaWZ5JztcblxuaW1wb3J0ICogYXMgZXN0cmF2ZXJzZSBmcm9tICdlc3RyYXZlcnNlJztcbmltcG9ydCAqIGFzIEVTVHJlZSBmcm9tICdlc3RyZWUnO1xuXG5pbXBvcnQgeyBJQ2FsbGVlRGF0YSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvc3RhY2stdHJhY2UtYW5hbHl6ZXIvSUNhbGxlZURhdGEnO1xuXG5pbXBvcnQgeyBBYnN0cmFjdENhbGxlZURhdGFFeHRyYWN0b3IgfSBmcm9tICcuL0Fic3RyYWN0Q2FsbGVlRGF0YUV4dHJhY3Rvcic7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vbm9kZS9Ob2RlJztcbmltcG9ydCB7IE5vZGVVdGlscyB9IGZyb20gJy4uLy4uL25vZGUvTm9kZVV0aWxzJztcblxuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uRGVjbGFyYXRpb25DYWxsZWVEYXRhRXh0cmFjdG9yIGV4dGVuZHMgQWJzdHJhY3RDYWxsZWVEYXRhRXh0cmFjdG9yIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGVbXX0gYmxvY2tTY29wZUJvZHlcbiAgICAgKiBAcGFyYW0ge0lkZW50aWZpZXJ9IGNhbGxlZVxuICAgICAqIEByZXR1cm5zIHtJQ2FsbGVlRGF0YX1cbiAgICAgKi9cbiAgICBwdWJsaWMgZXh0cmFjdCAoYmxvY2tTY29wZUJvZHk6IEVTVHJlZS5Ob2RlW10sIGNhbGxlZTogRVNUcmVlLklkZW50aWZpZXIpOiBJQ2FsbGVlRGF0YXxudWxsIHtcbiAgICAgICAgaWYgKCFOb2RlLmlzSWRlbnRpZmllck5vZGUoY2FsbGVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjYWxsZWVCbG9ja1N0YXRlbWVudDogRVNUcmVlLkJsb2NrU3RhdGVtZW50fG51bGwgPSB0aGlzLmdldENhbGxlZUJsb2NrU3RhdGVtZW50KFxuICAgICAgICAgICAgTm9kZVV0aWxzLmdldEJsb2NrU2NvcGVzT2ZOb2RlKGJsb2NrU2NvcGVCb2R5WzBdKVswXSxcbiAgICAgICAgICAgIGNhbGxlZS5uYW1lXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCFjYWxsZWVCbG9ja1N0YXRlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2FsbGVlOiBjYWxsZWVCbG9ja1N0YXRlbWVudCxcbiAgICAgICAgICAgIG5hbWU6IGNhbGxlZS5uYW1lXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSB0YXJnZXROb2RlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcmV0dXJucyB7QmxvY2tTdGF0ZW1lbnR9XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDYWxsZWVCbG9ja1N0YXRlbWVudCAodGFyZ2V0Tm9kZTogRVNUcmVlLk5vZGUsIG5hbWU6IHN0cmluZyk6IEVTVHJlZS5CbG9ja1N0YXRlbWVudHxudWxsIHtcbiAgICAgICAgbGV0IGNhbGxlZUJsb2NrU3RhdGVtZW50OiBFU1RyZWUuQmxvY2tTdGF0ZW1lbnR8bnVsbCA9IG51bGw7XG5cbiAgICAgICAgZXN0cmF2ZXJzZS50cmF2ZXJzZSh0YXJnZXROb2RlLCB7XG4gICAgICAgICAgICBlbnRlcjogKG5vZGU6IEVTVHJlZS5Ob2RlKTogYW55ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoTm9kZS5pc0Z1bmN0aW9uRGVjbGFyYXRpb25Ob2RlKG5vZGUpICYmIG5vZGUuaWQubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsZWVCbG9ja1N0YXRlbWVudCA9IG5vZGUuYm9keTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXN0cmF2ZXJzZS5WaXNpdG9yT3B0aW9uLkJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGNhbGxlZUJsb2NrU3RhdGVtZW50O1xuICAgIH1cbn1cbiJdfQ==