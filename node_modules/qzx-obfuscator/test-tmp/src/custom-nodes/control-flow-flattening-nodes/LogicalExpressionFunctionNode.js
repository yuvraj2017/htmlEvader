"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../container/ServiceIdentifiers");
var Initializable_1 = require("../../decorators/Initializable");
var AbstractCustomNode_1 = require("../AbstractCustomNode");
var Nodes_1 = require("../../node/Nodes");
var NodeUtils_1 = require("../../node/NodeUtils");
var LogicalExpressionFunctionNode = function (_AbstractCustomNode_) {
    _inherits(LogicalExpressionFunctionNode, _AbstractCustomNode_);

    function LogicalExpressionFunctionNode(randomGenerator, options) {
        _classCallCheck(this, LogicalExpressionFunctionNode);

        var _this = _possibleConstructorReturn(this, (LogicalExpressionFunctionNode.__proto__ || Object.getPrototypeOf(LogicalExpressionFunctionNode)).call(this, options));

        _this.randomGenerator = randomGenerator;
        return _this;
    }

    _createClass(LogicalExpressionFunctionNode, [{
        key: "initialize",
        value: function initialize(operator) {
            this.operator = operator;
        }
    }, {
        key: "getNodeStructure",
        value: function getNodeStructure() {
            var structure = Nodes_1.Nodes.getFunctionDeclarationNode(this.randomGenerator.getRandomString(3), [Nodes_1.Nodes.getIdentifierNode('x'), Nodes_1.Nodes.getIdentifierNode('y')], Nodes_1.Nodes.getBlockStatementNode([Nodes_1.Nodes.getReturnStatementNode(Nodes_1.Nodes.getLogicalExpressionNode(this.operator, Nodes_1.Nodes.getIdentifierNode('x'), Nodes_1.Nodes.getIdentifierNode('y')))]));
            NodeUtils_1.NodeUtils.parentize(structure);
            return [structure];
        }
    }]);

    return LogicalExpressionFunctionNode;
}(AbstractCustomNode_1.AbstractCustomNode);
tslib_1.__decorate([Initializable_1.initializable(), tslib_1.__metadata("design:type", String)], LogicalExpressionFunctionNode.prototype, "operator", void 0);
LogicalExpressionFunctionNode = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Object, Object])], LogicalExpressionFunctionNode);
exports.LogicalExpressionFunctionNode = LogicalExpressionFunctionNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naWNhbEV4cHJlc3Npb25GdW5jdGlvbk5vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY3VzdG9tLW5vZGVzL2NvbnRyb2wtZmxvdy1mbGF0dGVuaW5nLW5vZGVzL0xvZ2ljYWxFeHByZXNzaW9uRnVuY3Rpb25Ob2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDBCQUErQztBQUMvQyxtQ0FBd0U7QUFTeEUsOEJBQStEO0FBRS9ELG1DQUEyRDtBQUMzRCxzQkFBeUM7QUFDekMsMEJBQWlEO0FBR2pEO0FBQUEsQUFBYSxBQUE2QixBQUFDOztBQWdCdkMsMkNBQ2lELEFBQWlDLGlCQUN6QyxBQUFpQjtBQUV0RCxBQUFLOztrS0FBQyxBQUFPLEFBQUMsQUFBQzs7QUFFZixBQUFJLGNBQUMsQUFBZSxrQkFBRyxBQUFlLEFBQUMsQUFDM0M7O0FBQUMsQUFLTSxBQUFVOzs7O21DQUFFLEFBQXlCO0FBQ3hDLEFBQUksaUJBQUMsQUFBUSxXQUFHLEFBQVEsQUFBQyxBQUM3QjtBQUFDLEFBS1MsQUFBZ0I7Ozs7QUFDdEIsZ0JBQU0sQUFBUyxZQUFlLFFBQUssTUFBQyxBQUEwQiwyQkFDMUQsQUFBSSxLQUFDLEFBQWUsZ0JBQUMsQUFBZSxnQkFBQyxBQUFDLEFBQUMsSUFDdkMsQ0FDSSxRQUFLLE1BQUMsQUFBaUIsa0JBQUMsQUFBRyxBQUFDLE1BQzVCLFFBQUssTUFBQyxBQUFpQixrQkFBQyxBQUFHLEFBQUMsQUFDL0IsT0FDRCxRQUFLLE1BQUMsQUFBcUIsc0JBQUMsQ0FDeEIsUUFBSyxNQUFDLEFBQXNCLHVCQUN4QixRQUFLLE1BQUMsQUFBd0IseUJBQzFCLEFBQUksS0FBQyxBQUFRLFVBQ2IsUUFBSyxNQUFDLEFBQWlCLGtCQUFDLEFBQUcsQUFBQyxNQUM1QixRQUFLLE1BQUMsQUFBaUIsa0JBQUMsQUFBRyxBQUFDLEFBQy9CLEFBQ0osQUFDSixBQUFDLEFBQ0wsQUFBQztBQUVGLHdCQUFTLFVBQUMsQUFBUyxVQUFDLEFBQVMsQUFBQyxBQUFDO0FBRS9CLEFBQU0sbUJBQUMsQ0FBQyxBQUFTLEFBQUMsQUFBQyxBQUN2QjtBQUFDLEFBQ0o7Ozs7RUF6RGtELHFCQUFrQjtBQUtqRSxvQkFEQyxnQkFBYSxBQUFFLHVIQUNrQjtBQUx6QixBQUE2QixvREFEekMsWUFBVSxBQUFFLGNBa0JKLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBZ0IsQUFBQyxvQkFDM0MsbUJBQUEsWUFBTSxPQUFDLHFCQUFrQixtQkFBQyxBQUFRLEFBQUMsd0VBbEIvQixBQUE2QixBQXlEekM7QUF6RFksd0NBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0YWJsZSwgaW5qZWN0IH0gZnJvbSAnaW52ZXJzaWZ5JztcbmltcG9ydCB7IFNlcnZpY2VJZGVudGlmaWVycyB9IGZyb20gJy4uLy4uL2NvbnRhaW5lci9TZXJ2aWNlSWRlbnRpZmllcnMnO1xuXG5pbXBvcnQgeyBMb2dpY2FsT3BlcmF0b3IgfSBmcm9tICdlc3RyZWUnO1xuXG5pbXBvcnQgeyBUU3RhdGVtZW50IH0gZnJvbSAnLi4vLi4vdHlwZXMvbm9kZS9UU3RhdGVtZW50JztcblxuaW1wb3J0IHsgSU9wdGlvbnMgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL29wdGlvbnMvSU9wdGlvbnMnO1xuaW1wb3J0IHsgSVJhbmRvbUdlbmVyYXRvciB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvdXRpbHMvSVJhbmRvbUdlbmVyYXRvcic7XG5cbmltcG9ydCB7IGluaXRpYWxpemFibGUgfSBmcm9tICcuLi8uLi9kZWNvcmF0b3JzL0luaXRpYWxpemFibGUnO1xuXG5pbXBvcnQgeyBBYnN0cmFjdEN1c3RvbU5vZGUgfSBmcm9tICcuLi9BYnN0cmFjdEN1c3RvbU5vZGUnO1xuaW1wb3J0IHsgTm9kZXMgfSBmcm9tICcuLi8uLi9ub2RlL05vZGVzJztcbmltcG9ydCB7IE5vZGVVdGlscyB9IGZyb20gJy4uLy4uL25vZGUvTm9kZVV0aWxzJztcblxuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvZ2ljYWxFeHByZXNzaW9uRnVuY3Rpb25Ob2RlIGV4dGVuZHMgQWJzdHJhY3RDdXN0b21Ob2RlIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TG9naWNhbE9wZXJhdG9yfVxuICAgICAqL1xuICAgIEBpbml0aWFsaXphYmxlKClcbiAgICBwcml2YXRlIG9wZXJhdG9yOiBMb2dpY2FsT3BlcmF0b3I7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SVJhbmRvbUdlbmVyYXRvcn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHJhbmRvbUdlbmVyYXRvcjogSVJhbmRvbUdlbmVyYXRvcjtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SVJhbmRvbUdlbmVyYXRvcn0gcmFuZG9tR2VuZXJhdG9yXG4gICAgICogQHBhcmFtIHtJT3B0aW9uc30gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuSVJhbmRvbUdlbmVyYXRvcikgcmFuZG9tR2VuZXJhdG9yOiBJUmFuZG9tR2VuZXJhdG9yLFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JT3B0aW9ucykgb3B0aW9uczogSU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5yYW5kb21HZW5lcmF0b3IgPSByYW5kb21HZW5lcmF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtMb2dpY2FsT3BlcmF0b3J9IG9wZXJhdG9yXG4gICAgICovXG4gICAgcHVibGljIGluaXRpYWxpemUgKG9wZXJhdG9yOiBMb2dpY2FsT3BlcmF0b3IpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtUU3RhdGVtZW50W119XG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldE5vZGVTdHJ1Y3R1cmUgKCk6IFRTdGF0ZW1lbnRbXSB7XG4gICAgICAgIGNvbnN0IHN0cnVjdHVyZTogVFN0YXRlbWVudCA9IE5vZGVzLmdldEZ1bmN0aW9uRGVjbGFyYXRpb25Ob2RlKFxuICAgICAgICAgICAgdGhpcy5yYW5kb21HZW5lcmF0b3IuZ2V0UmFuZG9tU3RyaW5nKDMpLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIE5vZGVzLmdldElkZW50aWZpZXJOb2RlKCd4JyksXG4gICAgICAgICAgICAgICAgTm9kZXMuZ2V0SWRlbnRpZmllck5vZGUoJ3knKVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIE5vZGVzLmdldEJsb2NrU3RhdGVtZW50Tm9kZShbXG4gICAgICAgICAgICAgICAgTm9kZXMuZ2V0UmV0dXJuU3RhdGVtZW50Tm9kZShcbiAgICAgICAgICAgICAgICAgICAgTm9kZXMuZ2V0TG9naWNhbEV4cHJlc3Npb25Ob2RlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVyYXRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIE5vZGVzLmdldElkZW50aWZpZXJOb2RlKCd4JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBOb2Rlcy5nZXRJZGVudGlmaWVyTm9kZSgneScpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKVxuICAgICAgICApO1xuXG4gICAgICAgIE5vZGVVdGlscy5wYXJlbnRpemUoc3RydWN0dXJlKTtcblxuICAgICAgICByZXR1cm4gW3N0cnVjdHVyZV07XG4gICAgfVxufVxuIl19