"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../container/ServiceIdentifiers");
var Initializable_1 = require("../../decorators/Initializable");
var AbstractCustomNode_1 = require("../AbstractCustomNode");
var Nodes_1 = require("../../node/Nodes");
var NodeUtils_1 = require("../../node/NodeUtils");
var BinaryExpressionFunctionNode = function (_AbstractCustomNode_) {
    _inherits(BinaryExpressionFunctionNode, _AbstractCustomNode_);

    function BinaryExpressionFunctionNode(randomGenerator, options) {
        _classCallCheck(this, BinaryExpressionFunctionNode);

        var _this = _possibleConstructorReturn(this, (BinaryExpressionFunctionNode.__proto__ || Object.getPrototypeOf(BinaryExpressionFunctionNode)).call(this, options));

        _this.randomGenerator = randomGenerator;
        return _this;
    }

    _createClass(BinaryExpressionFunctionNode, [{
        key: "initialize",
        value: function initialize(operator) {
            this.operator = operator;
        }
    }, {
        key: "getNodeStructure",
        value: function getNodeStructure() {
            var structure = Nodes_1.Nodes.getFunctionDeclarationNode(this.randomGenerator.getRandomString(3), [Nodes_1.Nodes.getIdentifierNode('x'), Nodes_1.Nodes.getIdentifierNode('y')], Nodes_1.Nodes.getBlockStatementNode([Nodes_1.Nodes.getReturnStatementNode(Nodes_1.Nodes.getBinaryExpressionNode(this.operator, Nodes_1.Nodes.getIdentifierNode('x'), Nodes_1.Nodes.getIdentifierNode('y')))]));
            NodeUtils_1.NodeUtils.parentize(structure);
            return [structure];
        }
    }]);

    return BinaryExpressionFunctionNode;
}(AbstractCustomNode_1.AbstractCustomNode);
tslib_1.__decorate([Initializable_1.initializable(), tslib_1.__metadata("design:type", String)], BinaryExpressionFunctionNode.prototype, "operator", void 0);
BinaryExpressionFunctionNode = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Object, Object])], BinaryExpressionFunctionNode);
exports.BinaryExpressionFunctionNode = BinaryExpressionFunctionNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmluYXJ5RXhwcmVzc2lvbkZ1bmN0aW9uTm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jdXN0b20tbm9kZXMvY29udHJvbC1mbG93LWZsYXR0ZW5pbmctbm9kZXMvQmluYXJ5RXhwcmVzc2lvbkZ1bmN0aW9uTm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSwwQkFBK0M7QUFDL0MsbUNBQXdFO0FBU3hFLDhCQUErRDtBQUUvRCxtQ0FBMkQ7QUFDM0Qsc0JBQXlDO0FBQ3pDLDBCQUFpRDtBQUdqRDtBQUFBLEFBQWEsQUFBNEIsQUFBQzs7QUFnQnRDLDBDQUNpRCxBQUFpQyxpQkFDekMsQUFBaUI7QUFFdEQsQUFBSzs7Z0tBQUMsQUFBTyxBQUFDLEFBQUM7O0FBRWYsQUFBSSxjQUFDLEFBQWUsa0JBQUcsQUFBZSxBQUFDLEFBQzNDOztBQUFDLEFBS00sQUFBVTs7OzttQ0FBRSxBQUF3QjtBQUN2QyxBQUFJLGlCQUFDLEFBQVEsV0FBRyxBQUFRLEFBQUMsQUFDN0I7QUFBQyxBQUtTLEFBQWdCOzs7O0FBQ3RCLGdCQUFNLEFBQVMsWUFBZSxRQUFLLE1BQUMsQUFBMEIsMkJBQzFELEFBQUksS0FBQyxBQUFlLGdCQUFDLEFBQWUsZ0JBQUMsQUFBQyxBQUFDLElBQ3ZDLENBQ0ksUUFBSyxNQUFDLEFBQWlCLGtCQUFDLEFBQUcsQUFBQyxNQUM1QixRQUFLLE1BQUMsQUFBaUIsa0JBQUMsQUFBRyxBQUFDLEFBQy9CLE9BQ0QsUUFBSyxNQUFDLEFBQXFCLHNCQUFDLENBQ3hCLFFBQUssTUFBQyxBQUFzQix1QkFDeEIsUUFBSyxNQUFDLEFBQXVCLHdCQUN6QixBQUFJLEtBQUMsQUFBUSxVQUNiLFFBQUssTUFBQyxBQUFpQixrQkFBQyxBQUFHLEFBQUMsTUFDNUIsUUFBSyxNQUFDLEFBQWlCLGtCQUFDLEFBQUcsQUFBQyxBQUMvQixBQUNKLEFBQ0osQUFBQyxBQUNMLEFBQUM7QUFFRix3QkFBUyxVQUFDLEFBQVMsVUFBQyxBQUFTLEFBQUMsQUFBQztBQUUvQixBQUFNLG1CQUFDLENBQUMsQUFBUyxBQUFDLEFBQUMsQUFDdkI7QUFBQyxBQUNKOzs7O0VBekRpRCxxQkFBa0I7QUFLaEUsb0JBREMsZ0JBQWEsQUFBRSxzSEFDaUI7QUFMeEIsQUFBNEIsbURBRHhDLFlBQVUsQUFBRSxjQWtCSixtQkFBQSxZQUFNLE9BQUMscUJBQWtCLG1CQUFDLEFBQWdCLEFBQUMsb0JBQzNDLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBUSxBQUFDLHdFQWxCL0IsQUFBNEIsQUF5RHhDO0FBekRZLHVDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdGFibGUsIGluamVjdCB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBTZXJ2aWNlSWRlbnRpZmllcnMgfSBmcm9tICcuLi8uLi9jb250YWluZXIvU2VydmljZUlkZW50aWZpZXJzJztcblxuaW1wb3J0IHsgQmluYXJ5T3BlcmF0b3IgfSBmcm9tICdlc3RyZWUnO1xuXG5pbXBvcnQgeyBUU3RhdGVtZW50IH0gZnJvbSAnLi4vLi4vdHlwZXMvbm9kZS9UU3RhdGVtZW50JztcblxuaW1wb3J0IHsgSU9wdGlvbnMgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL29wdGlvbnMvSU9wdGlvbnMnO1xuaW1wb3J0IHsgSVJhbmRvbUdlbmVyYXRvciB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvdXRpbHMvSVJhbmRvbUdlbmVyYXRvcic7XG5cbmltcG9ydCB7IGluaXRpYWxpemFibGUgfSBmcm9tICcuLi8uLi9kZWNvcmF0b3JzL0luaXRpYWxpemFibGUnO1xuXG5pbXBvcnQgeyBBYnN0cmFjdEN1c3RvbU5vZGUgfSBmcm9tICcuLi9BYnN0cmFjdEN1c3RvbU5vZGUnO1xuaW1wb3J0IHsgTm9kZXMgfSBmcm9tICcuLi8uLi9ub2RlL05vZGVzJztcbmltcG9ydCB7IE5vZGVVdGlscyB9IGZyb20gJy4uLy4uL25vZGUvTm9kZVV0aWxzJztcblxuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJpbmFyeUV4cHJlc3Npb25GdW5jdGlvbk5vZGUgZXh0ZW5kcyBBYnN0cmFjdEN1c3RvbU5vZGUge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtCaW5hcnlPcGVyYXRvcn1cbiAgICAgKi9cbiAgICBAaW5pdGlhbGl6YWJsZSgpXG4gICAgcHJpdmF0ZSBvcGVyYXRvcjogQmluYXJ5T3BlcmF0b3I7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SVJhbmRvbUdlbmVyYXRvcn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHJhbmRvbUdlbmVyYXRvcjogSVJhbmRvbUdlbmVyYXRvcjtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SVJhbmRvbUdlbmVyYXRvcn0gcmFuZG9tR2VuZXJhdG9yXG4gICAgICogQHBhcmFtIHtJT3B0aW9uc30gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuSVJhbmRvbUdlbmVyYXRvcikgcmFuZG9tR2VuZXJhdG9yOiBJUmFuZG9tR2VuZXJhdG9yLFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JT3B0aW9ucykgb3B0aW9uczogSU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5yYW5kb21HZW5lcmF0b3IgPSByYW5kb21HZW5lcmF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtCaW5hcnlPcGVyYXRvcn0gb3BlcmF0b3JcbiAgICAgKi9cbiAgICBwdWJsaWMgaW5pdGlhbGl6ZSAob3BlcmF0b3I6IEJpbmFyeU9wZXJhdG9yKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7VFN0YXRlbWVudFtdfVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXROb2RlU3RydWN0dXJlICgpOiBUU3RhdGVtZW50W10ge1xuICAgICAgICBjb25zdCBzdHJ1Y3R1cmU6IFRTdGF0ZW1lbnQgPSBOb2Rlcy5nZXRGdW5jdGlvbkRlY2xhcmF0aW9uTm9kZShcbiAgICAgICAgICAgIHRoaXMucmFuZG9tR2VuZXJhdG9yLmdldFJhbmRvbVN0cmluZygzKSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBOb2Rlcy5nZXRJZGVudGlmaWVyTm9kZSgneCcpLFxuICAgICAgICAgICAgICAgIE5vZGVzLmdldElkZW50aWZpZXJOb2RlKCd5JylcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBOb2Rlcy5nZXRCbG9ja1N0YXRlbWVudE5vZGUoW1xuICAgICAgICAgICAgICAgIE5vZGVzLmdldFJldHVyblN0YXRlbWVudE5vZGUoXG4gICAgICAgICAgICAgICAgICAgIE5vZGVzLmdldEJpbmFyeUV4cHJlc3Npb25Ob2RlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVyYXRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIE5vZGVzLmdldElkZW50aWZpZXJOb2RlKCd4JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBOb2Rlcy5nZXRJZGVudGlmaWVyTm9kZSgneScpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKVxuICAgICAgICApO1xuXG4gICAgICAgIE5vZGVVdGlscy5wYXJlbnRpemUoc3RydWN0dXJlKTtcblxuICAgICAgICByZXR1cm4gW3N0cnVjdHVyZV07XG4gICAgfVxufVxuIl19