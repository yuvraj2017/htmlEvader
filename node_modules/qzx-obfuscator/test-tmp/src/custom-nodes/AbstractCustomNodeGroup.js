"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../container/ServiceIdentifiers");
var AbstractCustomNodeGroup = function () {
    function AbstractCustomNodeGroup(randomGenerator, options) {
        _classCallCheck(this, AbstractCustomNodeGroup);

        this.randomGenerator = randomGenerator;
        this.options = options;
    }

    _createClass(AbstractCustomNodeGroup, [{
        key: "getAppendEvent",
        value: function getAppendEvent() {
            return this.appendEvent;
        }
    }, {
        key: "getCustomNodes",
        value: function getCustomNodes() {
            return this.customNodes;
        }
    }, {
        key: "appendCustomNodeIfExist",
        value: function appendCustomNodeIfExist(customNodeName, callback) {
            var customNode = this.customNodes.get(customNodeName);
            if (!customNode) {
                return;
            }
            callback(customNode);
        }
    }, {
        key: "getRandomStackTraceIndex",
        value: function getRandomStackTraceIndex(stackTraceLength) {
            return this.randomGenerator.getRandomInteger(0, Math.max(0, Math.round(stackTraceLength - 1)));
        }
    }]);

    return AbstractCustomNodeGroup;
}();
AbstractCustomNodeGroup = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Object, Object])], AbstractCustomNodeGroup);
exports.AbstractCustomNodeGroup = AbstractCustomNodeGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RDdXN0b21Ob2RlR3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY3VzdG9tLW5vZGVzL0Fic3RyYWN0Q3VzdG9tTm9kZUdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsMEJBQStDO0FBQy9DLG1DQUFxRTtBQWNyRTtBQThCSSxxQ0FDaUQsQUFBaUMsaUJBQ3pDLEFBQWlCOzs7QUFFdEQsQUFBSSxhQUFDLEFBQWUsa0JBQUcsQUFBZSxBQUFDO0FBQ3ZDLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBTyxBQUFDLEFBQzNCO0FBQUMsQUFXTSxBQUFjOztBQS9DekIsQUFBc0IsQUFBdUI7OztBQWdEckMsQUFBTSxtQkFBQyxBQUFJLEtBQUMsQUFBVyxBQUFDLEFBQzVCO0FBQUMsQUFLTSxBQUFjOzs7O0FBQ2pCLEFBQU0sbUJBQUMsQUFBSSxLQUFDLEFBQVcsQUFBQyxBQUM1QjtBQUFDLEFBUVMsQUFBdUI7OztnREFBRSxBQUEwQixnQkFBRSxBQUEyQztBQUN0RyxnQkFBTSxBQUFVLGFBQTRCLEFBQUksS0FBQyxBQUFXLFlBQUMsQUFBRyxJQUFDLEFBQWMsQUFBQyxBQUFDO0FBRWpGLEFBQUUsQUFBQyxnQkFBQyxDQUFDLEFBQVUsQUFBQyxZQUFDLEFBQUM7QUFDZCxBQUFNLEFBQUMsQUFDWDtBQUFDO0FBRUQsQUFBUSxxQkFBQyxBQUFVLEFBQUMsQUFBQyxBQUN6QjtBQUFDLEFBTVMsQUFBd0I7OztpREFBRSxBQUF3QjtBQUN4RCxBQUFNLG1CQUFDLEFBQUksS0FBQyxBQUFlLGdCQUFDLEFBQWdCLGlCQUFDLEFBQUMsR0FBRSxBQUFJLEtBQUMsQUFBRyxJQUFDLEFBQUMsR0FBRSxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQWdCLG1CQUFHLEFBQUMsQUFBQyxBQUFDLEFBQUMsQUFBQyxBQUNuRztBQUFDLEFBQ0o7Ozs7O0FBakZxQixBQUF1Qiw4Q0FENUMsWUFBVSxBQUFFLGNBZ0NKLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBZ0IsQUFBQyxvQkFDM0MsbUJBQUEsWUFBTSxPQUFDLHFCQUFrQixtQkFBQyxBQUFRLEFBQUMsd0VBaEN0QixBQUF1QixBQWlGNUM7QUFqRnFCLGtDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdGFibGUsIGluamVjdCB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBTZXJ2aWNlSWRlbnRpZmllcnMgfSBmcm9tICcuLi9jb250YWluZXIvU2VydmljZUlkZW50aWZpZXJzJztcblxuaW1wb3J0IHsgVE5vZGVXaXRoQmxvY2tTdGF0ZW1lbnQgfSBmcm9tICcuLi90eXBlcy9ub2RlL1ROb2RlV2l0aEJsb2NrU3RhdGVtZW50JztcblxuaW1wb3J0IHsgSUN1c3RvbU5vZGUgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2N1c3RvbS1ub2Rlcy9JQ3VzdG9tTm9kZSc7XG5pbXBvcnQgeyBJQ3VzdG9tTm9kZUdyb3VwIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jdXN0b20tbm9kZXMvSUN1c3RvbU5vZGVHcm91cCc7XG5pbXBvcnQgeyBJT3B0aW9ucyB9IGZyb20gJy4uL2ludGVyZmFjZXMvb3B0aW9ucy9JT3B0aW9ucyc7XG5pbXBvcnQgeyBJUmFuZG9tR2VuZXJhdG9yIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy91dGlscy9JUmFuZG9tR2VuZXJhdG9yJztcbmltcG9ydCB7IElTdGFja1RyYWNlRGF0YSB9IGZyb20gJy4uL2ludGVyZmFjZXMvc3RhY2stdHJhY2UtYW5hbHl6ZXIvSVN0YWNrVHJhY2VEYXRhJztcblxuaW1wb3J0IHsgQ3VzdG9tTm9kZSB9IGZyb20gJy4uL2VudW1zL2NvbnRhaW5lci9jdXN0b20tbm9kZXMvQ3VzdG9tTm9kZSc7XG5pbXBvcnQgeyBPYmZ1c2NhdGlvbkV2ZW50IH0gZnJvbSAnLi4vZW51bXMvZXZlbnQtZW1pdHRlcnMvT2JmdXNjYXRpb25FdmVudCc7XG5cbkBpbmplY3RhYmxlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEN1c3RvbU5vZGVHcm91cCBpbXBsZW1lbnRzIElDdXN0b21Ob2RlR3JvdXAge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtPYmZ1c2NhdGlvbkV2ZW50fVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCByZWFkb25seSBhcHBlbmRFdmVudDogT2JmdXNjYXRpb25FdmVudDtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8Q3VzdG9tTm9kZSwgSUN1c3RvbU5vZGU+fVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBjdXN0b21Ob2RlczogTWFwIDxDdXN0b21Ob2RlLCBJQ3VzdG9tTm9kZT47XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SVN0YWNrVHJhY2VEYXRhW119XG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHN0YWNrVHJhY2VEYXRhOiBJU3RhY2tUcmFjZURhdGFbXTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJT3B0aW9uc31cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgb3B0aW9uczogSU9wdGlvbnM7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SVJhbmRvbUdlbmVyYXRvcn1cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcmFuZG9tR2VuZXJhdG9yOiBJUmFuZG9tR2VuZXJhdG9yO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtJUmFuZG9tR2VuZXJhdG9yfSByYW5kb21HZW5lcmF0b3JcbiAgICAgKiBAcGFyYW0ge0lPcHRpb25zfSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JUmFuZG9tR2VuZXJhdG9yKSByYW5kb21HZW5lcmF0b3I6IElSYW5kb21HZW5lcmF0b3IsXG4gICAgICAgIEBpbmplY3QoU2VydmljZUlkZW50aWZpZXJzLklPcHRpb25zKSBvcHRpb25zOiBJT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLnJhbmRvbUdlbmVyYXRvciA9IHJhbmRvbUdlbmVyYXRvcjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1ROb2RlV2l0aEJsb2NrU3RhdGVtZW50fSBibG9ja1Njb3BlTm9kZVxuICAgICAqIEBwYXJhbSB7SVN0YWNrVHJhY2VEYXRhW119IHN0YWNrVHJhY2VEYXRhXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGFwcGVuZEN1c3RvbU5vZGVzIChibG9ja1Njb3BlTm9kZTogVE5vZGVXaXRoQmxvY2tTdGF0ZW1lbnQsIHN0YWNrVHJhY2VEYXRhOiBJU3RhY2tUcmFjZURhdGFbXSk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7T2JmdXNjYXRpb25FdmVudH1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0QXBwZW5kRXZlbnQgKCk6IE9iZnVzY2F0aW9uRXZlbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBlbmRFdmVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7TWFwPEN1c3RvbU5vZGUsIElDdXN0b21Ob2RlPn1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q3VzdG9tTm9kZXMgKCk6IE1hcCA8Q3VzdG9tTm9kZSwgSUN1c3RvbU5vZGU+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tTm9kZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFic3RyYWN0IGluaXRpYWxpemUgKCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0N1c3RvbU5vZGV9IGN1c3RvbU5vZGVOYW1lXG4gICAgICogQHBhcmFtIHtjYWxsYmFja30gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYXBwZW5kQ3VzdG9tTm9kZUlmRXhpc3QgKGN1c3RvbU5vZGVOYW1lOiBDdXN0b21Ob2RlLCBjYWxsYmFjazogKGN1c3RvbU5vZGU6IElDdXN0b21Ob2RlKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGN1c3RvbU5vZGU6IElDdXN0b21Ob2RlIHwgdW5kZWZpbmVkID0gdGhpcy5jdXN0b21Ob2Rlcy5nZXQoY3VzdG9tTm9kZU5hbWUpO1xuXG4gICAgICAgIGlmICghY3VzdG9tTm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2soY3VzdG9tTm9kZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YWNrVHJhY2VMZW5ndGhcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRSYW5kb21TdGFja1RyYWNlSW5kZXggKHN0YWNrVHJhY2VMZW5ndGg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmRvbUdlbmVyYXRvci5nZXRSYW5kb21JbnRlZ2VyKDAsIE1hdGgubWF4KDAsIE1hdGgucm91bmQoc3RhY2tUcmFjZUxlbmd0aCAtIDEpKSk7XG4gICAgfVxufVxuIl19