"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../container/ServiceIdentifiers");
var format = require("string-template");
var Initializable_1 = require("../../decorators/Initializable");
var DebugProtectionFunctionIntervalTemplate_1 = require("../../templates/custom-nodes/debug-protection-nodes/debug-protection-function-interval-node/DebugProtectionFunctionIntervalTemplate");
var AbstractCustomNode_1 = require("../AbstractCustomNode");
var NodeUtils_1 = require("../../node/NodeUtils");
var DebugProtectionFunctionIntervalNode = function (_AbstractCustomNode_) {
    _inherits(DebugProtectionFunctionIntervalNode, _AbstractCustomNode_);

    function DebugProtectionFunctionIntervalNode(options) {
        _classCallCheck(this, DebugProtectionFunctionIntervalNode);

        return _possibleConstructorReturn(this, (DebugProtectionFunctionIntervalNode.__proto__ || Object.getPrototypeOf(DebugProtectionFunctionIntervalNode)).call(this, options));
    }

    _createClass(DebugProtectionFunctionIntervalNode, [{
        key: "initialize",
        value: function initialize(debugProtectionFunctionName) {
            this.debugProtectionFunctionName = debugProtectionFunctionName;
        }
    }, {
        key: "getNodeStructure",
        value: function getNodeStructure() {
            return NodeUtils_1.NodeUtils.convertCodeToStructure(this.getTemplate());
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return format(DebugProtectionFunctionIntervalTemplate_1.DebugProtectionFunctionIntervalTemplate(), {
                debugProtectionFunctionName: this.debugProtectionFunctionName
            });
        }
    }]);

    return DebugProtectionFunctionIntervalNode;
}(AbstractCustomNode_1.AbstractCustomNode);
tslib_1.__decorate([Initializable_1.initializable(), tslib_1.__metadata("design:type", String)], DebugProtectionFunctionIntervalNode.prototype, "debugProtectionFunctionName", void 0);
DebugProtectionFunctionIntervalNode = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Object])], DebugProtectionFunctionIntervalNode);
exports.DebugProtectionFunctionIntervalNode = DebugProtectionFunctionIntervalNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdQcm90ZWN0aW9uRnVuY3Rpb25JbnRlcnZhbE5vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY3VzdG9tLW5vZGVzL2RlYnVnLXByb3RlY3Rpb24tbm9kZXMvRGVidWdQcm90ZWN0aW9uRnVuY3Rpb25JbnRlcnZhbE5vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsMEJBQStDO0FBQy9DLG1DQUF3RTtBQUV4RSxxQkFBMEM7QUFNMUMsOEJBQStEO0FBRS9ELHdEQUE4TDtBQUU5TCxtQ0FBMkQ7QUFDM0QsMEJBQWlEO0FBR2pEO0FBQUEsQUFBYSxBQUFtQyxBQUFDOztBQVU3QyxpREFDeUMsQUFBaUI7QUFFdEQsQUFBSzs7eUtBQUMsQUFBTyxBQUFDLEFBQUMsQUFDbkI7QUFBQyxBQUtNLEFBQVU7Ozs7bUNBQUUsQUFBbUM7QUFDbEQsQUFBSSxpQkFBQyxBQUEyQiw4QkFBRyxBQUEyQixBQUFDLEFBQ25FO0FBQUMsQUFLUyxBQUFnQjs7OztBQUN0QixBQUFNLG1CQUFDLFlBQVMsVUFBQyxBQUFzQix1QkFBQyxBQUFJLEtBQUMsQUFBVyxBQUFFLEFBQUMsQUFBQyxBQUNoRTtBQUFDLEFBS1MsQUFBVzs7OztBQUNqQixBQUFNLDBCQUFRLDBDQUF1QyxBQUFFO0FBQ25ELEFBQTJCLDZDQUFFLEFBQUksS0FBQyxBQUEyQixBQUNoRSxBQUFDLEFBQUMsQUFDUDtBQUg2RCxhQUFsRCxBQUFNO0FBR2hCLEFBQ0o7Ozs7RUF0Q3dELHFCQUFrQjtBQUt2RSxvQkFEQyxnQkFBYSxBQUFFLGdKQUM0QjtBQUxuQyxBQUFtQywwREFEL0MsWUFBVSxBQUFFLGNBWUosbUJBQUEsWUFBTSxPQUFDLHFCQUFrQixtQkFBQyxBQUFRLEFBQUMsZ0VBWC9CLEFBQW1DLEFBc0MvQztBQXRDWSw4Q0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3RhYmxlLCBpbmplY3QgfSBmcm9tICdpbnZlcnNpZnknO1xuaW1wb3J0IHsgU2VydmljZUlkZW50aWZpZXJzIH0gZnJvbSAnLi4vLi4vY29udGFpbmVyL1NlcnZpY2VJZGVudGlmaWVycyc7XG5cbmltcG9ydCAqIGFzIGZvcm1hdCBmcm9tICdzdHJpbmctdGVtcGxhdGUnO1xuXG5pbXBvcnQgeyBUU3RhdGVtZW50IH0gZnJvbSAnLi4vLi4vdHlwZXMvbm9kZS9UU3RhdGVtZW50JztcblxuaW1wb3J0IHsgSU9wdGlvbnMgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL29wdGlvbnMvSU9wdGlvbnMnO1xuXG5pbXBvcnQgeyBpbml0aWFsaXphYmxlIH0gZnJvbSAnLi4vLi4vZGVjb3JhdG9ycy9Jbml0aWFsaXphYmxlJztcblxuaW1wb3J0IHsgRGVidWdQcm90ZWN0aW9uRnVuY3Rpb25JbnRlcnZhbFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vdGVtcGxhdGVzL2N1c3RvbS1ub2Rlcy9kZWJ1Zy1wcm90ZWN0aW9uLW5vZGVzL2RlYnVnLXByb3RlY3Rpb24tZnVuY3Rpb24taW50ZXJ2YWwtbm9kZS9EZWJ1Z1Byb3RlY3Rpb25GdW5jdGlvbkludGVydmFsVGVtcGxhdGUnO1xuXG5pbXBvcnQgeyBBYnN0cmFjdEN1c3RvbU5vZGUgfSBmcm9tICcuLi9BYnN0cmFjdEN1c3RvbU5vZGUnO1xuaW1wb3J0IHsgTm9kZVV0aWxzIH0gZnJvbSAnLi4vLi4vbm9kZS9Ob2RlVXRpbHMnO1xuXG5AaW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGVidWdQcm90ZWN0aW9uRnVuY3Rpb25JbnRlcnZhbE5vZGUgZXh0ZW5kcyBBYnN0cmFjdEN1c3RvbU5vZGUge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQGluaXRpYWxpemFibGUoKVxuICAgIHByaXZhdGUgZGVidWdQcm90ZWN0aW9uRnVuY3Rpb25OYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0lPcHRpb25zfSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JT3B0aW9ucykgb3B0aW9uczogSU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRlYnVnUHJvdGVjdGlvbkZ1bmN0aW9uTmFtZVxuICAgICAqL1xuICAgIHB1YmxpYyBpbml0aWFsaXplIChkZWJ1Z1Byb3RlY3Rpb25GdW5jdGlvbk5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmRlYnVnUHJvdGVjdGlvbkZ1bmN0aW9uTmFtZSA9IGRlYnVnUHJvdGVjdGlvbkZ1bmN0aW9uTmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7VFN0YXRlbWVudFtdfVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXROb2RlU3RydWN0dXJlICgpOiBUU3RhdGVtZW50W10ge1xuICAgICAgICByZXR1cm4gTm9kZVV0aWxzLmNvbnZlcnRDb2RlVG9TdHJ1Y3R1cmUodGhpcy5nZXRUZW1wbGF0ZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRUZW1wbGF0ZSAoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdChEZWJ1Z1Byb3RlY3Rpb25GdW5jdGlvbkludGVydmFsVGVtcGxhdGUoKSwge1xuICAgICAgICAgICAgZGVidWdQcm90ZWN0aW9uRnVuY3Rpb25OYW1lOiB0aGlzLmRlYnVnUHJvdGVjdGlvbkZ1bmN0aW9uTmFtZVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=