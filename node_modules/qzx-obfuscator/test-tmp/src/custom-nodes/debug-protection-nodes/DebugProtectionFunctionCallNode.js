"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../container/ServiceIdentifiers");
var format = require("string-template");
var Initializable_1 = require("../../decorators/Initializable");
var DebufProtectionFunctionCallTemplate_1 = require("../../templates/custom-nodes/debug-protection-nodes/debug-protection-function-call-node/DebufProtectionFunctionCallTemplate");
var AbstractCustomNode_1 = require("../AbstractCustomNode");
var NodeUtils_1 = require("../../node/NodeUtils");
var DebugProtectionFunctionCallNode = function (_AbstractCustomNode_) {
    _inherits(DebugProtectionFunctionCallNode, _AbstractCustomNode_);

    function DebugProtectionFunctionCallNode(options) {
        _classCallCheck(this, DebugProtectionFunctionCallNode);

        return _possibleConstructorReturn(this, (DebugProtectionFunctionCallNode.__proto__ || Object.getPrototypeOf(DebugProtectionFunctionCallNode)).call(this, options));
    }

    _createClass(DebugProtectionFunctionCallNode, [{
        key: "initialize",
        value: function initialize(debugProtectionFunctionName) {
            this.debugProtectionFunctionName = debugProtectionFunctionName;
        }
    }, {
        key: "getNodeStructure",
        value: function getNodeStructure() {
            return NodeUtils_1.NodeUtils.convertCodeToStructure(this.getTemplate());
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return format(DebufProtectionFunctionCallTemplate_1.DebugProtectionFunctionCallTemplate(), {
                debugProtectionFunctionName: this.debugProtectionFunctionName
            });
        }
    }]);

    return DebugProtectionFunctionCallNode;
}(AbstractCustomNode_1.AbstractCustomNode);
tslib_1.__decorate([Initializable_1.initializable(), tslib_1.__metadata("design:type", String)], DebugProtectionFunctionCallNode.prototype, "debugProtectionFunctionName", void 0);
DebugProtectionFunctionCallNode = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Object])], DebugProtectionFunctionCallNode);
exports.DebugProtectionFunctionCallNode = DebugProtectionFunctionCallNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdQcm90ZWN0aW9uRnVuY3Rpb25DYWxsTm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jdXN0b20tbm9kZXMvZGVidWctcHJvdGVjdGlvbi1ub2Rlcy9EZWJ1Z1Byb3RlY3Rpb25GdW5jdGlvbkNhbGxOb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDBCQUErQztBQUMvQyxtQ0FBd0U7QUFFeEUscUJBQTBDO0FBTTFDLDhCQUErRDtBQUUvRCxvREFBa0w7QUFFbEwsbUNBQTJEO0FBQzNELDBCQUFpRDtBQUdqRDtBQUFBLEFBQWEsQUFBK0IsQUFBQzs7QUFVekMsNkNBQ3lDLEFBQWlCO0FBRXRELEFBQUs7O2lLQUFDLEFBQU8sQUFBQyxBQUFDLEFBQ25CO0FBQUMsQUFLTSxBQUFVOzs7O21DQUFFLEFBQW1DO0FBQ2xELEFBQUksaUJBQUMsQUFBMkIsOEJBQUcsQUFBMkIsQUFBQyxBQUNuRTtBQUFDLEFBS1MsQUFBZ0I7Ozs7QUFDdEIsQUFBTSxtQkFBQyxZQUFTLFVBQUMsQUFBc0IsdUJBQUMsQUFBSSxLQUFDLEFBQVcsQUFBRSxBQUFDLEFBQUMsQUFDaEU7QUFBQyxBQUtTLEFBQVc7Ozs7QUFDakIsQUFBTSwwQkFBUSxzQ0FBbUMsQUFBRTtBQUMvQyxBQUEyQiw2Q0FBRSxBQUFJLEtBQUMsQUFBMkIsQUFDaEUsQUFBQyxBQUFDLEFBQ1A7QUFIeUQsYUFBOUMsQUFBTTtBQUdoQixBQUNKOzs7O0VBdENvRCxxQkFBa0I7QUFLbkUsb0JBREMsZ0JBQWEsQUFBRSw0SUFDNEI7QUFMbkMsQUFBK0Isc0RBRDNDLFlBQVUsQUFBRSxjQVlKLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBUSxBQUFDLGdFQVgvQixBQUErQixBQXNDM0M7QUF0Q1ksMENBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0YWJsZSwgaW5qZWN0IH0gZnJvbSAnaW52ZXJzaWZ5JztcbmltcG9ydCB7IFNlcnZpY2VJZGVudGlmaWVycyB9IGZyb20gJy4uLy4uL2NvbnRhaW5lci9TZXJ2aWNlSWRlbnRpZmllcnMnO1xuXG5pbXBvcnQgKiBhcyBmb3JtYXQgZnJvbSAnc3RyaW5nLXRlbXBsYXRlJztcblxuaW1wb3J0IHsgVFN0YXRlbWVudCB9IGZyb20gJy4uLy4uL3R5cGVzL25vZGUvVFN0YXRlbWVudCc7XG5cbmltcG9ydCB7IElPcHRpb25zIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9vcHRpb25zL0lPcHRpb25zJztcblxuaW1wb3J0IHsgaW5pdGlhbGl6YWJsZSB9IGZyb20gJy4uLy4uL2RlY29yYXRvcnMvSW5pdGlhbGl6YWJsZSc7XG5cbmltcG9ydCB7IERlYnVnUHJvdGVjdGlvbkZ1bmN0aW9uQ2FsbFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vdGVtcGxhdGVzL2N1c3RvbS1ub2Rlcy9kZWJ1Zy1wcm90ZWN0aW9uLW5vZGVzL2RlYnVnLXByb3RlY3Rpb24tZnVuY3Rpb24tY2FsbC1ub2RlL0RlYnVmUHJvdGVjdGlvbkZ1bmN0aW9uQ2FsbFRlbXBsYXRlJztcblxuaW1wb3J0IHsgQWJzdHJhY3RDdXN0b21Ob2RlIH0gZnJvbSAnLi4vQWJzdHJhY3RDdXN0b21Ob2RlJztcbmltcG9ydCB7IE5vZGVVdGlscyB9IGZyb20gJy4uLy4uL25vZGUvTm9kZVV0aWxzJztcblxuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERlYnVnUHJvdGVjdGlvbkZ1bmN0aW9uQ2FsbE5vZGUgZXh0ZW5kcyBBYnN0cmFjdEN1c3RvbU5vZGUge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQGluaXRpYWxpemFibGUoKVxuICAgIHByaXZhdGUgZGVidWdQcm90ZWN0aW9uRnVuY3Rpb25OYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0lPcHRpb25zfSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JT3B0aW9ucykgb3B0aW9uczogSU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRlYnVnUHJvdGVjdGlvbkZ1bmN0aW9uTmFtZVxuICAgICAqL1xuICAgIHB1YmxpYyBpbml0aWFsaXplIChkZWJ1Z1Byb3RlY3Rpb25GdW5jdGlvbk5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmRlYnVnUHJvdGVjdGlvbkZ1bmN0aW9uTmFtZSA9IGRlYnVnUHJvdGVjdGlvbkZ1bmN0aW9uTmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7VFN0YXRlbWVudFtdfVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXROb2RlU3RydWN0dXJlICgpOiBUU3RhdGVtZW50W10ge1xuICAgICAgICByZXR1cm4gTm9kZVV0aWxzLmNvbnZlcnRDb2RlVG9TdHJ1Y3R1cmUodGhpcy5nZXRUZW1wbGF0ZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRUZW1wbGF0ZSAoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdChEZWJ1Z1Byb3RlY3Rpb25GdW5jdGlvbkNhbGxUZW1wbGF0ZSgpLCB7XG4gICAgICAgICAgICBkZWJ1Z1Byb3RlY3Rpb25GdW5jdGlvbk5hbWU6IHRoaXMuZGVidWdQcm90ZWN0aW9uRnVuY3Rpb25OYW1lXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==