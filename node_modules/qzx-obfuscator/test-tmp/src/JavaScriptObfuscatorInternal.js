"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("./container/ServiceIdentifiers");
var esprima = require("esprima");
var escodegen = require("escodegen-wallaby");
var esmangle = require("esmangle");
var JavaScriptObfuscatorInternal = JavaScriptObfuscatorInternal_1 = function () {
    function JavaScriptObfuscatorInternal(obfuscator, sourceMapCorrector, options) {
        _classCallCheck(this, JavaScriptObfuscatorInternal);

        this.obfuscator = obfuscator;
        this.sourceMapCorrector = sourceMapCorrector;
        this.options = options;
    }

    _createClass(JavaScriptObfuscatorInternal, [{
        key: "obfuscate",
        value: function obfuscate(sourceCode) {
            var astTree = this.parseCode(sourceCode);
            var obfuscatedAstTree = this.obfuscator.obfuscateAstTree(astTree);
            var generatorOutput = this.generateCode(sourceCode, obfuscatedAstTree);
            return this.getObfuscationResult(generatorOutput);
        }
    }, {
        key: "parseCode",
        value: function parseCode(sourceCode) {
            return esprima.parse(sourceCode, {
                loc: this.options.sourceMap
            });
        }
    }, {
        key: "generateCode",
        value: function generateCode(sourceCode, astTree) {
            var escodegenParams = Object.assign({}, JavaScriptObfuscatorInternal_1.escodegenParams);
            if (this.options.sourceMap) {
                escodegenParams.sourceMap = 'sourceMap';
                escodegenParams.sourceContent = sourceCode;
            }
            if (this.options.mangle) {
                astTree = esmangle.mangle(astTree);
            }
            var generatorOutput = escodegen.generate(astTree, Object.assign({}, escodegenParams, { format: {
                    compact: this.options.compact
                } }));
            generatorOutput.map = generatorOutput.map ? generatorOutput.map.toString() : '';
            return generatorOutput;
        }
    }, {
        key: "getObfuscationResult",
        value: function getObfuscationResult(generatorOutput) {
            return this.sourceMapCorrector.correct(generatorOutput.code, generatorOutput.map);
        }
    }]);

    return JavaScriptObfuscatorInternal;
}();
JavaScriptObfuscatorInternal.escodegenParams = {
    verbatim: 'x-verbatim-property',
    sourceMapWithCode: true
};
JavaScriptObfuscatorInternal = JavaScriptObfuscatorInternal_1 = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IObfuscator)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.ISourceMapCorrector)), tslib_1.__param(2, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Object, Object, Object])], JavaScriptObfuscatorInternal);
exports.JavaScriptObfuscatorInternal = JavaScriptObfuscatorInternal;
var JavaScriptObfuscatorInternal_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSmF2YVNjcmlwdE9iZnVzY2F0b3JJbnRlcm5hbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9KYXZhU2NyaXB0T2JmdXNjYXRvckludGVybmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsMEJBQStDO0FBQy9DLG1DQUFvRTtBQUVwRSxzQkFBbUM7QUFDbkMsd0JBQStDO0FBQy9DLHVCQUFxQztBQVdyQyxJQUFhLEFBQTRCO0FBNkJyQywwQ0FDNEMsQUFBdUIsWUFDZixBQUF1QyxvQkFDbEQsQUFBaUI7OztBQUV0RCxBQUFJLGFBQUMsQUFBVSxhQUFHLEFBQVUsQUFBQztBQUM3QixBQUFJLGFBQUMsQUFBa0IscUJBQUcsQUFBa0IsQUFBQztBQUM3QyxBQUFJLGFBQUMsQUFBTyxVQUFHLEFBQU8sQUFBQyxBQUMzQjtBQUFDLEFBTU0sQUFBUzs7QUEzQ3BCOztrQ0EyQ3NCLEFBQWtCO0FBRWhDLGdCQUFNLEFBQU8sVUFBbUIsQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFVLEFBQUMsQUFBQztBQUczRCxnQkFBTSxBQUFpQixvQkFBbUIsQUFBSSxLQUFDLEFBQVUsV0FBQyxBQUFnQixpQkFBQyxBQUFPLEFBQUMsQUFBQztBQUdwRixnQkFBTSxBQUFlLGtCQUFxQixBQUFJLEtBQUMsQUFBWSxhQUFDLEFBQVUsWUFBRSxBQUFpQixBQUFDLEFBQUM7QUFFM0YsQUFBTSxtQkFBQyxBQUFJLEtBQUMsQUFBb0IscUJBQUMsQUFBZSxBQUFDLEFBQUMsQUFDdEQ7QUFBQyxBQU1PLEFBQVM7OztrQ0FBRSxBQUFrQjtBQUNqQyxBQUFNLDJCQUFTLEFBQUssTUFBQyxBQUFVO0FBQzNCLEFBQUcscUJBQUUsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFTLEFBQzlCLEFBQUMsQUFBQyxBQUNQO0FBSHFDLGFBQTFCLEFBQU87QUFHakIsQUFPTyxBQUFZOzs7cUNBQUUsQUFBa0IsWUFBRSxBQUF1QjtBQUM3RCxnQkFBTSxBQUFlLG9DQUNkLEFBQTRCLCtCQUFDLEFBQWUsQUFDbEQsQUFBQztBQUVGLEFBQUUsQUFBQyxnQkFBQyxBQUFJLEtBQUMsQUFBTyxRQUFDLEFBQVMsQUFBQyxXQUFDLEFBQUM7QUFDekIsQUFBZSxnQ0FBQyxBQUFTLFlBQUcsQUFBVyxBQUFDO0FBQ3hDLEFBQWUsZ0NBQUMsQUFBYSxnQkFBRyxBQUFVLEFBQUMsQUFDL0M7QUFBQztBQUVELEFBQUUsQUFBQyxnQkFBQyxBQUFJLEtBQUMsQUFBTyxRQUFDLEFBQU0sQUFBQyxRQUFDLEFBQUM7QUFDdEIsQUFBTywwQkFBRyxBQUFRLFNBQUMsQUFBTSxPQUFDLEFBQU8sQUFBQyxBQUFDLEFBQ3ZDO0FBQUM7QUFFRCxnQkFBTSxBQUFlLDRCQUErQixBQUFRLFNBQUMsQUFBTywyQkFDN0QsQUFBZSxtQkFDbEIsQUFBTTtBQUNGLEFBQU8sNkJBQUUsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFPLEFBQ2hDLEFBQ0gsQUFBQztBQUhTLG9CQUY4QixBQUFTO0FBT25ELEFBQWUsNEJBQUMsQUFBRyxNQUFHLEFBQWUsZ0JBQUMsQUFBRyxNQUFHLEFBQWUsZ0JBQUMsQUFBRyxJQUFDLEFBQVEsQUFBRSxhQUFHLEFBQUUsQUFBQztBQUVoRixBQUFNLG1CQUFDLEFBQWUsQUFBQyxBQUMzQjtBQUFDLEFBTU8sQUFBb0I7Ozs2Q0FBRSxBQUFpQztBQUMzRCxBQUFNLG1CQUFDLEFBQUksS0FBQyxBQUFrQixtQkFBQyxBQUFPLFFBQ2xDLEFBQWUsZ0JBQUMsQUFBSSxNQUNwQixBQUFlLGdCQUFDLEFBQUcsQUFDdEIsQUFBQyxBQUNOO0FBQUMsQUFDSjs7Ozs7QUF2RzJCLDZCQUFlO0FBQ25DLEFBQVEsY0FBRSxBQUFxQjtBQUMvQixBQUFpQix1QkFBRSxBQUFJLEFBQzFCLEFBQUM7QUFIbUU7QUFKNUQsQUFBNEIsb0ZBRHhDLFlBQVUsQUFBRSxjQStCSixtQkFBQSxZQUFNLE9BQUMscUJBQWtCLG1CQUFDLEFBQVcsQUFBQyxlQUN0QyxtQkFBQSxZQUFNLE9BQUMscUJBQWtCLG1CQUFDLEFBQW1CLEFBQUMsdUJBQzlDLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBUSxBQUFDLGdGQWhDL0IsQUFBNEIsQUEyR3hDO0FBM0dZLHVDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdGFibGUsIGluamVjdCB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBTZXJ2aWNlSWRlbnRpZmllcnMgfSBmcm9tICcuL2NvbnRhaW5lci9TZXJ2aWNlSWRlbnRpZmllcnMnO1xuXG5pbXBvcnQgKiBhcyBlc3ByaW1hIGZyb20gJ2VzcHJpbWEnO1xuaW1wb3J0ICogYXMgZXNjb2RlZ2VuIGZyb20gJ2VzY29kZWdlbi13YWxsYWJ5JztcbmltcG9ydCAqIGFzIGVzbWFuZ2xlIGZyb20gJ2VzbWFuZ2xlJztcbmltcG9ydCAqIGFzIEVTVHJlZSBmcm9tICdlc3RyZWUnO1xuXG5pbXBvcnQgeyBJR2VuZXJhdG9yT3V0cHV0IH0gZnJvbSAnLi9pbnRlcmZhY2VzL0lHZW5lcmF0b3JPdXRwdXQnO1xuaW1wb3J0IHsgSUphdmFTY3JpcHRPYmZ1c2NhdG9yIH0gZnJvbSAnLi9pbnRlcmZhY2VzL0lKYXZhU2NyaXB0T2Jmc3VjYXRvcic7XG5pbXBvcnQgeyBJT2JmdXNjYXRpb25SZXN1bHQgfSBmcm9tICcuL2ludGVyZmFjZXMvSU9iZnVzY2F0aW9uUmVzdWx0JztcbmltcG9ydCB7IElPYmZ1c2NhdG9yIH0gZnJvbSAnLi9pbnRlcmZhY2VzL0lPYmZ1c2NhdG9yJztcbmltcG9ydCB7IElPcHRpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2VzL29wdGlvbnMvSU9wdGlvbnMnO1xuaW1wb3J0IHsgSVNvdXJjZU1hcENvcnJlY3RvciB9IGZyb20gJy4vaW50ZXJmYWNlcy9JU291cmNlTWFwQ29ycmVjdG9yJztcblxuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEphdmFTY3JpcHRPYmZ1c2NhdG9ySW50ZXJuYWwgaW1wbGVtZW50cyBJSmF2YVNjcmlwdE9iZnVzY2F0b3Ige1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtHZW5lcmF0ZU9wdGlvbnN9XG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgZXNjb2RlZ2VuUGFyYW1zOiBlc2NvZGVnZW4uR2VuZXJhdGVPcHRpb25zID0ge1xuICAgICAgICB2ZXJiYXRpbTogJ3gtdmVyYmF0aW0tcHJvcGVydHknLFxuICAgICAgICBzb3VyY2VNYXBXaXRoQ29kZTogdHJ1ZVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SU9iZnVzY2F0b3J9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBvYmZ1c2NhdG9yOiBJT2JmdXNjYXRvcjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJT3B0aW9uc31cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IElPcHRpb25zO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge0lTb3VyY2VNYXBDb3JyZWN0b3J9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBzb3VyY2VNYXBDb3JyZWN0b3I6IElTb3VyY2VNYXBDb3JyZWN0b3I7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0lPYmZ1c2NhdG9yfSBvYmZ1c2NhdG9yXG4gICAgICogQHBhcmFtIHtJU291cmNlTWFwQ29ycmVjdG9yfSBzb3VyY2VNYXBDb3JyZWN0b3JcbiAgICAgKiBAcGFyYW0ge0lPcHRpb25zfSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JT2JmdXNjYXRvcikgb2JmdXNjYXRvcjogSU9iZnVzY2F0b3IsXG4gICAgICAgIEBpbmplY3QoU2VydmljZUlkZW50aWZpZXJzLklTb3VyY2VNYXBDb3JyZWN0b3IpIHNvdXJjZU1hcENvcnJlY3RvcjogSVNvdXJjZU1hcENvcnJlY3RvcixcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuSU9wdGlvbnMpIG9wdGlvbnM6IElPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIHRoaXMub2JmdXNjYXRvciA9IG9iZnVzY2F0b3I7XG4gICAgICAgIHRoaXMuc291cmNlTWFwQ29ycmVjdG9yID0gc291cmNlTWFwQ29ycmVjdG9yO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VDb2RlXG4gICAgICogQHJldHVybnMge0lPYmZ1c2NhdGlvblJlc3VsdH1cbiAgICAgKi9cbiAgICBwdWJsaWMgb2JmdXNjYXRlIChzb3VyY2VDb2RlOiBzdHJpbmcpOiBJT2JmdXNjYXRpb25SZXN1bHQge1xuICAgICAgICAvLyBwYXJzZSBBU1QgdHJlZVxuICAgICAgICBjb25zdCBhc3RUcmVlOiBFU1RyZWUuUHJvZ3JhbSA9IHRoaXMucGFyc2VDb2RlKHNvdXJjZUNvZGUpO1xuXG4gICAgICAgIC8vIG9iZnVzY2F0ZSBBU1QgdHJlZVxuICAgICAgICBjb25zdCBvYmZ1c2NhdGVkQXN0VHJlZTogRVNUcmVlLlByb2dyYW0gPSB0aGlzLm9iZnVzY2F0b3Iub2JmdXNjYXRlQXN0VHJlZShhc3RUcmVlKTtcblxuICAgICAgICAvLyBnZW5lcmF0ZSBjb2RlXG4gICAgICAgIGNvbnN0IGdlbmVyYXRvck91dHB1dDogSUdlbmVyYXRvck91dHB1dCA9IHRoaXMuZ2VuZXJhdGVDb2RlKHNvdXJjZUNvZGUsIG9iZnVzY2F0ZWRBc3RUcmVlKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmZ1c2NhdGlvblJlc3VsdChnZW5lcmF0b3JPdXRwdXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VDb2RlXG4gICAgICogQHJldHVybnMge1Byb2dyYW19XG4gICAgICovXG4gICAgcHJpdmF0ZSBwYXJzZUNvZGUgKHNvdXJjZUNvZGU6IHN0cmluZyk6IEVTVHJlZS5Qcm9ncmFtIHtcbiAgICAgICAgcmV0dXJuIGVzcHJpbWEucGFyc2Uoc291cmNlQ29kZSwge1xuICAgICAgICAgICAgbG9jOiB0aGlzLm9wdGlvbnMuc291cmNlTWFwXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VDb2RlXG4gICAgICogQHBhcmFtIHtQcm9ncmFtfSBhc3RUcmVlXG4gICAgICogQHJldHVybnMge0lHZW5lcmF0b3JPdXRwdXR9XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUNvZGUgKHNvdXJjZUNvZGU6IHN0cmluZywgYXN0VHJlZTogRVNUcmVlLlByb2dyYW0pOiBJR2VuZXJhdG9yT3V0cHV0IHtcbiAgICAgICAgY29uc3QgZXNjb2RlZ2VuUGFyYW1zOiBlc2NvZGVnZW4uR2VuZXJhdGVPcHRpb25zID0ge1xuICAgICAgICAgICAgLi4uSmF2YVNjcmlwdE9iZnVzY2F0b3JJbnRlcm5hbC5lc2NvZGVnZW5QYXJhbXNcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNvdXJjZU1hcCkge1xuICAgICAgICAgICAgZXNjb2RlZ2VuUGFyYW1zLnNvdXJjZU1hcCA9ICdzb3VyY2VNYXAnO1xuICAgICAgICAgICAgZXNjb2RlZ2VuUGFyYW1zLnNvdXJjZUNvbnRlbnQgPSBzb3VyY2VDb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYW5nbGUpIHtcbiAgICAgICAgICAgIGFzdFRyZWUgPSBlc21hbmdsZS5tYW5nbGUoYXN0VHJlZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBnZW5lcmF0b3JPdXRwdXQ6IElHZW5lcmF0b3JPdXRwdXQgPSBlc2NvZGVnZW4uZ2VuZXJhdGUoYXN0VHJlZSwge1xuICAgICAgICAgICAgLi4uZXNjb2RlZ2VuUGFyYW1zLFxuICAgICAgICAgICAgZm9ybWF0OiB7XG4gICAgICAgICAgICAgICAgY29tcGFjdDogdGhpcy5vcHRpb25zLmNvbXBhY3RcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZ2VuZXJhdG9yT3V0cHV0Lm1hcCA9IGdlbmVyYXRvck91dHB1dC5tYXAgPyBnZW5lcmF0b3JPdXRwdXQubWFwLnRvU3RyaW5nKCkgOiAnJztcblxuICAgICAgICByZXR1cm4gZ2VuZXJhdG9yT3V0cHV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SUdlbmVyYXRvck91dHB1dH0gZ2VuZXJhdG9yT3V0cHV0XG4gICAgICogQHJldHVybnMge0lPYmZ1c2NhdGlvblJlc3VsdH1cbiAgICAgKi9cbiAgICBwcml2YXRlIGdldE9iZnVzY2F0aW9uUmVzdWx0IChnZW5lcmF0b3JPdXRwdXQ6IElHZW5lcmF0b3JPdXRwdXQpOiBJT2JmdXNjYXRpb25SZXN1bHQge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VNYXBDb3JyZWN0b3IuY29ycmVjdChcbiAgICAgICAgICAgIGdlbmVyYXRvck91dHB1dC5jb2RlLFxuICAgICAgICAgICAgZ2VuZXJhdG9yT3V0cHV0Lm1hcFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==