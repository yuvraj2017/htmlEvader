"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var mkdirp = require("mkdirp");
var path = require("path");

var CLIUtils = function () {
    function CLIUtils() {
        _classCallCheck(this, CLIUtils);
    }

    _createClass(CLIUtils, null, [{
        key: "getOutputCodePath",
        value: function getOutputCodePath(outputPath, inputPath) {
            if (outputPath) {
                return outputPath;
            }
            return inputPath.split('.').map(function (value, index) {
                return index === 0 ? value + "-obfuscated" : value;
            }).join('.');
        }
    }, {
        key: "getOutputSourceMapPath",
        value: function getOutputSourceMapPath(outputCodePath) {
            var sourceMapFileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            if (sourceMapFileName) {
                outputCodePath = outputCodePath.substring(0, outputCodePath.lastIndexOf('/')) + "/" + sourceMapFileName;
            }
            if (!/\.js\.map$/.test(outputCodePath)) {
                outputCodePath = outputCodePath.split('.')[0] + ".js.map";
            } else if (/\.js$/.test(outputCodePath)) {
                outputCodePath += '.map';
            }
            return outputCodePath;
        }
    }, {
        key: "getPackageConfig",
        value: function getPackageConfig() {
            return JSON.parse(fs.readFileSync(path.join(path.dirname(fs.realpathSync(process.argv[1])), '../package.json'), CLIUtils.encoding));
        }
    }, {
        key: "isFilePath",
        value: function isFilePath(filePath) {
            try {
                return fs.statSync(filePath).isFile();
            } catch (e) {
                return false;
            }
        }
    }, {
        key: "readFile",
        value: function readFile(inputPath) {
            return fs.readFileSync(inputPath, CLIUtils.encoding);
        }
    }, {
        key: "validateInputPath",
        value: function validateInputPath(inputPath) {
            if (!CLIUtils.isFilePath(inputPath)) {
                throw new ReferenceError("Given input path must be a valid file path");
            }
            if (!(CLIUtils.availableInputExtensions.indexOf(path.extname(inputPath)) !== -1)) {
                throw new ReferenceError("Input file must have .js extension");
            }
        }
    }, {
        key: "writeFile",
        value: function writeFile(outputPath, data) {
            mkdirp.sync(path.dirname(outputPath));
            fs.writeFileSync(outputPath, data, {
                encoding: CLIUtils.encoding
            });
        }
    }]);

    return CLIUtils;
}();

CLIUtils.availableInputExtensions = ['.js'];
CLIUtils.encoding = 'utf8';
exports.CLIUtils = CLIUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ0xJVXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2xpL3V0aWxzL0NMSVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxpQkFBeUI7QUFDekIscUJBQWlDO0FBQ2pDLG1CQUE2QixBQUk3Qjs7SUFrQlcsQUFBTSxBQUFDLEFBQWlCOzs7Ozs7OzBDQUFFLEFBQWtCLFlBQUUsQUFBaUI7QUFDbEUsQUFBRSxBQUFDLGdCQUFDLEFBQVUsQUFBQyxZQUFDLEFBQUM7QUFDYixBQUFNLHVCQUFDLEFBQVUsQUFBQyxBQUN0QjtBQUFDO0FBRUQsQUFBTSw2QkFDRCxBQUFLLE1BQUMsQUFBRyxBQUFDLEtBQ1YsQUFBRyxJQUFTLFVBQUMsQUFBYSxPQUFFLEFBQWE7QUFDdEMsQUFBTSx1QkFBQyxBQUFLLFVBQUssQUFBQyxBQUFHLElBQUcsQUFBSyxBQUFhLHdCQUFHLEFBQUssQUFBQyxBQUN2RDtBQUFDLEFBQUMsYUFKQyxBQUFTLEVBS1gsQUFBSSxLQUFDLEFBQUcsQUFBQyxBQUFDLEFBQ25CO0FBQUMsQUFPTSxBQUFNLEFBQUMsQUFBc0I7OzsrQ0FBRSxBQUFzQjtnQkFBRSx3RkFBNEIsQUFBRTs7QUFDeEYsQUFBRSxBQUFDLGdCQUFDLEFBQWlCLEFBQUMsbUJBQUMsQUFBQztBQUNwQixBQUFjLEFBQUcsaUNBQUcsQUFBYyxlQUFDLEFBQVMsVUFDeEMsQUFBQyxHQUFFLEFBQWMsZUFBQyxBQUFXLFlBQUMsQUFBRyxBQUFDLEFBQ3JDLGNBQUksQUFBaUIsQUFBRSxBQUFDLEFBQzdCO0FBQUM7QUFFRCxBQUFFLEFBQUMsZ0JBQUMsQ0FBQyxBQUFZLGFBQUMsQUFBSSxLQUFDLEFBQWMsQUFBQyxBQUFDLGlCQUFDLEFBQUM7QUFDckMsQUFBYyxBQUFHLGlDQUFHLEFBQWMsZUFBQyxBQUFLLE1BQUMsQUFBRyxBQUFDLEtBQUMsQUFBQyxBQUFDLEFBQVMsQUFBQyxBQUM5RDtBQUFDLEFBQUMsQUFBSSxtQkFBQyxBQUFFLEFBQUMsSUFBQyxBQUFPLFFBQUMsQUFBSSxLQUFDLEFBQWMsQUFBQyxBQUFDLGlCQUFDLEFBQUM7QUFDdEMsQUFBYyxrQ0FBSSxBQUFNLEFBQUMsQUFDN0I7QUFBQztBQUVELEFBQU0sbUJBQUMsQUFBYyxBQUFDLEFBQzFCO0FBQUMsQUFLTSxBQUFNLEFBQUMsQUFBZ0I7Ozs7QUFDMUIsQUFBTSxtQkFBaUIsQUFBSSxLQUFDLEFBQUssTUFDN0IsQUFBRSxHQUFDLEFBQVksYUFDWCxBQUFJLEtBQUMsQUFBSSxLQUNMLEFBQUksS0FBQyxBQUFPLFFBQ1IsQUFBRSxHQUFDLEFBQVksYUFBQyxBQUFPLFFBQUMsQUFBSSxLQUFDLEFBQUMsQUFBQyxBQUFDLEFBQ25DLE1BQ0QsQUFBaUIsQUFDcEIsb0JBQ0QsQUFBUSxTQUFDLEFBQVEsQUFDcEIsQUFDSixBQUFDLEFBQ047QUFBQyxBQU1NLEFBQU0sQUFBQyxBQUFVOzs7bUNBQUUsQUFBZ0I7QUFDdEMsZ0JBQUksQUFBQztBQUNELEFBQU0sdUJBQUMsQUFBRSxHQUFDLEFBQVEsU0FBQyxBQUFRLEFBQUMsVUFBQyxBQUFNLEFBQUUsQUFBQyxBQUMxQztBQUFDLGNBQUMsQUFBSyxBQUFDLE9BQUMsQUFBQyxBQUFDLEdBQUMsQUFBQztBQUNULEFBQU0sdUJBQUMsQUFBSyxBQUFDLEFBQ2pCO0FBQUMsQUFDTDtBQUFDLEFBTU0sQUFBTSxBQUFDLEFBQVE7OztpQ0FBRSxBQUFpQjtBQUNyQyxBQUFNLG1CQUFDLEFBQUUsR0FBQyxBQUFZLGFBQUMsQUFBUyxXQUFFLEFBQVEsU0FBQyxBQUFRLEFBQUMsQUFBQyxBQUN6RDtBQUFDLEFBS00sQUFBTSxBQUFDLEFBQWlCOzs7MENBQUUsQUFBaUI7QUFDOUMsQUFBRSxBQUFDLGdCQUFDLENBQUMsQUFBUSxTQUFDLEFBQVUsV0FBQyxBQUFTLEFBQUMsQUFBQyxZQUFDLEFBQUM7QUFDbEMsc0JBQU0sSUFBSSxBQUFjLEFBQUMsQUFBNEMsQUFBQyxBQUFDLEFBQzNFO0FBQUM7QUFFRCxBQUFFLEFBQUMsZ0JBQUMsRUFBQyxBQUFRLFNBQUMsQUFBd0IseUJBQUMsQUFBUSxRQUFDLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBUyxBQUFDLEFBQUMsQUFBQyxxQkFBQyxBQUFDO0FBQ3ZFLHNCQUFNLElBQUksQUFBYyxBQUFDLEFBQW9DLEFBQUMsQUFBQyxBQUNuRTtBQUFDLEFBQ0w7QUFBQyxBQU1NLEFBQU0sQUFBQyxBQUFTOzs7a0NBQUUsQUFBa0IsWUFBRSxBQUFTO0FBQ2xELEFBQU0sbUJBQUMsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBVSxBQUFDLEFBQUMsQUFBQztBQUV0QyxBQUFFLGVBQUMsQUFBYSxjQUFDLEFBQVUsWUFBRSxBQUFJO0FBQzdCLEFBQVEsMEJBQUUsQUFBUSxTQUFDLEFBQVEsQUFDOUIsQUFBQyxBQUFDLEFBQ1A7QUFIdUM7QUFHdEM7Ozs7OztBQTVHdUIsU0FBd0IsMkJBQWEsQ0FDekQsQUFBSyxBQUNSLEFBQUM7QUFLc0IsU0FBUSxXQUFtQixBQUFNLEFBQUM7QUFYOUQsbUJBaUhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgbWtkaXJwIGZyb20gJ21rZGlycCc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBJUGFja2FnZUNvbmZpZyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvSVBhY2thZ2VDb25maWcnO1xuXG5leHBvcnQgY2xhc3MgQ0xJVXRpbHMge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtzdHJpbmdbXX1cbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBhdmFpbGFibGVJbnB1dEV4dGVuc2lvbnM6IHN0cmluZ1tdID0gW1xuICAgICAgICAnLmpzJ1xuICAgIF07XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QnVmZmVyRW5jb2Rpbmd9XG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgZW5jb2Rpbmc6IEJ1ZmZlckVuY29kaW5nID0gJ3V0ZjgnO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dFBhdGhcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRQYXRoXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdldE91dHB1dENvZGVQYXRoIChvdXRwdXRQYXRoOiBzdHJpbmcsIGlucHV0UGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKG91dHB1dFBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRQYXRoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlucHV0UGF0aFxuICAgICAgICAgICAgLnNwbGl0KCcuJylcbiAgICAgICAgICAgIC5tYXA8c3RyaW5nPigodmFsdWU6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/IGAke3ZhbHVlfS1vYmZ1c2NhdGVkYCA6IHZhbHVlO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKCcuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dENvZGVQYXRoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZU1hcEZpbGVOYW1lXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdldE91dHB1dFNvdXJjZU1hcFBhdGggKG91dHB1dENvZGVQYXRoOiBzdHJpbmcsIHNvdXJjZU1hcEZpbGVOYW1lOiBzdHJpbmcgPSAnJyk6IHN0cmluZyB7XG4gICAgICAgIGlmIChzb3VyY2VNYXBGaWxlTmFtZSkge1xuICAgICAgICAgICAgb3V0cHV0Q29kZVBhdGggPSBgJHtvdXRwdXRDb2RlUGF0aC5zdWJzdHJpbmcoXG4gICAgICAgICAgICAgICAgMCwgb3V0cHV0Q29kZVBhdGgubGFzdEluZGV4T2YoJy8nKVxuICAgICAgICAgICAgKX0vJHtzb3VyY2VNYXBGaWxlTmFtZX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEvXFwuanNcXC5tYXAkLy50ZXN0KG91dHB1dENvZGVQYXRoKSkge1xuICAgICAgICAgICAgb3V0cHV0Q29kZVBhdGggPSBgJHtvdXRwdXRDb2RlUGF0aC5zcGxpdCgnLicpWzBdfS5qcy5tYXBgO1xuICAgICAgICB9IGVsc2UgaWYgKC9cXC5qcyQvLnRlc3Qob3V0cHV0Q29kZVBhdGgpKSB7XG4gICAgICAgICAgICBvdXRwdXRDb2RlUGF0aCArPSAnLm1hcCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0cHV0Q29kZVBhdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0lQYWNrYWdlQ29uZmlnfVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0UGFja2FnZUNvbmZpZyAoKTogSVBhY2thZ2VDb25maWcge1xuICAgICAgICByZXR1cm4gPElQYWNrYWdlQ29uZmlnPkpTT04ucGFyc2UoXG4gICAgICAgICAgICBmcy5yZWFkRmlsZVN5bmMoXG4gICAgICAgICAgICAgICAgcGF0aC5qb2luKFxuICAgICAgICAgICAgICAgICAgICBwYXRoLmRpcm5hbWUoXG4gICAgICAgICAgICAgICAgICAgICAgICBmcy5yZWFscGF0aFN5bmMocHJvY2Vzcy5hcmd2WzFdKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAnLi4vcGFja2FnZS5qc29uJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgQ0xJVXRpbHMuZW5jb2RpbmdcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZVBhdGhcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGlzRmlsZVBhdGggKGZpbGVQYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmcy5zdGF0U3luYyhmaWxlUGF0aCkuaXNGaWxlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFBhdGhcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZEZpbGUgKGlucHV0UGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhpbnB1dFBhdGgsIENMSVV0aWxzLmVuY29kaW5nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRQYXRoXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyB2YWxpZGF0ZUlucHV0UGF0aCAoaW5wdXRQYXRoOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFDTElVdGlscy5pc0ZpbGVQYXRoKGlucHV0UGF0aCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihgR2l2ZW4gaW5wdXQgcGF0aCBtdXN0IGJlIGEgdmFsaWQgZmlsZSBwYXRoYCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIUNMSVV0aWxzLmF2YWlsYWJsZUlucHV0RXh0ZW5zaW9ucy5pbmNsdWRlcyhwYXRoLmV4dG5hbWUoaW5wdXRQYXRoKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihgSW5wdXQgZmlsZSBtdXN0IGhhdmUgLmpzIGV4dGVuc2lvbmApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dFBhdGhcbiAgICAgKiBAcGFyYW0ge2FueX0gZGF0YVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgd3JpdGVGaWxlIChvdXRwdXRQYXRoOiBzdHJpbmcsIGRhdGE6IGFueSk6IHZvaWQge1xuICAgICAgICBta2RpcnAuc3luYyhwYXRoLmRpcm5hbWUob3V0cHV0UGF0aCkpO1xuXG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMob3V0cHV0UGF0aCwgZGF0YSwge1xuICAgICAgICAgICAgZW5jb2Rpbmc6IENMSVV0aWxzLmVuY29kaW5nXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==