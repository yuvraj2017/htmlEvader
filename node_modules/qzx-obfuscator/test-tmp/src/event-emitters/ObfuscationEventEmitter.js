"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var events_1 = require("events");
inversify_1.decorate(inversify_1.injectable(), events_1.EventEmitter);
var ObfuscationEventEmitter = function (_events_1$EventEmitte) {
    _inherits(ObfuscationEventEmitter, _events_1$EventEmitte);

    function ObfuscationEventEmitter() {
        _classCallCheck(this, ObfuscationEventEmitter);

        return _possibleConstructorReturn(this, (ObfuscationEventEmitter.__proto__ || Object.getPrototypeOf(ObfuscationEventEmitter)).apply(this, arguments));
    }

    return ObfuscationEventEmitter;
}(events_1.EventEmitter);
ObfuscationEventEmitter = tslib_1.__decorate([inversify_1.injectable()], ObfuscationEventEmitter);
exports.ObfuscationEventEmitter = ObfuscationEventEmitter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JmdXNjYXRpb25FdmVudEVtaXR0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZXZlbnQtZW1pdHRlcnMvT2JmdXNjYXRpb25FdmVudEVtaXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLDBCQUFpRDtBQUlqRCx1QkFBc0M7QUFFdEMsWUFBUSxTQUFDLFlBQVUsQUFBRSxjQUFFLFNBQVksQUFBQyxBQUFDO0FBR3JDO0FBQWEsQUFBdUIsQUFBcEMsQUFBcUM7Ozs7Ozs7OztFQUFRLFNBQVksQUFBdUM7QUFBbkYsQUFBdUIsOENBRG5DLFlBQVUsQUFBRSxlQUNBLEFBQXVCLEFBQTREO0FBQW5GLGtDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlY29yYXRlLCBpbmplY3RhYmxlIH0gZnJvbSAnaW52ZXJzaWZ5JztcblxuaW1wb3J0IHsgSU9iZnVzY2F0aW9uRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9ldmVudC1lbWl0dGVycy9JT2JmdXNjYXRpb25FdmVudEVtaXR0ZXInO1xuXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuXG5kZWNvcmF0ZShpbmplY3RhYmxlKCksIEV2ZW50RW1pdHRlcik7XG5cbkBpbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPYmZ1c2NhdGlvbkV2ZW50RW1pdHRlciBleHRlbmRzIEV2ZW50RW1pdHRlciBpbXBsZW1lbnRzIElPYmZ1c2NhdGlvbkV2ZW50RW1pdHRlciB7fVxuIl19