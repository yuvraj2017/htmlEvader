"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
var ServiceIdentifiers_1 = require("./container/ServiceIdentifiers");
var InversifyContainerFacade_1 = require("./container/InversifyContainerFacade");
var JavaScriptObfuscatorCLI_1 = require("./cli/JavaScriptObfuscatorCLI");

var JavaScriptObfuscator = function () {
    function JavaScriptObfuscator() {
        _classCallCheck(this, JavaScriptObfuscator);
    }

    _createClass(JavaScriptObfuscator, null, [{
        key: "obfuscate",
        value: function obfuscate(sourceCode) {
            var inputOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var inversifyContainerFacade = new InversifyContainerFacade_1.InversifyContainerFacade();
            inversifyContainerFacade.load(sourceCode, inputOptions);
            var javaScriptObfuscator = inversifyContainerFacade.get(ServiceIdentifiers_1.ServiceIdentifiers.IJavaScriptObfuscator);
            var obfuscationResult = javaScriptObfuscator.obfuscate(sourceCode);
            inversifyContainerFacade.unload();
            return obfuscationResult;
        }
    }, {
        key: "runCLI",
        value: function runCLI(argv) {
            new JavaScriptObfuscatorCLI_1.JavaScriptObfuscatorCLI(argv).run();
        }
    }]);

    return JavaScriptObfuscator;
}();

exports.JavaScriptObfuscator = JavaScriptObfuscator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSmF2YVNjcmlwdE9iZnVzY2F0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvSmF2YVNjcmlwdE9iZnVzY2F0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLFFBQTBCO0FBRTFCLG1DQUFvRTtBQVFwRSx5Q0FBZ0Y7QUFDaEYsd0NBQXdFLEFBRXhFOztJQU1XLEFBQU0sQUFBQyxBQUFTOzs7Ozs7O2tDQUFFLEFBQWtCO2dCQUFFLG1GQUE4QixBQUFFOztBQUN6RSxnQkFBTSxBQUF3QiwyQkFBOEIsSUFBSSwyQkFBd0IsQUFBRSxBQUFDO0FBRTNGLEFBQXdCLHFDQUFDLEFBQUksS0FBQyxBQUFVLFlBQUUsQUFBWSxBQUFDLEFBQUM7QUFFeEQsZ0JBQU0sQUFBb0IsdUJBQTBCLEFBQXdCLHlCQUN2RSxBQUFHLElBQXdCLHFCQUFrQixtQkFBQyxBQUFxQixBQUFDLEFBQUM7QUFDMUUsZ0JBQU0sQUFBaUIsb0JBQXVCLEFBQW9CLHFCQUFDLEFBQVMsVUFBQyxBQUFVLEFBQUMsQUFBQztBQUV6RixBQUF3QixxQ0FBQyxBQUFNLEFBQUUsQUFBQztBQUVsQyxBQUFNLG1CQUFDLEFBQWlCLEFBQUMsQUFDN0I7QUFBQyxBQUtNLEFBQU0sQUFBQyxBQUFNOzs7K0JBQUUsQUFBYztBQUNoQyxnQkFBSSwwQkFBdUIsd0JBQUMsQUFBSSxBQUFDLE1BQUMsQUFBRyxBQUFFLEFBQUMsQUFDNUM7QUFBQyxBQUNKOzs7Ozs7QUExQkQsK0JBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhJztcblxuaW1wb3J0IHsgU2VydmljZUlkZW50aWZpZXJzIH0gZnJvbSAnLi9jb250YWluZXIvU2VydmljZUlkZW50aWZpZXJzJztcblxuaW1wb3J0IHsgVElucHV0T3B0aW9ucyB9IGZyb20gJy4vdHlwZXMvb3B0aW9ucy9USW5wdXRPcHRpb25zJztcblxuaW1wb3J0IHsgSUludmVyc2lmeUNvbnRhaW5lckZhY2FkZSB9IGZyb20gJy4vaW50ZXJmYWNlcy9jb250YWluZXIvSUludmVyc2lmeUNvbnRhaW5lckZhY2FkZSc7XG5pbXBvcnQgeyBJSmF2YVNjcmlwdE9iZnVzY2F0b3IgfSBmcm9tICcuL2ludGVyZmFjZXMvSUphdmFTY3JpcHRPYmZzdWNhdG9yJztcbmltcG9ydCB7IElPYmZ1c2NhdGlvblJlc3VsdCB9IGZyb20gJy4vaW50ZXJmYWNlcy9JT2JmdXNjYXRpb25SZXN1bHQnO1xuXG5pbXBvcnQgeyBJbnZlcnNpZnlDb250YWluZXJGYWNhZGUgfSBmcm9tICcuL2NvbnRhaW5lci9JbnZlcnNpZnlDb250YWluZXJGYWNhZGUnO1xuaW1wb3J0IHsgSmF2YVNjcmlwdE9iZnVzY2F0b3JDTEkgfSBmcm9tICcuL2NsaS9KYXZhU2NyaXB0T2JmdXNjYXRvckNMSSc7XG5cbmV4cG9ydCBjbGFzcyBKYXZhU2NyaXB0T2JmdXNjYXRvciB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZUNvZGVcbiAgICAgKiBAcGFyYW0ge1RJbnB1dE9wdGlvbnN9IGlucHV0T3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtJT2JmdXNjYXRpb25SZXN1bHR9XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBvYmZ1c2NhdGUgKHNvdXJjZUNvZGU6IHN0cmluZywgaW5wdXRPcHRpb25zOiBUSW5wdXRPcHRpb25zID0ge30pOiBJT2JmdXNjYXRpb25SZXN1bHQge1xuICAgICAgICBjb25zdCBpbnZlcnNpZnlDb250YWluZXJGYWNhZGU6IElJbnZlcnNpZnlDb250YWluZXJGYWNhZGUgPSBuZXcgSW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlKCk7XG5cbiAgICAgICAgaW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlLmxvYWQoc291cmNlQ29kZSwgaW5wdXRPcHRpb25zKTtcblxuICAgICAgICBjb25zdCBqYXZhU2NyaXB0T2JmdXNjYXRvcjogSUphdmFTY3JpcHRPYmZ1c2NhdG9yID0gaW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlXG4gICAgICAgICAgICAuZ2V0PElKYXZhU2NyaXB0T2JmdXNjYXRvcj4oU2VydmljZUlkZW50aWZpZXJzLklKYXZhU2NyaXB0T2JmdXNjYXRvcik7XG4gICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBqYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoc291cmNlQ29kZSk7XG5cbiAgICAgICAgaW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlLnVubG9hZCgpO1xuXG4gICAgICAgIHJldHVybiBvYmZ1c2NhdGlvblJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBhcmd2XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBydW5DTEkgKGFyZ3Y6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgICAgIG5ldyBKYXZhU2NyaXB0T2JmdXNjYXRvckNMSShhcmd2KS5ydW4oKTtcbiAgICB9XG59XG4iXX0=