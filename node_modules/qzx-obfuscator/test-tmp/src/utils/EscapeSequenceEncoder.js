"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var EscapeSequenceEncoder = function () {
    function EscapeSequenceEncoder() {
        _classCallCheck(this, EscapeSequenceEncoder);

        this.stringsCache = new Map();
    }

    _createClass(EscapeSequenceEncoder, [{
        key: "encode",
        value: function encode(string, encodeAllSymbols) {
            var cacheKey = string + "-" + String(encodeAllSymbols);
            if (this.stringsCache.has(cacheKey)) {
                return this.stringsCache.get(cacheKey);
            }
            var radix = 16;
            var replaceRegExp = new RegExp('[\\s\\S]', 'g');
            var escapeSequenceRegExp = new RegExp('[\'\"\\\\\\s]');
            var regExp = new RegExp('[\\x00-\\x7F]');
            var prefix = void 0,
                template = void 0;
            var result = string.replace(replaceRegExp, function (character) {
                if (!encodeAllSymbols && !escapeSequenceRegExp.exec(character)) {
                    return character;
                }
                if (regExp.exec(character)) {
                    prefix = '\\x';
                    template = '00';
                } else {
                    prefix = "\\u";
                    template = '0000';
                }
                return "" + prefix + (template + character.charCodeAt(0).toString(radix)).slice(-template.length);
            });
            this.stringsCache.set(cacheKey, result);
            return result;
        }
    }]);

    return EscapeSequenceEncoder;
}();
EscapeSequenceEncoder = tslib_1.__decorate([inversify_1.injectable()], EscapeSequenceEncoder);
exports.EscapeSequenceEncoder = EscapeSequenceEncoder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXNjYXBlU2VxdWVuY2VFbmNvZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL0VzY2FwZVNlcXVlbmNlRW5jb2Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLDBCQUF1QztBQUt2QztBQURBOzs7QUFLcUIsYUFBWSxlQUF5QixJQUFJLEFBQUcsQUFBRSxBQUFDLEFBMENwRTtBQW5DVyxBQUFNLEFBbUNoQjs7QUE5Q0QsQUFBYSxBQUFxQjs7K0JBV2YsQUFBYyxRQUFFLEFBQXlCO0FBQ3BELGdCQUFNLEFBQVEsQUFBVyxXQUFHLEFBQU0sZUFBSSxBQUFNLE9BQUMsQUFBZ0IsQUFBQyxBQUFFLEFBQUM7QUFFakUsQUFBRSxBQUFDLGdCQUFDLEFBQUksS0FBQyxBQUFZLGFBQUMsQUFBRyxJQUFDLEFBQVEsQUFBQyxBQUFDLFdBQUMsQUFBQztBQUNsQyxBQUFNLHVCQUFTLEFBQUksS0FBQyxBQUFZLGFBQUMsQUFBRyxJQUFDLEFBQVEsQUFBQyxBQUFDLEFBQ25EO0FBQUM7QUFFRCxnQkFBTSxBQUFLLFFBQVcsQUFBRSxBQUFDO0FBQ3pCLGdCQUFNLEFBQWEsZ0JBQVcsSUFBSSxBQUFNLE9BQUMsQUFBVSxZQUFFLEFBQUcsQUFBQyxBQUFDO0FBQzFELGdCQUFNLEFBQW9CLHVCQUFXLElBQUksQUFBTSxPQUFDLEFBQWUsQUFBQyxBQUFDO0FBQ2pFLGdCQUFNLEFBQU0sU0FBVyxJQUFJLEFBQU0sT0FBQyxBQUFlLEFBQUMsQUFBQztBQUVuRCxnQkFBSSxBQUFjO2dCQUNkLEFBQWdCLEFBQUM7QUFFckIsZ0JBQU0sQUFBTSxnQkFBa0IsQUFBTyxRQUFDLEFBQWEsZUFBRSxVQUFDLEFBQWlCO0FBQ25FLEFBQUUsQUFBQyxvQkFBQyxDQUFDLEFBQWdCLG9CQUFJLENBQUMsQUFBb0IscUJBQUMsQUFBSSxLQUFDLEFBQVMsQUFBQyxBQUFDLFlBQUMsQUFBQztBQUM3RCxBQUFNLDJCQUFDLEFBQVMsQUFBQyxBQUNyQjtBQUFDO0FBRUQsQUFBRSxBQUFDLG9CQUFDLEFBQU0sT0FBQyxBQUFJLEtBQUMsQUFBUyxBQUFDLEFBQUMsWUFBQyxBQUFDO0FBQ3pCLEFBQU0sNkJBQUcsQUFBSyxBQUFDO0FBQ2YsQUFBUSwrQkFBRyxBQUFJLEFBQUMsQUFDcEI7QUFBQyxBQUFDLEFBQUksdUJBQUMsQUFBQztBQUNKLEFBQU0sNkJBQUcsQUFBSyxBQUFDO0FBQ2YsQUFBUSwrQkFBRyxBQUFNLEFBQUMsQUFDdEI7QUFBQztBQUVELEFBQU0sQUFBQyw0QkFBRyxBQUFNLFNBQUcsQ0FBQyxBQUFRLFdBQUcsQUFBUyxVQUFDLEFBQVUsV0FBQyxBQUFDLEFBQUMsR0FBQyxBQUFRLFNBQUMsQUFBSyxBQUFDLEFBQUMsUUFBQyxBQUFLLE1BQUMsQ0FBQyxBQUFRLFNBQUMsQUFBTSxBQUFDLEFBQUUsQUFBQyxBQUN0RztBQUFDLEFBQUMsQUFBQyxhQWRvQixBQUFNO0FBZ0I3QixBQUFJLGlCQUFDLEFBQVksYUFBQyxBQUFHLElBQUMsQUFBUSxVQUFFLEFBQU0sQUFBQyxBQUFDO0FBRXhDLEFBQU0sbUJBQUMsQUFBTSxBQUFDLEFBQ2xCO0FBQUMsQUFDSjs7Ozs7QUE5Q1ksQUFBcUIsNENBRGpDLFlBQVUsQUFBRSxlQUNBLEFBQXFCLEFBOENqQztBQTlDWSxnQ0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3RhYmxlIH0gZnJvbSAnaW52ZXJzaWZ5JztcblxuaW1wb3J0IHsgSUVzY2FwZVNlcXVlbmNlRW5jb2RlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvdXRpbHMvSUVzY2FwZVNlcXVlbmNlRW5jb2Rlcic7XG5cbkBpbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBFc2NhcGVTZXF1ZW5jZUVuY29kZXIgaW1wbGVtZW50cyBJRXNjYXBlU2VxdWVuY2VFbmNvZGVyIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPHN0cmluZywgc3RyaW5nPn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0cmluZ3NDYWNoZTogTWFwIDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gICAgICogQHBhcmFtIHtib29sZWFufSBlbmNvZGVBbGxTeW1ib2xzXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBwdWJsaWMgZW5jb2RlIChzdHJpbmc6IHN0cmluZywgZW5jb2RlQWxsU3ltYm9sczogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5OiBzdHJpbmcgPSBgJHtzdHJpbmd9LSR7U3RyaW5nKGVuY29kZUFsbFN5bWJvbHMpfWA7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RyaW5nc0NhY2hlLmhhcyhjYWNoZUtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiA8c3RyaW5nPnRoaXMuc3RyaW5nc0NhY2hlLmdldChjYWNoZUtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByYWRpeDogbnVtYmVyID0gMTY7XG4gICAgICAgIGNvbnN0IHJlcGxhY2VSZWdFeHA6IFJlZ0V4cCA9IG5ldyBSZWdFeHAoJ1tcXFxcc1xcXFxTXScsICdnJyk7XG4gICAgICAgIGNvbnN0IGVzY2FwZVNlcXVlbmNlUmVnRXhwOiBSZWdFeHAgPSBuZXcgUmVnRXhwKCdbXFwnXFxcIlxcXFxcXFxcXFxcXHNdJyk7XG4gICAgICAgIGNvbnN0IHJlZ0V4cDogUmVnRXhwID0gbmV3IFJlZ0V4cCgnW1xcXFx4MDAtXFxcXHg3Rl0nKTtcblxuICAgICAgICBsZXQgcHJlZml4OiBzdHJpbmcsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogc3RyaW5nO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdDogc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVwbGFjZVJlZ0V4cCwgKGNoYXJhY3Rlcjogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICAgICAgICAgIGlmICghZW5jb2RlQWxsU3ltYm9scyAmJiAhZXNjYXBlU2VxdWVuY2VSZWdFeHAuZXhlYyhjaGFyYWN0ZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJhY3RlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlZ0V4cC5leGVjKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICAgICAgICBwcmVmaXggPSAnXFxcXHgnO1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJzAwJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJlZml4ID0gJ1xcXFx1JztcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICcwMDAwJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0keyh0ZW1wbGF0ZSArIGNoYXJhY3Rlci5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKHJhZGl4KSkuc2xpY2UoLXRlbXBsYXRlLmxlbmd0aCl9YDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zdHJpbmdzQ2FjaGUuc2V0KGNhY2hlS2V5LCByZXN1bHQpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuIl19