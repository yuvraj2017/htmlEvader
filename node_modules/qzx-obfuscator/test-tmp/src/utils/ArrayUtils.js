"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../container/ServiceIdentifiers");
var ArrayUtils = function () {
    function ArrayUtils(randomGenerator) {
        _classCallCheck(this, ArrayUtils);

        this.randomGenerator = randomGenerator;
    }

    _createClass(ArrayUtils, [{
        key: "arrayRange",
        value: function arrayRange(length) {
            var range = [];
            for (var i = 0; i < length; i++) {
                range.push(i);
            }
            return range;
        }
    }, {
        key: "arrayRotate",
        value: function arrayRotate(array, times) {
            if (!array.length) {
                throw new ReferenceError("Cannot rotate empty array.");
            }
            if (times <= 0) {
                return array;
            }
            var newArray = array;
            var temp = void 0;
            while (times--) {
                temp = newArray.pop();
                newArray.unshift(temp);
            }
            return newArray;
        }
    }, {
        key: "arrayShuffle",
        value: function arrayShuffle(array) {
            var shuffledArray = [].concat(_toConsumableArray(array));
            for (var i = shuffledArray.length; i; i--) {
                var j = Math.floor(this.randomGenerator.getMathRandom() * i);
                var _ref = [shuffledArray[j], shuffledArray[i - 1]];
                shuffledArray[i - 1] = _ref[0];
                shuffledArray[j] = _ref[1];
            }
            return shuffledArray;
        }
    }]);

    return ArrayUtils;
}();
ArrayUtils = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__metadata("design:paramtypes", [Object])], ArrayUtils);
exports.ArrayUtils = ArrayUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJyYXlVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9BcnJheVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSwwQkFBK0M7QUFDL0MsbUNBQXFFO0FBTXJFO0FBU0ksd0JBQ2lELEFBQWlDOzs7QUFFOUUsQUFBSSxhQUFDLEFBQWUsa0JBQUcsQUFBZSxBQUFDLEFBQzNDO0FBQUMsQUFNTSxBQUFVOztBQW5CckIsQUFBYSxBQUFVOzttQ0FtQkEsQUFBYztBQUM3QixnQkFBTSxBQUFLLFFBQWEsQUFBRSxBQUFDO0FBRTNCLEFBQUcsQUFBQyxpQkFBQyxJQUFJLEFBQUMsSUFBVyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQU0sUUFBRSxBQUFDLEFBQUUsS0FBRSxBQUFDO0FBQ3RDLEFBQUssc0JBQUMsQUFBSSxLQUFDLEFBQUMsQUFBQyxBQUFDLEFBQ2xCO0FBQUM7QUFFRCxBQUFNLG1CQUFDLEFBQUssQUFBQyxBQUNqQjtBQUFDLEFBT00sQUFBVzs7O29DQUFNLEFBQVUsT0FBRSxBQUFhO0FBQzdDLEFBQUUsQUFBQyxnQkFBQyxDQUFDLEFBQUssTUFBQyxBQUFNLEFBQUMsUUFBQyxBQUFDO0FBQ2hCLHNCQUFNLElBQUksQUFBYyxBQUFDLEFBQTRCLEFBQUMsQUFBQyxBQUMzRDtBQUFDO0FBRUQsQUFBRSxBQUFDLGdCQUFDLEFBQUssU0FBSSxBQUFDLEFBQUMsR0FBQyxBQUFDO0FBQ2IsQUFBTSx1QkFBQyxBQUFLLEFBQUMsQUFDakI7QUFBQztBQUVELGdCQUFNLEFBQVEsV0FBUSxBQUFLLEFBQUM7QUFFNUIsZ0JBQUksQUFBbUIsQUFBQztBQUV4QixtQkFBTyxBQUFLLEFBQUUsU0FBRSxBQUFDO0FBQ2IsQUFBSSx1QkFBRyxBQUFRLFNBQUMsQUFBRyxBQUFHLEFBQUM7QUFDdkIsQUFBUSx5QkFBQyxBQUFPLFFBQUMsQUFBSSxBQUFDLEFBQUMsQUFDM0I7QUFBQztBQUVELEFBQU0sbUJBQUMsQUFBUSxBQUFDLEFBQ3BCO0FBQUMsQUFNTSxBQUFZOzs7cUNBQU0sQUFBVTtBQUMvQixnQkFBTSxBQUFhLEFBQVEsQUFBQyw2Q0FBRyxBQUFLLEFBQUMsQUFBQztBQUV0QyxBQUFHLEFBQUMsaUJBQUMsSUFBSSxBQUFDLElBQVcsQUFBYSxjQUFDLEFBQU0sUUFBRSxBQUFDLEdBQUUsQUFBQyxBQUFFO0FBQzdDLG9CQUFNLEFBQUMsSUFBVyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQUksS0FBQyxBQUFlLGdCQUFDLEFBQWEsQUFBRSxrQkFBRyxBQUFDLEFBQUMsQUFBQyxBQUV2RTtBQUgrQyxBQUFDLDJCQUdMLENBQUMsQUFBYSxjQUFDLEFBQUMsQUFBQyxJQUFFLEFBQWEsY0FBQyxBQUFDLElBQUcsQUFBQyxBQUFDLEFBQUMsQUFBQyxBQUN4RjtBQURLLEFBQWEsOEJBQUMsQUFBQyxJQUFHLEFBQUMsQUFBQztBQUFFLEFBQWEsOEJBQUMsQUFBQyxBQUFDLEFBQUM7QUFDM0M7QUFFRCxBQUFNLG1CQUFDLEFBQWEsQUFBQyxBQUN6QjtBQUFDLEFBQ0o7Ozs7O0FBdEVZLEFBQVUsaUNBRHRCLFlBQVUsQUFBRSxjQVdKLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBZ0IsQUFBQyx3RUFWdkMsQUFBVSxBQXNFdEI7QUF0RVkscUJBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3RhYmxlLCBpbmplY3QgfSBmcm9tICdpbnZlcnNpZnknO1xuaW1wb3J0IHsgU2VydmljZUlkZW50aWZpZXJzIH0gZnJvbSAnLi4vY29udGFpbmVyL1NlcnZpY2VJZGVudGlmaWVycyc7XG5cbmltcG9ydCB7IElBcnJheVV0aWxzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy91dGlscy9JQXJyYXlVdGlscyc7XG5pbXBvcnQgeyBJUmFuZG9tR2VuZXJhdG9yIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy91dGlscy9JUmFuZG9tR2VuZXJhdG9yJztcblxuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFycmF5VXRpbHMgaW1wbGVtZW50cyBJQXJyYXlVdGlscyB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0lSYW5kb21HZW5lcmF0b3J9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSByYW5kb21HZW5lcmF0b3I6IElSYW5kb21HZW5lcmF0b3I7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0lSYW5kb21HZW5lcmF0b3J9IHJhbmRvbUdlbmVyYXRvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuSVJhbmRvbUdlbmVyYXRvcikgcmFuZG9tR2VuZXJhdG9yOiBJUmFuZG9tR2VuZXJhdG9yXG4gICAgKSB7XG4gICAgICAgIHRoaXMucmFuZG9tR2VuZXJhdG9yID0gcmFuZG9tR2VuZXJhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyW119XG4gICAgICovXG4gICAgcHVibGljIGFycmF5UmFuZ2UgKGxlbmd0aDogbnVtYmVyKTogbnVtYmVyW10ge1xuICAgICAgICBjb25zdCByYW5nZTogbnVtYmVyW10gPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJhbmdlLnB1c2goaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUW119IGFycmF5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzXG4gICAgICogQHJldHVybnMge1RbXX1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXJyYXlSb3RhdGUgPFQ+IChhcnJheTogVFtdLCB0aW1lczogbnVtYmVyKTogVFtdIHtcbiAgICAgICAgaWYgKCFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihgQ2Fubm90IHJvdGF0ZSBlbXB0eSBhcnJheS5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aW1lcyA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdBcnJheTogVFtdID0gYXJyYXk7XG5cbiAgICAgICAgbGV0IHRlbXA6IFQgfCB1bmRlZmluZWQ7XG5cbiAgICAgICAgd2hpbGUgKHRpbWVzLS0pIHtcbiAgICAgICAgICAgIHRlbXAgPSBuZXdBcnJheS5wb3AoKSE7XG4gICAgICAgICAgICBuZXdBcnJheS51bnNoaWZ0KHRlbXApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld0FycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VFtdfSBhcnJheVxuICAgICAqIEByZXR1cm5zIHtUW119XG4gICAgICovXG4gICAgcHVibGljIGFycmF5U2h1ZmZsZSA8VD4gKGFycmF5OiBUW10pOiBUW10ge1xuICAgICAgICBjb25zdCBzaHVmZmxlZEFycmF5OiBUW10gPSBbLi4uYXJyYXldO1xuXG4gICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IHNodWZmbGVkQXJyYXkubGVuZ3RoOyBpOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IGo6IG51bWJlciA9IE1hdGguZmxvb3IodGhpcy5yYW5kb21HZW5lcmF0b3IuZ2V0TWF0aFJhbmRvbSgpICogaSk7XG5cbiAgICAgICAgICAgIFtzaHVmZmxlZEFycmF5W2kgLSAxXSwgc2h1ZmZsZWRBcnJheVtqXV0gPSBbc2h1ZmZsZWRBcnJheVtqXSwgc2h1ZmZsZWRBcnJheVtpIC0gMV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNodWZmbGVkQXJyYXk7XG4gICAgfVxufVxuIl19