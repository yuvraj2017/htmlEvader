"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var JSFuck_1 = require("../enums/JSFuck");

var Utils = function () {
    function Utils() {
        _classCallCheck(this, Utils);
    }

    _createClass(Utils, null, [{
        key: "decToHex",
        value: function decToHex(dec) {
            var radix = 16;
            return dec.toString(radix);
        }
    }, {
        key: "extractDomainFromUrl",
        value: function extractDomainFromUrl(url) {
            var domain = void 0;
            if (url.indexOf('://') > -1 || url.indexOf('//') === 0) {
                domain = url.split('/')[2];
            } else {
                domain = url.split('/')[0];
            }
            domain = domain.split(':')[0];
            return domain;
        }
    }, {
        key: "isCeilNumber",
        value: function isCeilNumber(number) {
            return number % 1 === 0;
        }
    }, {
        key: "stringRotate",
        value: function stringRotate(string, times) {
            if (!string) {
                throw new ReferenceError("Cannot rotate empty string.");
            }
            for (var i = 0; i < times; i++) {
                string = string[string.length - 1] + string.substring(0, string.length - 1);
            }
            return string;
        }
    }, {
        key: "stringToJSFuck",
        value: function stringToJSFuck(string) {
            return Array.from(string).map(function (character) {
                return JSFuck_1.JSFuck[character] || character;
            }).join(' + ');
        }
    }]);

    return Utils;
}();

Utils.hexadecimalPrefix = '0x';
exports.Utils = Utils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHVCQUF5QyxBQUV6Qzs7SUFVVyxBQUFNLEFBQUMsQUFBUTs7Ozs7OztpQ0FBRSxBQUFXO0FBQy9CLGdCQUFNLEFBQUssUUFBVyxBQUFFLEFBQUM7QUFFekIsQUFBTSxtQkFBQyxBQUFHLElBQUMsQUFBUSxTQUFDLEFBQUssQUFBQyxBQUFDLEFBQy9CO0FBQUMsQUFNTSxBQUFNLEFBQUMsQUFBb0I7Ozs2Q0FBRSxBQUFXO0FBQzNDLGdCQUFJLEFBQWMsQUFBQztBQUVuQixBQUFFLEFBQUMsZ0JBQUMsQUFBRyxJQUFDLEFBQU8sUUFBQyxBQUFLLEFBQUMsU0FBRyxDQUFDLEFBQUMsS0FBSSxBQUFHLElBQUMsQUFBTyxRQUFDLEFBQUksQUFBQyxVQUFLLEFBQUMsQUFBQyxHQUFDLEFBQUM7QUFDckQsQUFBTSx5QkFBRyxBQUFHLElBQUMsQUFBSyxNQUFDLEFBQUcsQUFBQyxLQUFDLEFBQUMsQUFBQyxBQUFDLEFBQy9CO0FBQUMsQUFBQyxBQUFJLG1CQUFDLEFBQUM7QUFDSixBQUFNLHlCQUFHLEFBQUcsSUFBQyxBQUFLLE1BQUMsQUFBRyxBQUFDLEtBQUMsQUFBQyxBQUFDLEFBQUMsQUFDL0I7QUFBQztBQUVELEFBQU0scUJBQUcsQUFBTSxPQUFDLEFBQUssTUFBQyxBQUFHLEFBQUMsS0FBQyxBQUFDLEFBQUMsQUFBQztBQUU5QixBQUFNLG1CQUFDLEFBQU0sQUFBQyxBQUNsQjtBQUFDLEFBTU0sQUFBTSxBQUFDLEFBQVk7OztxQ0FBRSxBQUFjO0FBQ3RDLEFBQU0sbUJBQUMsQUFBTSxTQUFHLEFBQUMsTUFBSyxBQUFDLEFBQUMsQUFDNUI7QUFBQyxBQU9NLEFBQU0sQUFBQyxBQUFZOzs7cUNBQUUsQUFBYyxRQUFFLEFBQWE7QUFDckQsQUFBRSxBQUFDLGdCQUFDLENBQUMsQUFBTSxBQUFDLFFBQUMsQUFBQztBQUNWLHNCQUFNLElBQUksQUFBYyxBQUFDLEFBQTZCLEFBQUMsQUFBQyxBQUM1RDtBQUFDO0FBRUQsQUFBRyxBQUFDLGlCQUFDLElBQUksQUFBQyxJQUFXLEFBQUMsR0FBRSxBQUFDLElBQUcsQUFBSyxPQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUM7QUFDckMsQUFBTSx5QkFBRyxBQUFNLE9BQUMsQUFBTSxPQUFDLEFBQU0sU0FBRyxBQUFDLEFBQUMsS0FBRyxBQUFNLE9BQUMsQUFBUyxVQUFDLEFBQUMsR0FBRSxBQUFNLE9BQUMsQUFBTSxTQUFHLEFBQUMsQUFBQyxBQUFDLEFBQ2hGO0FBQUM7QUFFRCxBQUFNLG1CQUFDLEFBQU0sQUFBQyxBQUNsQjtBQUFDLEFBTU0sQUFBTSxBQUFDLEFBQWM7Ozt1Q0FBRSxBQUFjO0FBQ3hDLEFBQU0seUJBQ0QsQUFBSSxLQUFDLEFBQU0sQUFBQyxRQUNaLEFBQUcsSUFBQyxVQUFDLEFBQWlCO0FBQ25CLEFBQU0sdUJBQUMsU0FBTSxPQUFNLEFBQVMsQUFBQyxjQUFJLEFBQVMsQUFBQyxBQUMvQztBQUFDLEFBQUMsYUFKQyxBQUFLLEVBS1AsQUFBSSxLQUFDLEFBQUssQUFBQyxBQUFDLEFBQ3JCO0FBQUM7Ozs7OztBQWxFc0IsTUFBaUIsb0JBQVcsQUFBSSxBQUFDO0FBSjVELGdCQXVFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpTRnVjayB9IGZyb20gJy4uL2VudW1zL0pTRnVjayc7XG5cbmV4cG9ydCBjbGFzcyBVdGlscyB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGhleGFkZWNpbWFsUHJlZml4OiBzdHJpbmcgPSAnMHgnO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlY1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBkZWNUb0hleCAoZGVjOiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCByYWRpeDogbnVtYmVyID0gMTY7XG5cbiAgICAgICAgcmV0dXJuIGRlYy50b1N0cmluZyhyYWRpeCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBleHRyYWN0RG9tYWluRnJvbVVybCAodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgZG9tYWluOiBzdHJpbmc7XG5cbiAgICAgICAgaWYgKHVybC5pbmRleE9mKCc6Ly8nKSA+IC0xIHx8IHVybC5pbmRleE9mKCcvLycpID09PSAwKSB7XG4gICAgICAgICAgICBkb21haW4gPSB1cmwuc3BsaXQoJy8nKVsyXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvbWFpbiA9IHVybC5zcGxpdCgnLycpWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9tYWluID0gZG9tYWluLnNwbGl0KCc6JylbMF07XG5cbiAgICAgICAgcmV0dXJuIGRvbWFpbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBpc0NlaWxOdW1iZXIgKG51bWJlcjogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBudW1iZXIgJSAxID09PSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZXNcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nUm90YXRlIChzdHJpbmc6IHN0cmluZywgdGltZXM6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIGlmICghc3RyaW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoYENhbm5vdCByb3RhdGUgZW1wdHkgc3RyaW5nLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IHRpbWVzOyBpKyspIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZ1tzdHJpbmcubGVuZ3RoIC0gMV0gKyBzdHJpbmcuc3Vic3RyaW5nKDAsIHN0cmluZy5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzdHJpbmdUb0pTRnVjayAoc3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gQXJyYXlcbiAgICAgICAgICAgIC5mcm9tKHN0cmluZylcbiAgICAgICAgICAgIC5tYXAoKGNoYXJhY3Rlcjogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNGdWNrWzxhbnk+Y2hhcmFjdGVyXSB8fCBjaGFyYWN0ZXI7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJyArICcpO1xuICAgIH1cbn1cbiJdfQ==