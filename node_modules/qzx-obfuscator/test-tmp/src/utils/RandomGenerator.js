"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../container/ServiceIdentifiers");
var md5 = require("md5");
var chance_1 = require("chance");
var Utils_1 = require("./Utils");
var RandomGenerator = RandomGenerator_1 = function () {
    function RandomGenerator(sourceCode, options) {
        _classCallCheck(this, RandomGenerator);

        this.randomVariableNameSet = new Set();
        this.sourceCode = sourceCode;
        this.options = options;
        this.randomGenerator = options.seed === 0 ? new chance_1.Chance() : new chance_1.Chance(this.getSeed());
    }

    _createClass(RandomGenerator, [{
        key: "getMathRandom",
        value: function getMathRandom() {
            return this.getRandomInteger(0, 99999) / 100000;
        }
    }, {
        key: "getRandomFloat",
        value: function getRandomFloat(min, max) {
            return this.getRandomGenerator().floating({
                min: min,
                max: max,
                fixed: 7
            });
        }
    }, {
        key: "getRandomGenerator",
        value: function getRandomGenerator() {
            return this.randomGenerator;
        }
    }, {
        key: "getRandomInteger",
        value: function getRandomInteger(min, max) {
            return this.getRandomGenerator().integer({
                min: min,
                max: max
            });
        }
    }, {
        key: "getRandomString",
        value: function getRandomString(length) {
            var pool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : RandomGenerator_1.randomGeneratorPool;

            return this.getRandomGenerator().string({ length: length, pool: pool });
        }
    }, {
        key: "getRandomVariableName",
        value: function getRandomVariableName(length) {
            var prefix = "_" + Utils_1.Utils.hexadecimalPrefix;
            var rangeMinInteger = 10000;
            var rangeMaxInteger = 99999999;
            var randomInteger = this.getRandomInteger(rangeMinInteger, rangeMaxInteger);
            var hexadecimalNumber = Utils_1.Utils.decToHex(randomInteger);
            var randomVariableName = "" + prefix + hexadecimalNumber.substr(0, length);
            if (this.randomVariableNameSet.has(randomVariableName)) {
                return this.getRandomVariableName(length);
            }
            this.randomVariableNameSet.add(randomVariableName);
            return randomVariableName;
        }
    }, {
        key: "getSeed",
        value: function getSeed() {
            var md5Hash = md5(this.sourceCode.getSourceCode());
            return this.options.seed + Number(md5Hash.replace(/\D/g, ''));
        }
    }]);

    return RandomGenerator;
}();
RandomGenerator.randomGeneratorPool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
RandomGenerator.randomGeneratorPoolNumbers = '0123456789';
RandomGenerator.randomGeneratorPoolHexadecimal = "abcdef" + RandomGenerator_1.randomGeneratorPoolNumbers;
RandomGenerator = RandomGenerator_1 = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.ISourceCode)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Object, Object])], RandomGenerator);
exports.RandomGenerator = RandomGenerator;
var RandomGenerator_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,