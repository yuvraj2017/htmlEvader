"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("./ServiceIdentifiers");
var ControlFlowTransformersModule_1 = require("./modules/node-transformers/ControlFlowTransformersModule");
var CustomNodesModule_1 = require("./modules/custom-nodes/CustomNodesModule");
var ObfuscatingTransformersModule_1 = require("./modules/node-transformers/ObfuscatingTransformersModule");
var NodeTransformersModule_1 = require("./modules/node-transformers/NodeTransformersModule");
var StackTraceAnalyzerModule_1 = require("./modules/stack-trace-analyzer/StackTraceAnalyzerModule");
var StoragesModule_1 = require("./modules/storages/StoragesModule");
var UtilsModule_1 = require("./modules/utils/UtilsModule");
var JavaScriptObfuscatorInternal_1 = require("../JavaScriptObfuscatorInternal");
var ObfuscationEventEmitter_1 = require("../event-emitters/ObfuscationEventEmitter");
var ObfuscationResult_1 = require("../ObfuscationResult");
var Obfuscator_1 = require("../Obfuscator");
var Options_1 = require("../options/Options");
var SourceCode_1 = require("../SourceCode");
var SourceMapCorrector_1 = require("../SourceMapCorrector");

var InversifyContainerFacade = function () {
    function InversifyContainerFacade() {
        _classCallCheck(this, InversifyContainerFacade);

        this.container = new inversify_1.Container();
    }

    _createClass(InversifyContainerFacade, [{
        key: "get",
        value: function get(serviceIdentifier) {
            return this.container.get(serviceIdentifier);
        }
    }, {
        key: "getNamed",
        value: function getNamed(serviceIdentifier, named) {
            return this.container.getNamed(serviceIdentifier, named);
        }
    }, {
        key: "load",
        value: function load(sourceCode, options) {
            this.container.bind(ServiceIdentifiers_1.ServiceIdentifiers.ISourceCode).toDynamicValue(function () {
                return new SourceCode_1.SourceCode(sourceCode);
            }).inSingletonScope();
            this.container.bind(ServiceIdentifiers_1.ServiceIdentifiers.IOptions).toDynamicValue(function () {
                return new Options_1.Options(options);
            }).inSingletonScope();
            this.container.bind(ServiceIdentifiers_1.ServiceIdentifiers.IJavaScriptObfuscator).to(JavaScriptObfuscatorInternal_1.JavaScriptObfuscatorInternal).inSingletonScope();
            this.container.bind(ServiceIdentifiers_1.ServiceIdentifiers.IObfuscator).to(Obfuscator_1.Obfuscator).inSingletonScope();
            this.container.bind(ServiceIdentifiers_1.ServiceIdentifiers.IObfuscationResult).to(ObfuscationResult_1.ObfuscationResult).inSingletonScope();
            this.container.bind(ServiceIdentifiers_1.ServiceIdentifiers.Factory__IObfuscationResult).toFactory(function (context) {
                return function (obfuscatedCode, sourceMap) {
                    var obfuscationResult = context.container.get(ServiceIdentifiers_1.ServiceIdentifiers.IObfuscationResult);
                    obfuscationResult.initialize(obfuscatedCode, sourceMap);
                    return obfuscationResult;
                };
            });
            this.container.bind(ServiceIdentifiers_1.ServiceIdentifiers.ISourceMapCorrector).to(SourceMapCorrector_1.SourceMapCorrector).inSingletonScope();
            this.container.bind(ServiceIdentifiers_1.ServiceIdentifiers.IObfuscationEventEmitter).to(ObfuscationEventEmitter_1.ObfuscationEventEmitter).inSingletonScope();
            this.container.load(UtilsModule_1.utilsModule);
            this.container.load(StoragesModule_1.storagesModule);
            this.container.load(StackTraceAnalyzerModule_1.stackTraceAnalyzerModule);
            this.container.load(CustomNodesModule_1.customNodesModule);
            this.container.load(NodeTransformersModule_1.nodeTransformersModule);
            this.container.load(ControlFlowTransformersModule_1.controlFlowTransformersModule);
            this.container.load(ObfuscatingTransformersModule_1.obfuscatingTransformersModule);
        }
    }, {
        key: "unload",
        value: function unload() {
            this.container.unbindAll();
        }
    }], [{
        key: "getFactory",
        value: function getFactory(serviceIdentifier) {
            return function (context) {
                return function (bindingName) {
                    return context.container.getNamed(serviceIdentifier, bindingName);
                };
            };
        }
    }, {
        key: "getCacheFactory",
        value: function getCacheFactory(serviceIdentifier) {
            return function (context) {
                var cache = new Map();
                return function (bindingName) {
                    if (cache.has(bindingName)) {
                        return cache.get(bindingName);
                    }
                    var object = context.container.getNamed(serviceIdentifier, bindingName);
                    cache.set(bindingName, object);
                    return object;
                };
            };
        }
    }, {
        key: "getConstructorFactory",
        value: function getConstructorFactory(serviceIdentifier) {
            for (var _len = arguments.length, dependencies = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                dependencies[_key - 1] = arguments[_key];
            }

            return function (context) {
                var cache = new Map();
                var cachedDependencies = [];
                return function (bindingName) {
                    dependencies.forEach(function (dependency, index) {
                        if (!cachedDependencies[index]) {
                            cachedDependencies[index] = context.container.get(dependency);
                        }
                    });
                    if (cache.has(bindingName)) {
                        return new (Function.prototype.bind.apply(cache.get(bindingName), [null].concat(cachedDependencies)))();
                    }
                    var constructor = context.container.getNamed(serviceIdentifier, bindingName);
                    cache.set(bindingName, constructor);
                    return new (Function.prototype.bind.apply(constructor, [null].concat(cachedDependencies)))();
                };
            };
        }
    }]);

    return InversifyContainerFacade;
}();

exports.InversifyContainerFacade = InversifyContainerFacade;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbnRhaW5lci9JbnZlcnNpZnlDb250YWluZXJGYWNhZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDBCQUFrRDtBQUNsRCxtQ0FBMEQ7QUFFMUQsOENBQTBHO0FBQzFHLGtDQUE2RTtBQUM3RSw4Q0FBMEc7QUFDMUcsdUNBQTRGO0FBQzVGLHlDQUFtRztBQUNuRywrQkFBbUU7QUFDbkUsNEJBQTBEO0FBYTFELDZDQUErRTtBQUMvRSx3Q0FBb0Y7QUFDcEYsa0NBQXlEO0FBQ3pELDJCQUEyQztBQUMzQyx3QkFBNkM7QUFDN0MsMkJBQTJDO0FBQzNDLG1DQUEyRCxBQUUzRDs7O0FBTUk7OztBQUNJLEFBQUksYUFBQyxBQUFTLFlBQUcsSUFBSSxZQUFTLEFBQUUsQUFBQyxBQUNyQztBQUFDLEFBTU0sQUFBTSxBQUFDLEFBQVU7Ozs7NEJBMkVSLEFBQWtEO0FBQzlELEFBQU0sbUJBQUMsQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFHLElBQUksQUFBaUIsQUFBQyxBQUFDLEFBQ3BEO0FBQUMsQUFPTSxBQUFROzs7aUNBQU0sQUFBa0QsbUJBQUUsQUFBK0I7QUFDcEcsQUFBTSxtQkFBQyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQVEsU0FBSSxBQUFpQixtQkFBRSxBQUFLLEFBQUMsQUFBQyxBQUNoRTtBQUFDLEFBTU0sQUFBSTs7OzZCQUFFLEFBQWtCLFlBQUUsQUFBc0I7QUFDbkQsQUFBSSxpQkFBQyxBQUFTLFVBQ1QsQUFBSSxLQUFjLHFCQUFrQixtQkFBQyxBQUFXLEFBQUMsYUFDakQsQUFBYztBQUFDLHVCQUFNLElBQUksYUFBVSxXQUFDLEFBQVUsQUFBQyxBQUFDO2VBQ2hELEFBQWdCLEFBQUUsQUFBQztBQUV4QixBQUFJLGlCQUFDLEFBQVMsVUFDVCxBQUFJLEtBQVcscUJBQWtCLG1CQUFDLEFBQVEsQUFBQyxV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QixBQUFXLEFBQ2QsQUFBQztBQUVOLEFBQUssMEJBQUMsQUFBRyxJQUFDLEFBQVcsYUFBRSxBQUFXLEFBQUMsQUFBQztBQUVwQyxBQUFNLEFBQUMsOERBQUksQUFBVyxBQUFDLDJCQUFHLEFBQWtCLEFBQUMsQUFBQyxBQUNsRDtBQUFDLEFBQUMsQUFDTjtBQUFDLEFBQUMsQUFDTjtBQUFDLEFBTU0sQUFBRzs7Ozs7O0FBekZkLG1DQXdLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRhaW5lciwgaW50ZXJmYWNlcyB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBTZXJ2aWNlSWRlbnRpZmllcnMgfSBmcm9tICcuL1NlcnZpY2VJZGVudGlmaWVycyc7XG5cbmltcG9ydCB7IGNvbnRyb2xGbG93VHJhbnNmb3JtZXJzTW9kdWxlIH0gZnJvbSAnLi9tb2R1bGVzL25vZGUtdHJhbnNmb3JtZXJzL0NvbnRyb2xGbG93VHJhbnNmb3JtZXJzTW9kdWxlJztcbmltcG9ydCB7IGN1c3RvbU5vZGVzTW9kdWxlIH0gZnJvbSAnLi9tb2R1bGVzL2N1c3RvbS1ub2Rlcy9DdXN0b21Ob2Rlc01vZHVsZSc7XG5pbXBvcnQgeyBvYmZ1c2NhdGluZ1RyYW5zZm9ybWVyc01vZHVsZSB9IGZyb20gJy4vbW9kdWxlcy9ub2RlLXRyYW5zZm9ybWVycy9PYmZ1c2NhdGluZ1RyYW5zZm9ybWVyc01vZHVsZSc7XG5pbXBvcnQgeyBub2RlVHJhbnNmb3JtZXJzTW9kdWxlIH0gZnJvbSAnLi9tb2R1bGVzL25vZGUtdHJhbnNmb3JtZXJzL05vZGVUcmFuc2Zvcm1lcnNNb2R1bGUnO1xuaW1wb3J0IHsgc3RhY2tUcmFjZUFuYWx5emVyTW9kdWxlIH0gZnJvbSAnLi9tb2R1bGVzL3N0YWNrLXRyYWNlLWFuYWx5emVyL1N0YWNrVHJhY2VBbmFseXplck1vZHVsZSc7XG5pbXBvcnQgeyBzdG9yYWdlc01vZHVsZSB9IGZyb20gJy4vbW9kdWxlcy9zdG9yYWdlcy9TdG9yYWdlc01vZHVsZSc7XG5pbXBvcnQgeyB1dGlsc01vZHVsZSB9IGZyb20gJy4vbW9kdWxlcy91dGlscy9VdGlsc01vZHVsZSc7XG5cbmltcG9ydCB7IFRJbnB1dE9wdGlvbnMgfSBmcm9tICcuLi90eXBlcy9vcHRpb25zL1RJbnB1dE9wdGlvbnMnO1xuXG5pbXBvcnQgeyBJSW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb250YWluZXIvSUludmVyc2lmeUNvbnRhaW5lckZhY2FkZSc7XG5pbXBvcnQgeyBJSmF2YVNjcmlwdE9iZnVzY2F0b3IgfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lKYXZhU2NyaXB0T2Jmc3VjYXRvcic7XG5pbXBvcnQgeyBJT2JmdXNjYXRpb25FdmVudEVtaXR0ZXIgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2V2ZW50LWVtaXR0ZXJzL0lPYmZ1c2NhdGlvbkV2ZW50RW1pdHRlcic7XG5pbXBvcnQgeyBJT2JmdXNjYXRpb25SZXN1bHQgfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lPYmZ1c2NhdGlvblJlc3VsdCc7XG5pbXBvcnQgeyBJT2JmdXNjYXRvciB9IGZyb20gJy4uL2ludGVyZmFjZXMvSU9iZnVzY2F0b3InO1xuaW1wb3J0IHsgSU9wdGlvbnMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL29wdGlvbnMvSU9wdGlvbnMnO1xuaW1wb3J0IHsgSVNvdXJjZUNvZGUgfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lTb3VyY2VDb2RlJztcbmltcG9ydCB7IElTb3VyY2VNYXBDb3JyZWN0b3IgfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lTb3VyY2VNYXBDb3JyZWN0b3InO1xuXG5pbXBvcnQgeyBKYXZhU2NyaXB0T2JmdXNjYXRvckludGVybmFsIH0gZnJvbSAnLi4vSmF2YVNjcmlwdE9iZnVzY2F0b3JJbnRlcm5hbCc7XG5pbXBvcnQgeyBPYmZ1c2NhdGlvbkV2ZW50RW1pdHRlciB9IGZyb20gJy4uL2V2ZW50LWVtaXR0ZXJzL09iZnVzY2F0aW9uRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7IE9iZnVzY2F0aW9uUmVzdWx0IH0gZnJvbSAnLi4vT2JmdXNjYXRpb25SZXN1bHQnO1xuaW1wb3J0IHsgT2JmdXNjYXRvciB9IGZyb20gJy4uL09iZnVzY2F0b3InO1xuaW1wb3J0IHsgT3B0aW9ucyB9IGZyb20gXCIuLi9vcHRpb25zL09wdGlvbnNcIjtcbmltcG9ydCB7IFNvdXJjZUNvZGUgfSBmcm9tICcuLi9Tb3VyY2VDb2RlJztcbmltcG9ydCB7IFNvdXJjZU1hcENvcnJlY3RvciB9IGZyb20gJy4uL1NvdXJjZU1hcENvcnJlY3Rvcic7XG5cbmV4cG9ydCBjbGFzcyBJbnZlcnNpZnlDb250YWluZXJGYWNhZGUgaW1wbGVtZW50cyBJSW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7aW50ZXJmYWNlcy5Db250YWluZXJ9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb250YWluZXI6IGludGVyZmFjZXMuQ29udGFpbmVyO1xuXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG5ldyBDb250YWluZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ludGVyZmFjZXMuU2VydmljZUlkZW50aWZpZXI8VT59IHNlcnZpY2VJZGVudGlmaWVyXG4gICAgICogQHJldHVybnMge1V9XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXRGYWN0b3J5IDxUIGV4dGVuZHMgbnVtYmVyLCBVPiAoXG4gICAgICAgIHNlcnZpY2VJZGVudGlmaWVyOiBpbnRlcmZhY2VzLlNlcnZpY2VJZGVudGlmaWVyPFU+XG4gICAgKTogKGNvbnRleHQ6IGludGVyZmFjZXMuQ29udGV4dCkgPT4gKGJpbmRpbmdOYW1lOiBUKSA9PiBVIHtcbiAgICAgICAgcmV0dXJuIChjb250ZXh0OiBpbnRlcmZhY2VzLkNvbnRleHQpOiAoYmluZGluZ05hbWU6IFQpID0+IFUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChiaW5kaW5nTmFtZTogVCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNvbnRhaW5lci5nZXROYW1lZDxVPihzZXJ2aWNlSWRlbnRpZmllciwgYmluZGluZ05hbWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ludGVyZmFjZXMuU2VydmljZUlkZW50aWZpZXI8VT59IHNlcnZpY2VJZGVudGlmaWVyXG4gICAgICogQHJldHVybnMge1V9XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXRDYWNoZUZhY3RvcnkgPFQgZXh0ZW5kcyBudW1iZXIsIFU+IChcbiAgICAgICAgc2VydmljZUlkZW50aWZpZXI6IGludGVyZmFjZXMuU2VydmljZUlkZW50aWZpZXI8VT5cbiAgICApOiAoY29udGV4dDogaW50ZXJmYWNlcy5Db250ZXh0KSA9PiAoYmluZGluZ05hbWU6IFQpID0+IFUge1xuICAgICAgICByZXR1cm4gKGNvbnRleHQ6IGludGVyZmFjZXMuQ29udGV4dCk6IChiaW5kaW5nTmFtZTogVCkgPT4gVSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjYWNoZTogTWFwIDxULCBVPiA9IG5ldyBNYXAoKTtcblxuICAgICAgICAgICAgcmV0dXJuIChiaW5kaW5nTmFtZTogVCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjYWNoZS5oYXMoYmluZGluZ05hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8VT5jYWNoZS5nZXQoYmluZGluZ05hbWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IG9iamVjdDogVSA9IGNvbnRleHQuY29udGFpbmVyLmdldE5hbWVkPFU+KHNlcnZpY2VJZGVudGlmaWVyLCBiaW5kaW5nTmFtZSk7XG5cbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQoYmluZGluZ05hbWUsIG9iamVjdCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ludGVyZmFjZXMuU2VydmljZUlkZW50aWZpZXI8aW50ZXJmYWNlcy5OZXdhYmxlPFU+Pn0gc2VydmljZUlkZW50aWZpZXJcbiAgICAgKiBAcGFyYW0ge2FueVtdfSBkZXBlbmRlbmNpZXNcbiAgICAgKiBAcmV0dXJucyB7VX1cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdldENvbnN0cnVjdG9yRmFjdG9yeSA8VCBleHRlbmRzIG51bWJlciwgVT4gKFxuICAgICAgICBzZXJ2aWNlSWRlbnRpZmllcjogaW50ZXJmYWNlcy5TZXJ2aWNlSWRlbnRpZmllcjxpbnRlcmZhY2VzLk5ld2FibGU8VT4+LFxuICAgICAgICAuLi5kZXBlbmRlbmNpZXM6IGFueVtdXG4gICAgKTogKGNvbnRleHQ6IGludGVyZmFjZXMuQ29udGV4dCkgPT4gKGJpbmRpbmdOYW1lOiBUKSA9PiBVIHtcbiAgICAgICAgcmV0dXJuIChjb250ZXh0OiBpbnRlcmZhY2VzLkNvbnRleHQpOiAoYmluZGluZ05hbWU6IFQpID0+IFUgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FjaGU6IE1hcDxULCBpbnRlcmZhY2VzLk5ld2FibGU8VT4+ID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgY29uc3QgY2FjaGVkRGVwZW5kZW5jaWVzOiBhbnlbXSA9IFtdO1xuXG4gICAgICAgICAgICByZXR1cm4gKGJpbmRpbmdOYW1lOiBUKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzLmZvckVhY2goKGRlcGVuZGVuY3k6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNhY2hlZERlcGVuZGVuY2llc1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlZERlcGVuZGVuY2llc1tpbmRleF0gPSBjb250ZXh0LmNvbnRhaW5lci5nZXQ8YW55PihkZXBlbmRlbmN5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlLmhhcyhiaW5kaW5nTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAoPGludGVyZmFjZXMuTmV3YWJsZTxVPj5jYWNoZS5nZXQoYmluZGluZ05hbWUpKSguLi5jYWNoZWREZXBlbmRlbmNpZXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnN0cnVjdG9yOiBpbnRlcmZhY2VzLk5ld2FibGU8VT4gPSBjb250ZXh0LmNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAuZ2V0TmFtZWQ8aW50ZXJmYWNlcy5OZXdhYmxlPFU+PihcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VJZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmluZGluZ05hbWVcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGNhY2hlLnNldChiaW5kaW5nTmFtZSwgY29uc3RydWN0b3IpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBjb25zdHJ1Y3RvciguLi5jYWNoZWREZXBlbmRlbmNpZXMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ludGVyZmFjZXMuU2VydmljZUlkZW50aWZpZXI8VD59IHNlcnZpY2VJZGVudGlmaWVyXG4gICAgICogQHJldHVybnMge1R9XG4gICAgICovXG4gICAgcHVibGljIGdldCA8VD4gKHNlcnZpY2VJZGVudGlmaWVyOiBpbnRlcmZhY2VzLlNlcnZpY2VJZGVudGlmaWVyPFQ+KTogVCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci5nZXQ8VD4oc2VydmljZUlkZW50aWZpZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7aW50ZXJmYWNlcy5TZXJ2aWNlSWRlbnRpZmllcjxUPn0gc2VydmljZUlkZW50aWZpZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IHN5bWJvbH0gbmFtZWRcbiAgICAgKiBAcmV0dXJucyB7VH1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TmFtZWQgPFQ+IChzZXJ2aWNlSWRlbnRpZmllcjogaW50ZXJmYWNlcy5TZXJ2aWNlSWRlbnRpZmllcjxUPiwgbmFtZWQ6IHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCk6IFQge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIuZ2V0TmFtZWQ8VD4oc2VydmljZUlkZW50aWZpZXIsIG5hbWVkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlQ29kZVxuICAgICAqIEBwYXJhbSB7VElucHV0T3B0aW9uc30gb3B0aW9uc1xuICAgICAqL1xuICAgIHB1YmxpYyBsb2FkIChzb3VyY2VDb2RlOiBzdHJpbmcsIG9wdGlvbnM6IFRJbnB1dE9wdGlvbnMpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJcbiAgICAgICAgICAgIC5iaW5kPElTb3VyY2VDb2RlPihTZXJ2aWNlSWRlbnRpZmllcnMuSVNvdXJjZUNvZGUpXG4gICAgICAgICAgICAudG9EeW5hbWljVmFsdWUoKCkgPT4gbmV3IFNvdXJjZUNvZGUoc291cmNlQ29kZSkpXG4gICAgICAgICAgICAuaW5TaW5nbGV0b25TY29wZSgpO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyXG4gICAgICAgICAgICAuYmluZDxJT3B0aW9ucz4oU2VydmljZUlkZW50aWZpZXJzLklPcHRpb25zKVxuICAgICAgICAgICAgLnRvRHluYW1pY1ZhbHVlKCgpID0+IG5ldyBPcHRpb25zKG9wdGlvbnMpKVxuICAgICAgICAgICAgLmluU2luZ2xldG9uU2NvcGUoKTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lclxuICAgICAgICAgICAgLmJpbmQ8SUphdmFTY3JpcHRPYmZ1c2NhdG9yPihTZXJ2aWNlSWRlbnRpZmllcnMuSUphdmFTY3JpcHRPYmZ1c2NhdG9yKVxuICAgICAgICAgICAgLnRvKEphdmFTY3JpcHRPYmZ1c2NhdG9ySW50ZXJuYWwpXG4gICAgICAgICAgICAuaW5TaW5nbGV0b25TY29wZSgpO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyXG4gICAgICAgICAgICAuYmluZDxJT2JmdXNjYXRvcj4oU2VydmljZUlkZW50aWZpZXJzLklPYmZ1c2NhdG9yKVxuICAgICAgICAgICAgLnRvKE9iZnVzY2F0b3IpXG4gICAgICAgICAgICAuaW5TaW5nbGV0b25TY29wZSgpO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyXG4gICAgICAgICAgICAuYmluZDxJT2JmdXNjYXRpb25SZXN1bHQ+KFNlcnZpY2VJZGVudGlmaWVycy5JT2JmdXNjYXRpb25SZXN1bHQpXG4gICAgICAgICAgICAudG8oT2JmdXNjYXRpb25SZXN1bHQpXG4gICAgICAgICAgICAuaW5TaW5nbGV0b25TY29wZSgpO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyXG4gICAgICAgICAgICAuYmluZDxJT2JmdXNjYXRpb25SZXN1bHQ+KFNlcnZpY2VJZGVudGlmaWVycy5GYWN0b3J5X19JT2JmdXNjYXRpb25SZXN1bHQpXG4gICAgICAgICAgICAudG9GYWN0b3J5PElPYmZ1c2NhdGlvblJlc3VsdD4oKGNvbnRleHQ6IGludGVyZmFjZXMuQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAob2JmdXNjYXRlZENvZGU6IHN0cmluZywgc291cmNlTWFwOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IGNvbnRleHQuY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0PElPYmZ1c2NhdGlvblJlc3VsdD4oU2VydmljZUlkZW50aWZpZXJzLklPYmZ1c2NhdGlvblJlc3VsdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgb2JmdXNjYXRpb25SZXN1bHQuaW5pdGlhbGl6ZShvYmZ1c2NhdGVkQ29kZSwgc291cmNlTWFwKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JmdXNjYXRpb25SZXN1bHQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyXG4gICAgICAgICAgICAuYmluZDxJU291cmNlTWFwQ29ycmVjdG9yPihTZXJ2aWNlSWRlbnRpZmllcnMuSVNvdXJjZU1hcENvcnJlY3RvcilcbiAgICAgICAgICAgIC50byhTb3VyY2VNYXBDb3JyZWN0b3IpXG4gICAgICAgICAgICAuaW5TaW5nbGV0b25TY29wZSgpO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyXG4gICAgICAgICAgICAuYmluZDxJT2JmdXNjYXRpb25FdmVudEVtaXR0ZXI+KFNlcnZpY2VJZGVudGlmaWVycy5JT2JmdXNjYXRpb25FdmVudEVtaXR0ZXIpXG4gICAgICAgICAgICAudG8oT2JmdXNjYXRpb25FdmVudEVtaXR0ZXIpXG4gICAgICAgICAgICAuaW5TaW5nbGV0b25TY29wZSgpO1xuXG4gICAgICAgIC8vIG1vZHVsZXNcbiAgICAgICAgdGhpcy5jb250YWluZXIubG9hZCh1dGlsc01vZHVsZSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmxvYWQoc3RvcmFnZXNNb2R1bGUpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5sb2FkKHN0YWNrVHJhY2VBbmFseXplck1vZHVsZSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmxvYWQoY3VzdG9tTm9kZXNNb2R1bGUpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5sb2FkKG5vZGVUcmFuc2Zvcm1lcnNNb2R1bGUpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5sb2FkKGNvbnRyb2xGbG93VHJhbnNmb3JtZXJzTW9kdWxlKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIubG9hZChvYmZ1c2NhdGluZ1RyYW5zZm9ybWVyc01vZHVsZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHVubG9hZCAoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnVuYmluZEFsbCgpO1xuICAgIH1cbn1cbiJdfQ==