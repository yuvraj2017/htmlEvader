"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function initializable() {
    var initializeMethodKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initialize';

    var decoratorName = Object.keys(this)[0];
    return function (target, propertyKey) {
        var descriptor = {
            configurable: true,
            enumerable: true
        };
        var initializeMethod = target[initializeMethodKey];
        if (!initializeMethod || typeof initializeMethod !== 'function') {
            throw new Error("`" + initializeMethodKey + "` method with initialization logic not found. `@" + decoratorName + "` decorator requires `" + initializeMethodKey + "` method");
        }
        var metadataPropertyKey = "_" + propertyKey;
        var propertyDescriptor = Object.getOwnPropertyDescriptor(target, metadataPropertyKey) || descriptor;
        var methodDescriptor = Object.getOwnPropertyDescriptor(target, initializeMethodKey) || descriptor;
        var originalMethod = methodDescriptor.value;
        Object.defineProperty(target, propertyKey, Object.assign({}, propertyDescriptor, { get: function get() {
                if (this[metadataPropertyKey] === undefined) {
                    throw new Error("Property `" + propertyKey + "` is not initialized! Initialize it first!");
                }
                return this[metadataPropertyKey];
            }, set: function set(newVal) {
                this[metadataPropertyKey] = newVal;
            } }));
        Object.defineProperty(target, initializeMethodKey, Object.assign({}, methodDescriptor, { value: function value() {
                originalMethod.apply(this, arguments);
                if (this[propertyKey]) {}
            } }));
        return propertyDescriptor;
    };
}
exports.initializable = initializable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5pdGlhbGl6YWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL0luaXRpYWxpemFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBUUE7UUFDSSwwRkFBOEIsQUFBWTs7QUFFMUMsUUFBTSxBQUFhLGdCQUFXLEFBQU0sT0FBQyxBQUFJLEtBQUMsQUFBSSxBQUFDLE1BQUMsQUFBQyxBQUFDLEFBQUM7QUFFbkQsQUFBTSxXQUFDLFVBQUMsQUFBc0IsUUFBRSxBQUE0QjtBQUN4RCxZQUFNLEFBQVU7QUFDWixBQUFZLDBCQUFFLEFBQUk7QUFDbEIsQUFBVSx3QkFBRSxBQUFJLEFBQ25CLEFBQUM7QUFIcUM7QUFJdkMsWUFBTSxBQUFnQixtQkFBYSxBQUFNLE9BQUMsQUFBbUIsQUFBQyxBQUFDO0FBRS9ELEFBQUUsQUFBQyxZQUFDLENBQUMsQUFBZ0Isb0JBQUksT0FBTyxBQUFnQixxQkFBSyxBQUFVLEFBQUMsWUFBQyxBQUFDO0FBQzlELGtCQUFNLElBQUksQUFBSyxBQUFDLFlBQUssQUFBbUIsMkVBQXFELEFBQWEsMkNBQTJCLEFBQW1CLEFBQVcsQUFBQyxBQUFDLEFBQ3pLO0FBQUM7QUFFRCxZQUFNLEFBQW1CLEFBQVcsNEJBQUksQUFBVyxBQUFFLEFBQUM7QUFDdEQsWUFBTSxBQUFrQixxQkFBdUIsQUFBTSxPQUFDLEFBQXdCLHlCQUFDLEFBQU0sUUFBRSxBQUFtQixBQUFDLHdCQUFJLEFBQVUsQUFBQztBQUMxSCxZQUFNLEFBQWdCLG1CQUF1QixBQUFNLE9BQUMsQUFBd0IseUJBQUMsQUFBTSxRQUFFLEFBQW1CLEFBQUMsd0JBQUksQUFBVSxBQUFDO0FBQ3hILFlBQU0sQUFBYyxpQkFBYSxBQUFnQixpQkFBQyxBQUFLLEFBQUM7QUFFeEQsQUFBTSxlQUFDLEFBQWMsZUFBQyxBQUFNLFFBQUUsQUFBVywrQkFDbEMsQUFBa0Isc0JBQ3JCLEFBQUcsS0FBRTtBQUNELEFBQUUsQUFBQyxvQkFBQyxBQUFJLEtBQUMsQUFBbUIsQUFBQyx5QkFBSyxBQUFTLEFBQUMsV0FBQyxBQUFDO0FBQzFDLDBCQUFNLElBQUksQUFBSyxBQUFDLHFCQUFjLEFBQVcsQUFBNkMsQUFBQyxBQUFDLEFBQzVGO0FBQUM7QUFFRCxBQUFNLHVCQUFDLEFBQUksS0FBQyxBQUFtQixBQUFDLEFBQUMsQUFDckM7QUFBQyxlQUNELEFBQUcsS0FBRSxhQUFVLEFBQVc7QUFDdEIsQUFBSSxxQkFBQyxBQUFtQixBQUFDLHVCQUFHLEFBQU0sQUFBQyxBQUN2QztBQUFDLEFBQ0gsQUFBQztBQUNILEFBQU0sZUFBQyxBQUFjLGVBQUMsQUFBTSxRQUFFLEFBQW1CLHVDQUMxQyxBQUFnQixvQkFDbkIsQUFBSyxPQUFFO0FBQ0gsQUFBYywrQkFBQyxBQUFLLE1BQUMsQUFBSSxNQUFFLEFBQVMsQUFBQyxBQUFDO0FBRXRDLEFBQUUsQUFBQyxvQkFBQyxBQUFJLEtBQUMsQUFBVyxBQUFDLEFBQUMsY0FBQyxBQUFDLENBQUMsQUFDN0I7QUFBQyxBQUNILEFBQUM7QUFFSCxBQUFNLGVBQUMsQUFBa0IsQUFBQyxBQUM5QjtBQUFDLEFBQUMsQUFDTjtBQUFDO0FBN0NELHdCQTZDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm5vLWludmFsaWQtdGhpcyAqL1xuXG5pbXBvcnQgeyBJSW5pdGlhbGl6YWJsZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvSUluaXRpYWxpemFibGUnO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbml0aWFsaXplTWV0aG9kS2V5XG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6YWJsZSAoXG4gICAgaW5pdGlhbGl6ZU1ldGhvZEtleTogc3RyaW5nID0gJ2luaXRpYWxpemUnXG4pOiAodGFyZ2V0OiBJSW5pdGlhbGl6YWJsZSwgcHJvcGVydHlLZXk6IHN0cmluZyB8IHN5bWJvbCkgPT4gYW55IHtcbiAgICBjb25zdCBkZWNvcmF0b3JOYW1lOiBzdHJpbmcgPSBPYmplY3Qua2V5cyh0aGlzKVswXTtcblxuICAgIHJldHVybiAodGFyZ2V0OiBJSW5pdGlhbGl6YWJsZSwgcHJvcGVydHlLZXk6IHN0cmluZyB8IHN5bWJvbCk6IFByb3BlcnR5RGVzY3JpcHRvciA9PiB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaW5pdGlhbGl6ZU1ldGhvZDogRnVuY3Rpb24gPSB0YXJnZXRbaW5pdGlhbGl6ZU1ldGhvZEtleV07XG5cbiAgICAgICAgaWYgKCFpbml0aWFsaXplTWV0aG9kIHx8IHR5cGVvZiBpbml0aWFsaXplTWV0aG9kICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFxcYCR7aW5pdGlhbGl6ZU1ldGhvZEtleX1cXGAgbWV0aG9kIHdpdGggaW5pdGlhbGl6YXRpb24gbG9naWMgbm90IGZvdW5kLiBcXGBAJHtkZWNvcmF0b3JOYW1lfVxcYCBkZWNvcmF0b3IgcmVxdWlyZXMgXFxgJHtpbml0aWFsaXplTWV0aG9kS2V5fVxcYCBtZXRob2RgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1ldGFkYXRhUHJvcGVydHlLZXk6IHN0cmluZyA9IGBfJHtwcm9wZXJ0eUtleX1gO1xuICAgICAgICBjb25zdCBwcm9wZXJ0eURlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBtZXRhZGF0YVByb3BlcnR5S2V5KSB8fCBkZXNjcmlwdG9yO1xuICAgICAgICBjb25zdCBtZXRob2REZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgaW5pdGlhbGl6ZU1ldGhvZEtleSkgfHwgZGVzY3JpcHRvcjtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxNZXRob2Q6IEZ1bmN0aW9uID0gbWV0aG9kRGVzY3JpcHRvci52YWx1ZTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwge1xuICAgICAgICAgICAgLi4ucHJvcGVydHlEZXNjcmlwdG9yLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKTogYW55IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1ttZXRhZGF0YVByb3BlcnR5S2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvcGVydHkgXFxgJHtwcm9wZXJ0eUtleX1cXGAgaXMgbm90IGluaXRpYWxpemVkISBJbml0aWFsaXplIGl0IGZpcnN0IWApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW21ldGFkYXRhUHJvcGVydHlLZXldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKG5ld1ZhbDogYW55KTogdm9pZCB7XG4gICAgICAgICAgICAgICAgdGhpc1ttZXRhZGF0YVByb3BlcnR5S2V5XSA9IG5ld1ZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGluaXRpYWxpemVNZXRob2RLZXksIHtcbiAgICAgICAgICAgIC4uLm1ldGhvZERlc2NyaXB0b3IsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCk6IHZvaWQge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpc1twcm9wZXJ0eUtleV0pIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgfTtcbn1cbiJdfQ==