"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../../../container/ServiceIdentifiers");
var StringArrayEncoding_1 = require("../../../../enums/StringArrayEncoding");
var AbstractObfuscatingReplacer_1 = require("../AbstractObfuscatingReplacer");
var Nodes_1 = require("../../../../node/Nodes");
var Utils_1 = require("../../../../utils/Utils");
var StringLiteralObfuscatingReplacer = StringLiteralObfuscatingReplacer_1 = function (_AbstractObfuscatingR) {
    _inherits(StringLiteralObfuscatingReplacer, _AbstractObfuscatingR);

    function StringLiteralObfuscatingReplacer(customNodeGroupStorage, stringArrayStorage, escapeSequenceEncoder, randomGenerator, cryptUtils, options) {
        _classCallCheck(this, StringLiteralObfuscatingReplacer);

        var _this = _possibleConstructorReturn(this, (StringLiteralObfuscatingReplacer.__proto__ || Object.getPrototypeOf(StringLiteralObfuscatingReplacer)).call(this, options));

        _this.nodesCache = new Map();
        _this.stringLiteralHexadecimalIndexCache = new Map();
        _this.customNodeGroupStorage = customNodeGroupStorage;
        _this.stringArrayStorage = stringArrayStorage;
        _this.escapeSequenceEncoder = escapeSequenceEncoder;
        _this.randomGenerator = randomGenerator;
        _this.cryptUtils = cryptUtils;
        _this.rc4Keys = _this.randomGenerator.getRandomGenerator().n(function () {
            return _this.randomGenerator.getRandomGenerator().string({
                length: StringLiteralObfuscatingReplacer_1.rc4KeyLength
            });
        }, StringLiteralObfuscatingReplacer_1.rc4KeysCount);
        return _this;
    }

    _createClass(StringLiteralObfuscatingReplacer, [{
        key: "replace",
        value: function replace(nodeValue) {
            var useStringArray = this.canUseStringArray(nodeValue);
            var cacheKey = nodeValue + "-" + String(useStringArray);
            var useCacheValue = this.nodesCache.has(cacheKey) && this.options.stringArrayEncoding !== StringArrayEncoding_1.StringArrayEncoding.Rc4;
            if (useCacheValue) {
                return this.nodesCache.get(cacheKey);
            }
            var resultNode = useStringArray ? this.replaceWithStringArrayCallNode(nodeValue) : this.replaceWithLiteralNode(nodeValue);
            this.nodesCache.set(cacheKey, resultNode);
            return resultNode;
        }
    }, {
        key: "canUseStringArray",
        value: function canUseStringArray(nodeValue) {
            return this.options.stringArray && nodeValue.length >= StringLiteralObfuscatingReplacer_1.minimumLengthForStringArray && this.randomGenerator.getMathRandom() <= this.options.stringArrayThreshold;
        }
    }, {
        key: "getStringArrayHexadecimalIndex",
        value: function getStringArrayHexadecimalIndex(value, stringArrayStorageLength) {
            if (this.stringLiteralHexadecimalIndexCache.has(value)) {
                return {
                    fromCache: true,
                    index: this.stringLiteralHexadecimalIndexCache.get(value)
                };
            }
            var hexadecimalRawIndex = Utils_1.Utils.decToHex(stringArrayStorageLength);
            var hexadecimalIndex = "" + Utils_1.Utils.hexadecimalPrefix + hexadecimalRawIndex;
            this.stringLiteralHexadecimalIndexCache.set(value, hexadecimalIndex);
            return {
                fromCache: false,
                index: hexadecimalIndex
            };
        }
    }, {
        key: "getEncodedValue",
        value: function getEncodedValue(value) {
            var encodedValue = void 0,
                key = null;
            switch (this.options.stringArrayEncoding) {
                case StringArrayEncoding_1.StringArrayEncoding.Rc4:
                    key = this.randomGenerator.getRandomGenerator().pickone(this.rc4Keys);
                    encodedValue = this.cryptUtils.btoa(this.cryptUtils.rc4(value, key));
                    break;
                case StringArrayEncoding_1.StringArrayEncoding.Base64:
                    encodedValue = this.cryptUtils.btoa(value);
                    break;
                default:
                    encodedValue = value;
            }
            return { encodedValue: encodedValue, key: key };
        }
    }, {
        key: "replaceWithLiteralNode",
        value: function replaceWithLiteralNode(value) {
            return Nodes_1.Nodes.getLiteralNode(this.escapeSequenceEncoder.encode(value, this.options.unicodeEscapeSequence));
        }
    }, {
        key: "replaceWithStringArrayCallNode",
        value: function replaceWithStringArrayCallNode(value) {
            var _getEncodedValue = this.getEncodedValue(value),
                encodedValue = _getEncodedValue.encodedValue,
                key = _getEncodedValue.key;

            var escapedValue = this.escapeSequenceEncoder.encode(encodedValue, this.options.unicodeEscapeSequence);
            var stringArrayStorageLength = this.stringArrayStorage.getLength();
            var rotatedStringArrayStorageId = Utils_1.Utils.stringRotate(this.stringArrayStorage.getStorageId(), 1);
            var stringArrayStorageCallsWrapperName = "_" + Utils_1.Utils.hexadecimalPrefix + rotatedStringArrayStorageId;

            var _getStringArrayHexade = this.getStringArrayHexadecimalIndex(escapedValue, stringArrayStorageLength),
                fromCache = _getStringArrayHexade.fromCache,
                index = _getStringArrayHexade.index;

            if (!fromCache) {
                this.stringArrayStorage.set(stringArrayStorageLength, escapedValue);
            }
            var callExpressionArgs = [StringLiteralObfuscatingReplacer_1.getHexadecimalLiteralNode(index)];
            if (key) {
                callExpressionArgs.push(StringLiteralObfuscatingReplacer_1.getRc4KeyLiteralNode(this.escapeSequenceEncoder.encode(key, this.options.unicodeEscapeSequence)));
            }
            return Nodes_1.Nodes.getCallExpressionNode(Nodes_1.Nodes.getIdentifierNode(stringArrayStorageCallsWrapperName), callExpressionArgs);
        }
    }], [{
        key: "getHexadecimalLiteralNode",
        value: function getHexadecimalLiteralNode(hexadecimalIndex) {
            var hexadecimalLiteralNode = Nodes_1.Nodes.getLiteralNode(hexadecimalIndex);
            hexadecimalLiteralNode.obfuscatedNode = true;
            return hexadecimalLiteralNode;
        }
    }, {
        key: "getRc4KeyLiteralNode",
        value: function getRc4KeyLiteralNode(literalValue) {
            var rc4KeyLiteralNode = Nodes_1.Nodes.getLiteralNode(literalValue);
            rc4KeyLiteralNode.obfuscatedNode = true;
            return rc4KeyLiteralNode;
        }
    }]);

    return StringLiteralObfuscatingReplacer;
}(AbstractObfuscatingReplacer_1.AbstractObfuscatingReplacer);
StringLiteralObfuscatingReplacer.minimumLengthForStringArray = 3;
StringLiteralObfuscatingReplacer.rc4KeyLength = 4;
StringLiteralObfuscatingReplacer.rc4KeysCount = 50;
StringLiteralObfuscatingReplacer = StringLiteralObfuscatingReplacer_1 = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.TCustomNodeGroupStorage)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.TStringArrayStorage)), tslib_1.__param(2, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IEscapeSequenceEncoder)), tslib_1.__param(3, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(4, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.ICryptUtils)), tslib_1.__param(5, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object, Object, Object])], StringLiteralObfuscatingReplacer);
exports.StringLiteralObfuscatingReplacer = StringLiteralObfuscatingReplacer;
var StringLiteralObfuscatingReplacer_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,