"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../../../container/ServiceIdentifiers");
var AbstractObfuscatingReplacer_1 = require("../AbstractObfuscatingReplacer");
var Nodes_1 = require("../../../../node/Nodes");
var BaseIdentifierObfuscatingReplacer = function (_AbstractObfuscatingR) {
    _inherits(BaseIdentifierObfuscatingReplacer, _AbstractObfuscatingR);

    function BaseIdentifierObfuscatingReplacer(randomGenerator, options) {
        _classCallCheck(this, BaseIdentifierObfuscatingReplacer);

        var _this = _possibleConstructorReturn(this, (BaseIdentifierObfuscatingReplacer.__proto__ || Object.getPrototypeOf(BaseIdentifierObfuscatingReplacer)).call(this, options));

        _this.namesMap = new Map();
        _this.randomGenerator = randomGenerator;
        return _this;
    }

    _createClass(BaseIdentifierObfuscatingReplacer, [{
        key: "replace",
        value: function replace(nodeValue, nodeIdentifier) {
            var mapKey = nodeValue + "-" + String(nodeIdentifier);
            if (this.namesMap.has(mapKey)) {
                nodeValue = this.namesMap.get(mapKey);
            }
            return Nodes_1.Nodes.getIdentifierNode(nodeValue);
        }
    }, {
        key: "storeNames",
        value: function storeNames(nodeName, nodeIdentifier) {
            if (!this.isReservedName(nodeName)) {
                this.namesMap.set(nodeName + "-" + String(nodeIdentifier), this.randomGenerator.getRandomVariableName(6));
            }
        }
    }, {
        key: "isReservedName",
        value: function isReservedName(name) {
            return this.options.reservedNames.some(function (reservedName) {
                return new RegExp(reservedName, 'g').exec(name) !== null;
            });
        }
    }]);

    return BaseIdentifierObfuscatingReplacer;
}(AbstractObfuscatingReplacer_1.AbstractObfuscatingReplacer);
BaseIdentifierObfuscatingReplacer = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Object, Object])], BaseIdentifierObfuscatingReplacer);
exports.BaseIdentifierObfuscatingReplacer = BaseIdentifierObfuscatingReplacer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUlkZW50aWZpZXJPYmZ1c2NhdGluZ1JlcGxhY2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL25vZGUtdHJhbnNmb3JtZXJzL29iZnVzY2F0aW5nLXRyYW5zZm9ybWVycy9vYmZ1c2NhdGluZy1yZXBsYWNlcnMvaWRlbnRpZmllci1vYmZ1c2NhdGluZy1yZXBsYWNlcnMvQmFzZUlkZW50aWZpZXJPYmZ1c2NhdGluZ1JlcGxhY2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDBCQUErQztBQUMvQyxtQ0FBOEU7QUFROUUsNENBQTZFO0FBQzdFLHNCQUErQztBQUcvQztBQUFBLEFBQWEsQUFBaUMsQUFBQzs7QUFlM0MsK0NBQ2lELEFBQWlDLGlCQUN6QyxBQUFpQjtBQUV0RCxBQUFLOzswS0FBQyxBQUFPLEFBQUMsQUFBQzs7QUFmRixjQUFRLFdBQXdCLElBQUksQUFBRyxBQUFFLEFBQUM7QUFpQnZELEFBQUksY0FBQyxBQUFlLGtCQUFHLEFBQWUsQUFBQyxBQUMzQzs7QUFBQyxBQU9NLEFBQU87Ozs7Z0NBQUUsQUFBaUIsV0FBRSxBQUFzQjtBQUNyRCxnQkFBTSxBQUFNLEFBQVcsU0FBRyxBQUFTLGtCQUFJLEFBQU0sT0FBQyxBQUFjLEFBQUMsQUFBRSxBQUFDO0FBRWhFLEFBQUUsQUFBQyxnQkFBQyxBQUFJLEtBQUMsQUFBUSxTQUFDLEFBQUcsSUFBQyxBQUFNLEFBQUMsQUFBQyxTQUFDLEFBQUM7QUFDNUIsQUFBUyw0QkFBVyxBQUFJLEtBQUMsQUFBUSxTQUFDLEFBQUcsSUFBQyxBQUFNLEFBQUMsQUFBQyxBQUNsRDtBQUFDO0FBRUQsQUFBTSxtQkFBQyxRQUFLLE1BQUMsQUFBaUIsa0JBQUMsQUFBUyxBQUFDLEFBQUMsQUFDOUM7QUFBQyxBQVNNLEFBQVU7OzttQ0FBRSxBQUFnQixVQUFFLEFBQXNCO0FBQ3ZELEFBQUUsQUFBQyxnQkFBQyxDQUFDLEFBQUksS0FBQyxBQUFjLGVBQUMsQUFBUSxBQUFDLEFBQUMsV0FBQyxBQUFDO0FBQ2pDLEFBQUkscUJBQUMsQUFBUSxTQUFDLEFBQUcsQUFBQyxJQUFHLEFBQVEsaUJBQUksQUFBTSxPQUFDLEFBQWMsQUFBQyxBQUFFLGlCQUFFLEFBQUksS0FBQyxBQUFlLGdCQUFDLEFBQXFCLHNCQUFDLEFBQUMsQUFBQyxBQUFDLEFBQUMsQUFDOUc7QUFBQyxBQUNMO0FBQUMsQUFNTyxBQUFjOzs7dUNBQUUsQUFBWTtBQUNoQyxBQUFNLHdCQUFNLEFBQU8sUUFBQyxBQUFhLGNBQzVCLEFBQUksS0FBQyxVQUFDLEFBQW9CO0FBQ3ZCLEFBQU0sdUJBQUMsSUFBSSxBQUFNLE9BQUMsQUFBWSxjQUFFLEFBQUcsQUFBQyxLQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsVUFBSyxBQUFJLEFBQUMsQUFDN0Q7QUFBQyxBQUFDLEFBQUMsQUFDWCxhQUpXLEFBQUk7QUFJZCxBQUNKOzs7O0VBOURzRCw4QkFBMkI7QUFBckUsQUFBaUMsd0RBRDdDLFlBQVUsQUFBRSxjQWlCSixtQkFBQSxZQUFNLE9BQUMscUJBQWtCLG1CQUFDLEFBQWdCLEFBQUMsb0JBQzNDLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBUSxBQUFDLHdFQWpCL0IsQUFBaUMsQUE4RDdDO0FBOURZLDRDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdGFibGUsIGluamVjdCB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBTZXJ2aWNlSWRlbnRpZmllcnMgfSBmcm9tICcuLi8uLi8uLi8uLi9jb250YWluZXIvU2VydmljZUlkZW50aWZpZXJzJztcblxuaW1wb3J0ICogYXMgRVNUcmVlIGZyb20gJ2VzdHJlZSc7XG5cbmltcG9ydCB7IElJZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlciB9IGZyb20gJy4uLy4uLy4uLy4uL2ludGVyZmFjZXMvbm9kZS10cmFuc2Zvcm1lcnMvb2JmdXNjYXRpbmctdHJhbnNmb3JtZXJzL0lJZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlcic7XG5pbXBvcnQgeyBJT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL2ludGVyZmFjZXMvb3B0aW9ucy9JT3B0aW9ucyc7XG5pbXBvcnQgeyBJUmFuZG9tR2VuZXJhdG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vaW50ZXJmYWNlcy91dGlscy9JUmFuZG9tR2VuZXJhdG9yJztcblxuaW1wb3J0IHsgQWJzdHJhY3RPYmZ1c2NhdGluZ1JlcGxhY2VyIH0gZnJvbSAnLi4vQWJzdHJhY3RPYmZ1c2NhdGluZ1JlcGxhY2VyJztcbmltcG9ydCB7IE5vZGVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vbm9kZS9Ob2Rlcyc7XG5cbkBpbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCYXNlSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXIgZXh0ZW5kcyBBYnN0cmFjdE9iZnVzY2F0aW5nUmVwbGFjZXIgaW1wbGVtZW50cyBJSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXIge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLCBzdHJpbmc+fVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbmFtZXNNYXA6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SVJhbmRvbUdlbmVyYXRvcn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHJhbmRvbUdlbmVyYXRvcjogSVJhbmRvbUdlbmVyYXRvcjtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SVJhbmRvbUdlbmVyYXRvcn0gcmFuZG9tR2VuZXJhdG9yXG4gICAgICogQHBhcmFtIHtJT3B0aW9uc30gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuSVJhbmRvbUdlbmVyYXRvcikgcmFuZG9tR2VuZXJhdG9yOiBJUmFuZG9tR2VuZXJhdG9yLFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JT3B0aW9ucykgb3B0aW9uczogSU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5yYW5kb21HZW5lcmF0b3IgPSByYW5kb21HZW5lcmF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5vZGVWYWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBub2RlSWRlbnRpZmllclxuICAgICAqIEByZXR1cm5zIHtJZGVudGlmaWVyfVxuICAgICAqL1xuICAgIHB1YmxpYyByZXBsYWNlIChub2RlVmFsdWU6IHN0cmluZywgbm9kZUlkZW50aWZpZXI6IG51bWJlcik6IEVTVHJlZS5JZGVudGlmaWVyIHtcbiAgICAgICAgY29uc3QgbWFwS2V5OiBzdHJpbmcgPSBgJHtub2RlVmFsdWV9LSR7U3RyaW5nKG5vZGVJZGVudGlmaWVyKX1gO1xuXG4gICAgICAgIGlmICh0aGlzLm5hbWVzTWFwLmhhcyhtYXBLZXkpKSB7XG4gICAgICAgICAgICBub2RlVmFsdWUgPSA8c3RyaW5nPnRoaXMubmFtZXNNYXAuZ2V0KG1hcEtleSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gTm9kZXMuZ2V0SWRlbnRpZmllck5vZGUobm9kZVZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9yZSBhbGwgYG5vZGVJZGVudGlmaWVyYCdzIGFzIGtleXMgaW4gZ2l2ZW4gYG5hbWVzTWFwYCB3aXRoIHJhbmRvbSBuYW1lcyBhcyB2YWx1ZS5cbiAgICAgKiBSZXNlcnZlZCBuYW1lcyB3aWxsIGJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbm9kZU5hbWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbm9kZUlkZW50aWZpZXJcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RvcmVOYW1lcyAobm9kZU5hbWU6IHN0cmluZywgbm9kZUlkZW50aWZpZXI6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuaXNSZXNlcnZlZE5hbWUobm9kZU5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWVzTWFwLnNldChgJHtub2RlTmFtZX0tJHtTdHJpbmcobm9kZUlkZW50aWZpZXIpfWAsIHRoaXMucmFuZG9tR2VuZXJhdG9yLmdldFJhbmRvbVZhcmlhYmxlTmFtZSg2KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIHByaXZhdGUgaXNSZXNlcnZlZE5hbWUgKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJlc2VydmVkTmFtZXNcbiAgICAgICAgICAgIC5zb21lKChyZXNlcnZlZE5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHJlc2VydmVkTmFtZSwgJ2cnKS5leGVjKG5hbWUpICE9PSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuIl19