"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../container/ServiceIdentifiers");
var estraverse = require("estraverse");
var IdentifierObfuscatingReplacer_1 = require("../../enums/container/node-transformers/IdentifierObfuscatingReplacer");
var AbstractNodeTransformer_1 = require("../AbstractNodeTransformer");
var Node_1 = require("../../node/Node");
var FunctionTransformer = function (_AbstractNodeTransfor) {
    _inherits(FunctionTransformer, _AbstractNodeTransfor);

    function FunctionTransformer(identifierObfuscatingReplacerFactory, randomGenerator, options) {
        _classCallCheck(this, FunctionTransformer);

        var _this = _possibleConstructorReturn(this, (FunctionTransformer.__proto__ || Object.getPrototypeOf(FunctionTransformer)).call(this, randomGenerator, options));

        _this.identifierObfuscatingReplacer = identifierObfuscatingReplacerFactory(IdentifierObfuscatingReplacer_1.IdentifierObfuscatingReplacer.BaseIdentifierObfuscatingReplacer);
        return _this;
    }

    _createClass(FunctionTransformer, [{
        key: "getVisitor",
        value: function getVisitor() {
            var _this2 = this;

            return {
                enter: function enter(node, parentNode) {
                    if (Node_1.Node.isFunctionDeclarationNode(node) || Node_1.Node.isFunctionExpressionNode(node) || Node_1.Node.isArrowFunctionExpressionNode(node)) {
                        return _this2.transformNode(node, parentNode);
                    }
                }
            };
        }
    }, {
        key: "transformNode",
        value: function transformNode(functionNode, parentNode) {
            var nodeIdentifier = this.nodeIdentifier++;
            this.storeFunctionParams(functionNode, nodeIdentifier);
            this.replaceFunctionParams(functionNode, nodeIdentifier);
            return functionNode;
        }
    }, {
        key: "storeFunctionParams",
        value: function storeFunctionParams(functionNode, nodeIdentifier) {
            var _this3 = this;

            functionNode.params.forEach(function (paramsNode) {
                if (Node_1.Node.isObjectPatternNode(paramsNode)) {
                    return estraverse.VisitorOption.Skip;
                }
                estraverse.traverse(paramsNode, {
                    enter: function enter(node) {
                        if (Node_1.Node.isAssignmentPatternNode(node) && Node_1.Node.isIdentifierNode(node.left)) {
                            _this3.identifierObfuscatingReplacer.storeNames(node.left.name, nodeIdentifier);
                            return estraverse.VisitorOption.Skip;
                        }
                        if (Node_1.Node.isIdentifierNode(node)) {
                            _this3.identifierObfuscatingReplacer.storeNames(node.name, nodeIdentifier);
                        }
                    }
                });
            });
        }
    }, {
        key: "replaceFunctionParams",
        value: function replaceFunctionParams(functionNode, nodeIdentifier) {
            var _this4 = this;

            var replaceVisitor = {
                enter: function enter(node, parentNode) {
                    if (Node_1.Node.isReplaceableIdentifierNode(node, parentNode)) {
                        var newIdentifier = _this4.identifierObfuscatingReplacer.replace(node.name, nodeIdentifier);
                        var newIdentifierName = newIdentifier.name;
                        if (node.name !== newIdentifierName) {
                            node.name = newIdentifierName;
                            node.obfuscatedNode = true;
                        }
                    }
                }
            };
            functionNode.params.forEach(function (paramsNode) {
                return estraverse.replace(paramsNode, replaceVisitor);
            });
            estraverse.replace(functionNode.body, replaceVisitor);
        }
    }]);

    return FunctionTransformer;
}(AbstractNodeTransformer_1.AbstractNodeTransformer);
FunctionTransformer = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.Factory__IIdentifierObfuscatingReplacer)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(2, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Function, Object, Object])], FunctionTransformer);
exports.FunctionTransformer = FunctionTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVuY3Rpb25UcmFuc2Zvcm1lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ub2RlLXRyYW5zZm9ybWVycy9vYmZ1c2NhdGluZy10cmFuc2Zvcm1lcnMvRnVuY3Rpb25UcmFuc2Zvcm1lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSwwQkFBK0M7QUFDL0MsbUNBQXdFO0FBRXhFLHlCQUF5QztBQVV6Qyw4Q0FBc0g7QUFFdEgsd0NBQXFFO0FBQ3JFLHFCQUF1QztBQVd2QztBQUFBLEFBQWEsQUFBbUIsQUFBQzs7QUFXN0IsaUNBRVEsQUFBMkUsc0NBQ2xDLEFBQWlDLGlCQUN6QyxBQUFpQjtBQUV0RCxBQUFLOzs4SUFBQyxBQUFlLGlCQUFFLEFBQU8sQUFBQyxBQUFDOztBQUVoQyxBQUFJLGNBQUMsQUFBNkIsZ0NBQUcsQUFBb0MscUNBQ3JFLGdDQUE2Qiw4QkFBQyxBQUFpQyxBQUNsRSxBQUFDLEFBQ047O0FBQUMsQUFLTSxBQUFVOzs7Ozs7O0FBQ2IsQUFBTTtBQUNGLEFBQUssdUJBQUUsZUFBQyxBQUFpQixNQUFFLEFBQXVCO0FBQzlDLEFBQUUsQUFBQyx3QkFDQyxPQUFJLEtBQUMsQUFBeUIsMEJBQUMsQUFBSSxBQUFDLFNBQ3BDLE9BQUksS0FBQyxBQUF3Qix5QkFBQyxBQUFJLEFBQUMsU0FDbkMsT0FBSSxLQUFDLEFBQTZCLDhCQUFDLEFBQUksQUFDM0MsQUFBQyxPQUFDLEFBQUM7QUFDQyxBQUFNLCtCQUFDLEFBQUksT0FBQyxBQUFhLGNBQUMsQUFBSSxNQUFFLEFBQVUsQUFBQyxBQUFDLEFBQ2hEO0FBQUMsQUFDTDtBQUFDLEFBQ0osQUFBQyxBQUNOO0FBWFc7QUFXVixBQU9NLEFBQWE7OztzQ0FBRSxBQUE2QixjQUFFLEFBQXVCO0FBQ3hFLGdCQUFNLEFBQWMsaUJBQVcsQUFBSSxLQUFDLEFBQWMsQUFBRSxBQUFDO0FBRXJELEFBQUksaUJBQUMsQUFBbUIsb0JBQUMsQUFB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amVjdCB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBTZXJ2aWNlSWRlbnRpZmllcnMgfSBmcm9tICcuLi8uLi9jb250YWluZXIvU2VydmljZUlkZW50aWZpZXJzJztcblxuaW1wb3J0ICogYXMgZXN0cmF2ZXJzZSBmcm9tICdlc3RyYXZlcnNlJztcbmltcG9ydCAqIGFzIEVTVHJlZSBmcm9tICdlc3RyZWUnO1xuXG5pbXBvcnQgeyBUSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXJGYWN0b3J5IH0gZnJvbSAnLi4vLi4vdHlwZXMvY29udGFpbmVyL25vZGUtdHJhbnNmb3JtZXJzL1RJZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlckZhY3RvcnknO1xuXG5pbXBvcnQgeyBJSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXIgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL25vZGUtdHJhbnNmb3JtZXJzL29iZnVzY2F0aW5nLXRyYW5zZm9ybWVycy9JSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXInO1xuaW1wb3J0IHsgSU9wdGlvbnMgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL29wdGlvbnMvSU9wdGlvbnMnO1xuaW1wb3J0IHsgSVJhbmRvbUdlbmVyYXRvciB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvdXRpbHMvSVJhbmRvbUdlbmVyYXRvcic7XG5pbXBvcnQgeyBJVmlzaXRvciB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvSVZpc2l0b3InO1xuXG5pbXBvcnQgeyBJZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlciB9IGZyb20gJy4uLy4uL2VudW1zL2NvbnRhaW5lci9ub2RlLXRyYW5zZm9ybWVycy9JZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlcic7XG5cbmltcG9ydCB7IEFic3RyYWN0Tm9kZVRyYW5zZm9ybWVyIH0gZnJvbSAnLi4vQWJzdHJhY3ROb2RlVHJhbnNmb3JtZXInO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uL25vZGUvTm9kZSc7XG5cbi8qKlxuICogcmVwbGFjZXM6XG4gKiAgICAgZnVuY3Rpb24gZm9vIChhcmd1bWVudDEpIHsgcmV0dXJuIGFyZ3VtZW50MTsgfTtcbiAqXG4gKiBvbjpcbiAqICAgICBmdW5jdGlvbiBmb28gKF8weDEyZDQ1ZikgeyByZXR1cm4gXzB4MTJkNDVmOyB9O1xuICpcbiAqL1xuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uVHJhbnNmb3JtZXIgZXh0ZW5kcyBBYnN0cmFjdE5vZGVUcmFuc2Zvcm1lciB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0lJZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlcn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGlkZW50aWZpZXJPYmZ1c2NhdGluZ1JlcGxhY2VyOiBJSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXI7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RJZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlckZhY3Rvcnl9IGlkZW50aWZpZXJPYmZ1c2NhdGluZ1JlcGxhY2VyRmFjdG9yeVxuICAgICAqIEBwYXJhbSB7SVJhbmRvbUdlbmVyYXRvcn0gcmFuZG9tR2VuZXJhdG9yXG4gICAgICogQHBhcmFtIHtJT3B0aW9uc30gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuRmFjdG9yeV9fSUlkZW50aWZpZXJPYmZ1c2NhdGluZ1JlcGxhY2VyKVxuICAgICAgICAgICAgaWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXJGYWN0b3J5OiBUSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXJGYWN0b3J5LFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JUmFuZG9tR2VuZXJhdG9yKSByYW5kb21HZW5lcmF0b3I6IElSYW5kb21HZW5lcmF0b3IsXG4gICAgICAgIEBpbmplY3QoU2VydmljZUlkZW50aWZpZXJzLklPcHRpb25zKSBvcHRpb25zOiBJT3B0aW9uc1xuICAgICkge1xuICAgICAgICBzdXBlcihyYW5kb21HZW5lcmF0b3IsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuaWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXIgPSBpZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlckZhY3RvcnkoXG4gICAgICAgICAgICBJZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlci5CYXNlSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXJcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtJVmlzaXRvcn1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VmlzaXRvciAoKTogSVZpc2l0b3Ige1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW50ZXI6IChub2RlOiBFU1RyZWUuTm9kZSwgcGFyZW50Tm9kZTogRVNUcmVlLk5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIE5vZGUuaXNGdW5jdGlvbkRlY2xhcmF0aW9uTm9kZShub2RlKSB8fFxuICAgICAgICAgICAgICAgICAgICBOb2RlLmlzRnVuY3Rpb25FeHByZXNzaW9uTm9kZShub2RlKSB8fFxuICAgICAgICAgICAgICAgICAgICBOb2RlLmlzQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25Ob2RlKG5vZGUpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybU5vZGUobm9kZSwgcGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmN0aW9uTm9kZVxuICAgICAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50Tm9kZVxuICAgICAqIEByZXR1cm5zIHtOb2RlfVxuICAgICAqL1xuICAgIHB1YmxpYyB0cmFuc2Zvcm1Ob2RlIChmdW5jdGlvbk5vZGU6IEVTVHJlZS5GdW5jdGlvbiwgcGFyZW50Tm9kZTogRVNUcmVlLk5vZGUpOiBFU1RyZWUuTm9kZSB7XG4gICAgICAgIGNvbnN0IG5vZGVJZGVudGlmaWVyOiBudW1iZXIgPSB0aGlzLm5vZGVJZGVudGlmaWVyKys7XG5cbiAgICAgICAgdGhpcy5zdG9yZUZ1bmN0aW9uUGFyYW1zKGZ1bmN0aW9uTm9kZSwgbm9kZUlkZW50aWZpZXIpO1xuICAgICAgICB0aGlzLnJlcGxhY2VGdW5jdGlvblBhcmFtcyhmdW5jdGlvbk5vZGUsIG5vZGVJZGVudGlmaWVyKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb25Ob2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmN0aW9uTm9kZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBub2RlSWRlbnRpZmllclxuICAgICAqL1xuICAgIHByaXZhdGUgc3RvcmVGdW5jdGlvblBhcmFtcyAoZnVuY3Rpb25Ob2RlOiBFU1RyZWUuRnVuY3Rpb24sIG5vZGVJZGVudGlmaWVyOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgZnVuY3Rpb25Ob2RlLnBhcmFtc1xuICAgICAgICAgICAgLmZvckVhY2goKHBhcmFtc05vZGU6IEVTVHJlZS5Ob2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKE5vZGUuaXNPYmplY3RQYXR0ZXJuTm9kZShwYXJhbXNOb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXN0cmF2ZXJzZS5WaXNpdG9yT3B0aW9uLlNraXA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXN0cmF2ZXJzZS50cmF2ZXJzZShwYXJhbXNOb2RlLCB7XG4gICAgICAgICAgICAgICAgICAgIGVudGVyOiAobm9kZTogRVNUcmVlLk5vZGUpOiBhbnkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE5vZGUuaXNBc3NpZ25tZW50UGF0dGVybk5vZGUobm9kZSkgJiYgTm9kZS5pc0lkZW50aWZpZXJOb2RlKG5vZGUubGVmdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlkZW50aWZpZXJPYmZ1c2NhdGluZ1JlcGxhY2VyLnN0b3JlTmFtZXMobm9kZS5sZWZ0Lm5hbWUsIG5vZGVJZGVudGlmaWVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlc3RyYXZlcnNlLlZpc2l0b3JPcHRpb24uU2tpcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE5vZGUuaXNJZGVudGlmaWVyTm9kZShub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXIuc3RvcmVOYW1lcyhub2RlLm5hbWUsIG5vZGVJZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3Rpb25Ob2RlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG5vZGVJZGVudGlmaWVyXG4gICAgICovXG4gICAgcHJpdmF0ZSByZXBsYWNlRnVuY3Rpb25QYXJhbXMgKGZ1bmN0aW9uTm9kZTogRVNUcmVlLkZ1bmN0aW9uLCBub2RlSWRlbnRpZmllcjogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHJlcGxhY2VWaXNpdG9yOiBlc3RyYXZlcnNlLlZpc2l0b3IgPSB7XG4gICAgICAgICAgICBlbnRlcjogKG5vZGU6IEVTVHJlZS5Ob2RlLCBwYXJlbnROb2RlOiBFU1RyZWUuTm9kZSk6IGFueSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKE5vZGUuaXNSZXBsYWNlYWJsZUlkZW50aWZpZXJOb2RlKG5vZGUsIHBhcmVudE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0lkZW50aWZpZXI6IEVTVHJlZS5JZGVudGlmaWVyID0gdGhpcy5pZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlci5yZXBsYWNlKG5vZGUubmFtZSwgbm9kZUlkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdJZGVudGlmaWVyTmFtZTogc3RyaW5nID0gbmV3SWRlbnRpZmllci5uYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5hbWUgIT09IG5ld0lkZW50aWZpZXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLm5hbWUgPSBuZXdJZGVudGlmaWVyTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUub2JmdXNjYXRlZE5vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uTm9kZS5wYXJhbXMuZm9yRWFjaCgocGFyYW1zTm9kZTogRVNUcmVlLk5vZGUpID0+IGVzdHJhdmVyc2UucmVwbGFjZShwYXJhbXNOb2RlLCByZXBsYWNlVmlzaXRvcikpO1xuXG4gICAgICAgIGVzdHJhdmVyc2UucmVwbGFjZShmdW5jdGlvbk5vZGUuYm9keSwgcmVwbGFjZVZpc2l0b3IpO1xuICAgIH1cbn1cbiJdfQ==