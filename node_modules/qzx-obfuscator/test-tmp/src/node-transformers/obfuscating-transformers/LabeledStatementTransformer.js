"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../container/ServiceIdentifiers");
var estraverse = require("estraverse");
var IdentifierObfuscatingReplacer_1 = require("../../enums/container/node-transformers/IdentifierObfuscatingReplacer");
var AbstractNodeTransformer_1 = require("../AbstractNodeTransformer");
var Node_1 = require("../../node/Node");
var LabeledStatementTransformer = function (_AbstractNodeTransfor) {
    _inherits(LabeledStatementTransformer, _AbstractNodeTransfor);

    function LabeledStatementTransformer(identifierObfuscatingReplacerFactory, randomGenerator, options) {
        _classCallCheck(this, LabeledStatementTransformer);

        var _this = _possibleConstructorReturn(this, (LabeledStatementTransformer.__proto__ || Object.getPrototypeOf(LabeledStatementTransformer)).call(this, randomGenerator, options));

        _this.identifierObfuscatingReplacer = identifierObfuscatingReplacerFactory(IdentifierObfuscatingReplacer_1.IdentifierObfuscatingReplacer.BaseIdentifierObfuscatingReplacer);
        return _this;
    }

    _createClass(LabeledStatementTransformer, [{
        key: "getVisitor",
        value: function getVisitor() {
            var _this2 = this;

            return {
                enter: function enter(node, parentNode) {
                    if (Node_1.Node.isLabeledStatementNode(node)) {
                        return _this2.transformNode(node, parentNode);
                    }
                }
            };
        }
    }, {
        key: "transformNode",
        value: function transformNode(labeledStatementNode, parentNode) {
            var nodeIdentifier = this.nodeIdentifier++;
            this.storeLabeledStatementName(labeledStatementNode, nodeIdentifier);
            this.replaceLabeledStatementName(labeledStatementNode, nodeIdentifier);
            return labeledStatementNode;
        }
    }, {
        key: "storeLabeledStatementName",
        value: function storeLabeledStatementName(labeledStatementNode, nodeIdentifier) {
            this.identifierObfuscatingReplacer.storeNames(labeledStatementNode.label.name, nodeIdentifier);
        }
    }, {
        key: "replaceLabeledStatementName",
        value: function replaceLabeledStatementName(labeledStatementNode, nodeIdentifier) {
            var _this3 = this;

            estraverse.replace(labeledStatementNode, {
                enter: function enter(node, parentNode) {
                    if (Node_1.Node.isLabelIdentifierNode(node, parentNode)) {
                        var newIdentifier = _this3.identifierObfuscatingReplacer.replace(node.name, nodeIdentifier);
                        node.name = newIdentifier.name;
                    }
                }
            });
        }
    }]);

    return LabeledStatementTransformer;
}(AbstractNodeTransformer_1.AbstractNodeTransformer);
LabeledStatementTransformer = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.Factory__IIdentifierObfuscatingReplacer)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(2, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Function, Object, Object])], LabeledStatementTransformer);
exports.LabeledStatementTransformer = LabeledStatementTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGFiZWxlZFN0YXRlbWVudFRyYW5zZm9ybWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL25vZGUtdHJhbnNmb3JtZXJzL29iZnVzY2F0aW5nLXRyYW5zZm9ybWVycy9MYWJlbGVkU3RhdGVtZW50VHJhbnNmb3JtZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsMEJBQStDO0FBQy9DLG1DQUF3RTtBQUV4RSx5QkFBeUM7QUFVekMsOENBQXNIO0FBRXRILHdDQUFxRTtBQUNyRSxxQkFBdUM7QUFtQnZDO0FBQUEsQUFBYSxBQUEyQixBQUFDOztBQVdyQyx5Q0FFUSxBQUEyRSxzQ0FDbEMsQUFBaUMsaUJBQ3pDLEFBQWlCO0FBRXRELEFBQUs7OzhKQUFDLEFBQWUsaUJBQUUsQUFBTyxBQUFDLEFBQUM7O0FBRWhDLEFBQUksY0FBQyxBQUE2QixnQ0FBRyxBQUFvQyxxQ0FDckUsZ0NBQTZCLDhCQUFDLEFBQWlDLEFBQ2xFLEFBQUMsQUFDTjs7QUFBQyxBQUtNLEFBQVU7Ozs7Ozs7QUFDYixBQUFNO0FBQ0YsQUFBSyx1QkFBRSxlQUFDLEFBQWlCLE1BQUUsQUFBdUI7QUFDOUMsQUFBRSxBQUFDLHdCQUFDLE9BQUksS0FBQyxBQUFzQix1QkFBQyxBQUFJLEFBQUMsQUFBQyxPQUFDLEFBQUM7QUFDcEMsQUFBTSwrQkFBQyxBQUFJLE9BQUMsQUFBYSxjQUFDLEFBQUksTUFBRSxBQUFVLEFBQUMsQUFBQyxBQUNoRDtBQUFDLEFBQ0w7QUFBQyxBQUNKLEFBQUMsQUFDTjtBQVBXO0FBT1YsQUFPTSxBQUFhOzs7c0NBQUUsQUFBNkMsc0JBQUUsQUFBdUI7QUFDeEYsZ0JBQU0sQUFBYyxpQkFBVyxBQUFJLEtBQUMsQUFBYyxBQUFFLEFBQUM7QUFFckQsQUFBSSxpQkFBQyxBQUF5QiwwQkFBQyxBQUFvQixzQkFBRSxBQUFjLEFBQUMsQUFBQztBQUNyRSxBQUFJLGlCQUFDLEFBQTJCLDRCQUFDLEFBQW9CLHNCQUFFLEFBQWMsQUFBQyxBQUFDO0FBRXZFLEFBQU0sbUJBQUMsQUFBb0IsQUFBQyxBQUNoQztBQUFDLEFBTU8sQUFBeUI7OztrREFBRSxBQUE2QyxzQkFBRSxBQUFzQjtBQUNwRyxBQUFJLGlCQUFDLEFBQTZCLDhCQUFDLEFBQVUsV0FBQyxBQUFvQixxQkFBQyxBQUFLLE1BQUMsQUFBSSxNQUFFLEFBQWMsQUFBQyxBQUFDLEFBQ25HO0FBQUMsQUFNTyxBQUEyQjs7O29EQUFFLEFBQTZDLHNCQUFFLEFBQXNCOzs7QUFDdEcsQUFBVSx1QkFBQyxBQUFPLFFBQUMsQUFBb0I7QUFDbkMsQUFBSyx1QkFBRSxlQUFDLEFBQWlCLE1BQUUsQUFBdUI7QUFDOUMsQUFBRSxBQUFDLHdCQUFDLE9BQUksS0FBQyxBQUFxQixzQkFBQyxBQUFJLE1BQUUsQUFBVSxBQUFDLEFBQUMsYUFBQyxBQUFDO0FBQy9DLDRCQUFNLEFBQWEsZ0JBQXNCLEFBQUksT0FBQyxBQUE2Qiw4QkFBQyxBQUFPLFFBQUMsQUFBSSxLQUFDLEFBQUksTUFBRSxBQUFjLEFBQUMsQUFBQztBQUUvRyxBQUFJLDZCQUFDLEFBQUksT0FBRyxBQUFhLGNBQUMsQUFBSSxBQUFDLEFBQ25DO0FBQUMsQUFDTDtBQUFDLEFBQ0osQUFBQyxBQUFDLEFBQ1A7QUFUNkM7QUFTNUMsQUFDSjs7OztFQTFFZ0QsMEJBQXVCO0FBQTNELEFBQTJCLGtEQUR2QyxZQUFVLEFBQUUsY0FhSixtQkFBQSxZQUFNLE9BQUMscUJBQWtCLG1CQUFDLEFBQXVDLEFBQUMsMkNBRWxFLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBZ0IsQUFBQyxvQkFDM0MsbUJBQUEsWUFBTSxPQUFDLHFCQUFrQixtQkFBQyxBQUFRLEFBQUMsa0ZBZi9CLEFBQTJCLEFBMEV2QztBQTFFWSxzQ0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3RhYmxlLCBpbmplY3QgfSBmcm9tICdpbnZlcnNpZnknO1xuaW1wb3J0IHsgU2VydmljZUlkZW50aWZpZXJzIH0gZnJvbSAnLi4vLi4vY29udGFpbmVyL1NlcnZpY2VJZGVudGlmaWVycyc7XG5cbmltcG9ydCAqIGFzIGVzdHJhdmVyc2UgZnJvbSAnZXN0cmF2ZXJzZSc7XG5pbXBvcnQgKiBhcyBFU1RyZWUgZnJvbSAnZXN0cmVlJztcblxuaW1wb3J0IHsgVElkZW50aWZpZXJPYmZ1c2NhdGluZ1JlcGxhY2VyRmFjdG9yeSB9IGZyb20gJy4uLy4uL3R5cGVzL2NvbnRhaW5lci9ub2RlLXRyYW5zZm9ybWVycy9USWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXJGYWN0b3J5JztcblxuaW1wb3J0IHsgSUlkZW50aWZpZXJPYmZ1c2NhdGluZ1JlcGxhY2VyIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9ub2RlLXRyYW5zZm9ybWVycy9vYmZ1c2NhdGluZy10cmFuc2Zvcm1lcnMvSUlkZW50aWZpZXJPYmZ1c2NhdGluZ1JlcGxhY2VyJztcbmltcG9ydCB7IElPcHRpb25zIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9vcHRpb25zL0lPcHRpb25zJztcbmltcG9ydCB7IElSYW5kb21HZW5lcmF0b3IgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3V0aWxzL0lSYW5kb21HZW5lcmF0b3InO1xuaW1wb3J0IHsgSVZpc2l0b3IgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL0lWaXNpdG9yJztcblxuaW1wb3J0IHsgSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXIgfSBmcm9tICcuLi8uLi9lbnVtcy9jb250YWluZXIvbm9kZS10cmFuc2Zvcm1lcnMvSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXInO1xuXG5pbXBvcnQgeyBBYnN0cmFjdE5vZGVUcmFuc2Zvcm1lciB9IGZyb20gJy4uL0Fic3RyYWN0Tm9kZVRyYW5zZm9ybWVyJztcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi9ub2RlL05vZGUnO1xuXG4vKipcbiAqIHJlcGxhY2VzOlxuICogICAgIGxhYmVsOiB7XG4gKiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEwMDA7IGkrKykge1xuICogICAgICAgICAgICAgIGJyZWFrIGxhYmVsO1xuICogICAgICAgICAgfVxuICogICAgIH1cbiAqXG4gKiBvbjpcbiAqICAgICBfMHgxMmQ0NWY6IHtcbiAqICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTAwMDsgaSsrKSB7XG4gKiAgICAgICAgICAgICAgYnJlYWsgXzB4MTJkNDVmO1xuICogICAgICAgICAgfVxuICogICAgIH1cbiAqXG4gKi9cbkBpbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMYWJlbGVkU3RhdGVtZW50VHJhbnNmb3JtZXIgZXh0ZW5kcyBBYnN0cmFjdE5vZGVUcmFuc2Zvcm1lciB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0lJZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlcn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGlkZW50aWZpZXJPYmZ1c2NhdGluZ1JlcGxhY2VyOiBJSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXI7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RJZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlckZhY3Rvcnl9IGlkZW50aWZpZXJPYmZ1c2NhdGluZ1JlcGxhY2VyRmFjdG9yeVxuICAgICAqIEBwYXJhbSB7SVJhbmRvbUdlbmVyYXRvcn0gcmFuZG9tR2VuZXJhdG9yXG4gICAgICogQHBhcmFtIHtJT3B0aW9uc30gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuRmFjdG9yeV9fSUlkZW50aWZpZXJPYmZ1c2NhdGluZ1JlcGxhY2VyKVxuICAgICAgICAgICAgaWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXJGYWN0b3J5OiBUSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXJGYWN0b3J5LFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JUmFuZG9tR2VuZXJhdG9yKSByYW5kb21HZW5lcmF0b3I6IElSYW5kb21HZW5lcmF0b3IsXG4gICAgICAgIEBpbmplY3QoU2VydmljZUlkZW50aWZpZXJzLklPcHRpb25zKSBvcHRpb25zOiBJT3B0aW9uc1xuICAgICkge1xuICAgICAgICBzdXBlcihyYW5kb21HZW5lcmF0b3IsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuaWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXIgPSBpZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlckZhY3RvcnkoXG4gICAgICAgICAgICBJZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlci5CYXNlSWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXJcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtJVmlzaXRvcn1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VmlzaXRvciAoKTogSVZpc2l0b3Ige1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW50ZXI6IChub2RlOiBFU1RyZWUuTm9kZSwgcGFyZW50Tm9kZTogRVNUcmVlLk5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoTm9kZS5pc0xhYmVsZWRTdGF0ZW1lbnROb2RlKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybU5vZGUobm9kZSwgcGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TGFiZWxlZFN0YXRlbWVudH0gbGFiZWxlZFN0YXRlbWVudE5vZGVcbiAgICAgKiBAcGFyYW0ge05vZGV9IHBhcmVudE5vZGVcbiAgICAgKiBAcmV0dXJucyB7Tm9kZX1cbiAgICAgKi9cbiAgICBwdWJsaWMgdHJhbnNmb3JtTm9kZSAobGFiZWxlZFN0YXRlbWVudE5vZGU6IEVTVHJlZS5MYWJlbGVkU3RhdGVtZW50LCBwYXJlbnROb2RlOiBFU1RyZWUuTm9kZSk6IEVTVHJlZS5Ob2RlIHtcbiAgICAgICAgY29uc3Qgbm9kZUlkZW50aWZpZXI6IG51bWJlciA9IHRoaXMubm9kZUlkZW50aWZpZXIrKztcblxuICAgICAgICB0aGlzLnN0b3JlTGFiZWxlZFN0YXRlbWVudE5hbWUobGFiZWxlZFN0YXRlbWVudE5vZGUsIG5vZGVJZGVudGlmaWVyKTtcbiAgICAgICAgdGhpcy5yZXBsYWNlTGFiZWxlZFN0YXRlbWVudE5hbWUobGFiZWxlZFN0YXRlbWVudE5vZGUsIG5vZGVJZGVudGlmaWVyKTtcblxuICAgICAgICByZXR1cm4gbGFiZWxlZFN0YXRlbWVudE5vZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtMYWJlbGVkU3RhdGVtZW50fSBsYWJlbGVkU3RhdGVtZW50Tm9kZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBub2RlSWRlbnRpZmllclxuICAgICAqL1xuICAgIHByaXZhdGUgc3RvcmVMYWJlbGVkU3RhdGVtZW50TmFtZSAobGFiZWxlZFN0YXRlbWVudE5vZGU6IEVTVHJlZS5MYWJlbGVkU3RhdGVtZW50LCBub2RlSWRlbnRpZmllcjogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllck9iZnVzY2F0aW5nUmVwbGFjZXIuc3RvcmVOYW1lcyhsYWJlbGVkU3RhdGVtZW50Tm9kZS5sYWJlbC5uYW1lLCBub2RlSWRlbnRpZmllcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtMYWJlbGVkU3RhdGVtZW50fSBsYWJlbGVkU3RhdGVtZW50Tm9kZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBub2RlSWRlbnRpZmllclxuICAgICAqL1xuICAgIHByaXZhdGUgcmVwbGFjZUxhYmVsZWRTdGF0ZW1lbnROYW1lIChsYWJlbGVkU3RhdGVtZW50Tm9kZTogRVNUcmVlLkxhYmVsZWRTdGF0ZW1lbnQsIG5vZGVJZGVudGlmaWVyOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgZXN0cmF2ZXJzZS5yZXBsYWNlKGxhYmVsZWRTdGF0ZW1lbnROb2RlLCB7XG4gICAgICAgICAgICBlbnRlcjogKG5vZGU6IEVTVHJlZS5Ob2RlLCBwYXJlbnROb2RlOiBFU1RyZWUuTm9kZSk6IGFueSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKE5vZGUuaXNMYWJlbElkZW50aWZpZXJOb2RlKG5vZGUsIHBhcmVudE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0lkZW50aWZpZXI6IEVTVHJlZS5JZGVudGlmaWVyID0gdGhpcy5pZGVudGlmaWVyT2JmdXNjYXRpbmdSZXBsYWNlci5yZXBsYWNlKG5vZGUubmFtZSwgbm9kZUlkZW50aWZpZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIG5vZGUubmFtZSA9IG5ld0lkZW50aWZpZXIubmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==