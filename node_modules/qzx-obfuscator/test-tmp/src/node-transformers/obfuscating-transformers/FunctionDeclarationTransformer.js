"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../container/ServiceIdentifiers");
var estraverse = require("estraverse");
var IdentifierObfuscatingReplacer_1 = require("../../enums/container/node-transformers/IdentifierObfuscatingReplacer");
var NodeType_1 = require("../../enums/NodeType");
var AbstractNodeTransformer_1 = require("../AbstractNodeTransformer");
var Node_1 = require("../../node/Node");
var NodeUtils_1 = require("../../node/NodeUtils");
var FunctionDeclarationTransformer = function (_AbstractNodeTransfor) {
    _inherits(FunctionDeclarationTransformer, _AbstractNodeTransfor);

    function FunctionDeclarationTransformer(identifierObfuscatingReplacerFactory, randomGenerator, options) {
        _classCallCheck(this, FunctionDeclarationTransformer);

        var _this = _possibleConstructorReturn(this, (FunctionDeclarationTransformer.__proto__ || Object.getPrototypeOf(FunctionDeclarationTransformer)).call(this, randomGenerator, options));

        _this.replaceableIdentifiers = new Map();
        _this.identifierObfuscatingReplacer = identifierObfuscatingReplacerFactory(IdentifierObfuscatingReplacer_1.IdentifierObfuscatingReplacer.BaseIdentifierObfuscatingReplacer);
        return _this;
    }

    _createClass(FunctionDeclarationTransformer, [{
        key: "getVisitor",
        value: function getVisitor() {
            var _this2 = this;

            return {
                enter: function enter(node, parentNode) {
                    if (Node_1.Node.isFunctionDeclarationNode(node)) {
                        return _this2.transformNode(node, parentNode);
                    }
                }
            };
        }
    }, {
        key: "transformNode",
        value: function transformNode(functionDeclarationNode, parentNode) {
            var nodeIdentifier = this.nodeIdentifier++;
            var blockScopeOfFunctionDeclarationNode = NodeUtils_1.NodeUtils.getBlockScopesOfNode(functionDeclarationNode)[0];
            if (blockScopeOfFunctionDeclarationNode.type === NodeType_1.NodeType.Program) {
                return functionDeclarationNode;
            }
            this.storeFunctionName(functionDeclarationNode, nodeIdentifier);
            if (this.replaceableIdentifiers.has(blockScopeOfFunctionDeclarationNode)) {
                this.replaceScopeCachedIdentifiers(blockScopeOfFunctionDeclarationNode, nodeIdentifier);
            } else {
                this.replaceScopeIdentifiers(blockScopeOfFunctionDeclarationNode, nodeIdentifier);
            }
            return functionDeclarationNode;
        }
    }, {
        key: "storeFunctionName",
        value: function storeFunctionName(functionDeclarationNode, nodeIdentifier) {
            this.identifierObfuscatingReplacer.storeNames(functionDeclarationNode.id.name, nodeIdentifier);
        }
    }, {
        key: "replaceScopeCachedIdentifiers",
        value: function replaceScopeCachedIdentifiers(scopeNode, nodeIdentifier) {
            var _this3 = this;

            var cachedReplaceableIdentifiers = this.replaceableIdentifiers.get(scopeNode);
            cachedReplaceableIdentifiers.forEach(function (replaceableIdentifier) {
                var newReplaceableIdentifier = _this3.identifierObfuscatingReplacer.replace(replaceableIdentifier.name, nodeIdentifier);
                replaceableIdentifier.name = newReplaceableIdentifier.name;
            });
        }
    }, {
        key: "replaceScopeIdentifiers",
        value: function replaceScopeIdentifiers(scopeNode, nodeIdentifier) {
            var _this4 = this;

            var storedReplaceableIdentifiers = [];
            estraverse.replace(scopeNode, {
                enter: function enter(node, parentNode) {
                    if (Node_1.Node.isReplaceableIdentifierNode(node, parentNode)) {
                        var newIdentifier = _this4.identifierObfuscatingReplacer.replace(node.name, nodeIdentifier);
                        var newIdentifierName = newIdentifier.name;
                        if (node.name !== newIdentifierName) {
                            node.name = newIdentifierName;
                        } else {
                            storedReplaceableIdentifiers.push(node);
                        }
                    }
                }
            });
            this.replaceableIdentifiers.set(scopeNode, storedReplaceableIdentifiers);
        }
    }]);

    return FunctionDeclarationTransformer;
}(AbstractNodeTransformer_1.AbstractNodeTransformer);
FunctionDeclarationTransformer = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.Factory__IIdentifierObfuscatingReplacer)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(2, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Function, Object, Object])], FunctionDeclarationTransformer);
exports.FunctionDeclarationTransformer = FunctionDeclarationTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,