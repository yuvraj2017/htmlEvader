"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../container/ServiceIdentifiers");
var LiteralObfuscatingReplacer_1 = require("../../enums/container/node-transformers/LiteralObfuscatingReplacer");
var AbstractNodeTransformer_1 = require("../AbstractNodeTransformer");
var Node_1 = require("../../node/Node");
var LiteralTransformer = function (_AbstractNodeTransfor) {
    _inherits(LiteralTransformer, _AbstractNodeTransfor);

    function LiteralTransformer(literalObfuscatingReplacerFactory, randomGenerator, options) {
        _classCallCheck(this, LiteralTransformer);

        var _this = _possibleConstructorReturn(this, (LiteralTransformer.__proto__ || Object.getPrototypeOf(LiteralTransformer)).call(this, randomGenerator, options));

        _this.literalObfuscatingReplacerFactory = literalObfuscatingReplacerFactory;
        return _this;
    }

    _createClass(LiteralTransformer, [{
        key: "getVisitor",
        value: function getVisitor() {
            var _this2 = this;

            return {
                enter: function enter(node, parentNode) {
                    if (Node_1.Node.isLiteralNode(node) && !node.obfuscatedNode) {
                        return _this2.transformNode(node, parentNode);
                    }
                }
            };
        }
    }, {
        key: "transformNode",
        value: function transformNode(literalNode, parentNode) {
            if (Node_1.Node.isPropertyNode(parentNode) && parentNode.key === literalNode) {
                return literalNode;
            }
            switch (_typeof(literalNode.value)) {
                case 'boolean':
                    return this.literalObfuscatingReplacerFactory(LiteralObfuscatingReplacer_1.LiteralObfuscatingReplacer.BooleanLiteralObfuscatingReplacer).replace(literalNode.value);
                case 'number':
                    return this.literalObfuscatingReplacerFactory(LiteralObfuscatingReplacer_1.LiteralObfuscatingReplacer.NumberLiteralObfuscatingReplacer).replace(literalNode.value);
                case 'string':
                    return this.literalObfuscatingReplacerFactory(LiteralObfuscatingReplacer_1.LiteralObfuscatingReplacer.StringLiteralObfuscatingReplacer).replace(literalNode.value);
                default:
                    return literalNode;
            }
        }
    }]);

    return LiteralTransformer;
}(AbstractNodeTransformer_1.AbstractNodeTransformer);
LiteralTransformer = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.Factory__IObfuscatingReplacer)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(2, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Function, Object, Object])], LiteralTransformer);
exports.LiteralTransformer = LiteralTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGl0ZXJhbFRyYW5zZm9ybWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL25vZGUtdHJhbnNmb3JtZXJzL29iZnVzY2F0aW5nLXRyYW5zZm9ybWVycy9MaXRlcmFsVHJhbnNmb3JtZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSwwQkFBK0M7QUFDL0MsbUNBQXdFO0FBVXhFLDJDQUFnSDtBQUVoSCx3Q0FBcUU7QUFDckUscUJBQXVDO0FBR3ZDO0FBQUEsQUFBYSxBQUFrQixBQUFDOztBQVc1QixnQ0FFUSxBQUFxRSxtQ0FDNUIsQUFBaUMsaUJBQ3pDLEFBQWlCO0FBRXRELEFBQUs7OzRJQUFDLEFBQWUsaUJBQUUsQUFBTyxBQUFDLEFBQUM7O0FBRWhDLEFBQUksY0FBQyxBQUFpQyxvQ0FBRyxBQUFpQyxBQUFDLEFBQy9FOztBQUFDLEFBS00sQUFBVTs7Ozs7OztBQUNiLEFBQU07QUFDRixBQUFLLHVCQUFFLGVBQUMsQUFBaUIsTUFBRSxBQUF1QjtBQUM5QyxBQUFFLEFBQUMsd0JBQUMsT0FBSSxLQUFDLEFBQWEsY0FBQyxBQUFJLEFBQUMsU0FBSSxDQUFDLEFBQUksS0FBQyxBQUFjLEFBQUMsZ0JBQUMsQUFBQztBQUNuRCxBQUFNLCtCQUFDLEFBQUksT0FBQyxBQUFhLGNBQUMsQUFBSSxNQUFFLEFBQVUsQUFBQyxBQUFDLEFBQ2hEO0FBQUMsQUFDTDtBQUFDLEFBQ0osQUFBQyxBQUNOO0FBUFc7QUFPVixBQU9NLEFBQWE7OztzQ0FBRSxBQUEyQixhQUFFLEFBQXVCO0FBQ3RFLEFBQUUsQUFBQyxnQkFBQyxPQUFJLEtBQUMsQUFBYyxlQUFDLEFBQVUsQUFBQyxlQUFJLEFBQVUsV0FBQyxBQUFHLFFBQUssQUFBVyxBQUFDLGFBQUMsQUFBQztBQUNwRSxBQUFNLHVCQUFDLEFBQVcsQUFBQyxBQUN2QjtBQUFDO0FBRUQsQUFBTSxBQUFDLEFBQUMsNEJBQU8sQUFBVyxZQUFDLEFBQUssQUFBQyxBQUFDLEFBQUM7QUFDL0IscUJBQUssQUFBUztBQUNWLEFBQU0sMkJBQUMsQUFBSSxLQUFDLEFBQWlDLGtDQUFDLDZCQUEwQiwyQkFBQyxBQUFpQyxBQUFDLG1DQUN0RyxBQUFPLFFBQVUsQUFBVyxZQUFDLEFBQUssQUFBQyxBQUFDO0FBRTdDLHFCQUFLLEFBQVE7QUFDVCxBQUFNLDJCQUFDLEFBQUksS0FBQyxBQUFpQyxrQ0FBQyw2QkFBMEIsMkJBQUMsQUFBZ0MsQUFBQyxrQ0FDckcsQUFBTyxRQUFTLEFBQVcsWUFBQyxBQUFLLEFBQUMsQUFBQztBQUU1QyxxQkFBSyxBQUFRO0FBQ1QsQUFBTSwyQkFBQyxBQUFJLEtBQUMsQUFBaUMsa0NBQUMsNkJBQTBCLDJCQUFDLEFBQWdDLEFBQUMsa0NBQ3JHLEFBQU8sUUFBUyxBQUFXLFlBQUMsQUFBSyxBQUFDLEFBQUM7QUFFNUM7QUFDSSxBQUFNLDJCQUFDLEFBQVcsQUFBQyxBQUMzQixBQUFDLEFBQ0w7O0FBQUMsQUFDSjs7OztFQTlEdUMsMEJBQXVCO0FBQWxELEFBQWtCLHlDQUQ5QixZQUFVLEFBQUUsY0FhSixtQkFBQSxZQUFNLE9BQUMscUJBQWtCLG1CQUFDLEFBQTZCLEFBQUMsaUNBRXhELG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBZ0IsQUFBQyxvQkFDM0MsbUJBQUEsWUFBTSxPQUFDLHFCQUFrQixtQkFBQyxBQUFRLEFBQUMsa0ZBZi9CLEFBQWtCLEFBOEQ5QjtBQTlEWSw2QkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3RhYmxlLCBpbmplY3QgfSBmcm9tICdpbnZlcnNpZnknO1xuaW1wb3J0IHsgU2VydmljZUlkZW50aWZpZXJzIH0gZnJvbSAnLi4vLi4vY29udGFpbmVyL1NlcnZpY2VJZGVudGlmaWVycyc7XG5cbmltcG9ydCAqIGFzIEVTVHJlZSBmcm9tICdlc3RyZWUnO1xuXG5pbXBvcnQgeyBUTGl0ZXJhbE9iZnVzY2F0aW5nUmVwbGFjZXJGYWN0b3J5IH0gZnJvbSAnLi4vLi4vdHlwZXMvY29udGFpbmVyL25vZGUtdHJhbnNmb3JtZXJzL1RMaXRlcmFsT2JmdXNjYXRpbmdSZXBsYWNlckZhY3RvcnknO1xuXG5pbXBvcnQgeyBJT3B0aW9ucyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvb3B0aW9ucy9JT3B0aW9ucyc7XG5pbXBvcnQgeyBJUmFuZG9tR2VuZXJhdG9yIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy91dGlscy9JUmFuZG9tR2VuZXJhdG9yJztcbmltcG9ydCB7IElWaXNpdG9yIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9JVmlzaXRvcic7XG5cbmltcG9ydCB7IExpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyIH0gZnJvbSAnLi4vLi4vZW51bXMvY29udGFpbmVyL25vZGUtdHJhbnNmb3JtZXJzL0xpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyJztcblxuaW1wb3J0IHsgQWJzdHJhY3ROb2RlVHJhbnNmb3JtZXIgfSBmcm9tICcuLi9BYnN0cmFjdE5vZGVUcmFuc2Zvcm1lcic7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vbm9kZS9Ob2RlJztcblxuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExpdGVyYWxUcmFuc2Zvcm1lciBleHRlbmRzIEFic3RyYWN0Tm9kZVRyYW5zZm9ybWVyIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7VExpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyRmFjdG9yeX1cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGxpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyRmFjdG9yeTogVExpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyRmFjdG9yeTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VExpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyRmFjdG9yeX0gbGl0ZXJhbE9iZnVzY2F0aW5nUmVwbGFjZXJGYWN0b3J5XG4gICAgICogQHBhcmFtIHtJUmFuZG9tR2VuZXJhdG9yfSByYW5kb21HZW5lcmF0b3JcbiAgICAgKiBAcGFyYW0ge0lPcHRpb25zfSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5GYWN0b3J5X19JT2JmdXNjYXRpbmdSZXBsYWNlcilcbiAgICAgICAgICAgIGxpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyRmFjdG9yeTogVExpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyRmFjdG9yeSxcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuSVJhbmRvbUdlbmVyYXRvcikgcmFuZG9tR2VuZXJhdG9yOiBJUmFuZG9tR2VuZXJhdG9yLFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JT3B0aW9ucykgb3B0aW9uczogSU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgc3VwZXIocmFuZG9tR2VuZXJhdG9yLCBvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmxpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyRmFjdG9yeSA9IGxpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyRmFjdG9yeTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtJVmlzaXRvcn1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VmlzaXRvciAoKTogSVZpc2l0b3Ige1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW50ZXI6IChub2RlOiBFU1RyZWUuTm9kZSwgcGFyZW50Tm9kZTogRVNUcmVlLk5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoTm9kZS5pc0xpdGVyYWxOb2RlKG5vZGUpICYmICFub2RlLm9iZnVzY2F0ZWROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybU5vZGUobm9kZSwgcGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TGl0ZXJhbH0gbGl0ZXJhbE5vZGVcbiAgICAgKiBAcGFyYW0ge05vZGV9IHBhcmVudE5vZGVcbiAgICAgKiBAcmV0dXJucyB7Tm9kZX1cbiAgICAgKi9cbiAgICBwdWJsaWMgdHJhbnNmb3JtTm9kZSAobGl0ZXJhbE5vZGU6IEVTVHJlZS5MaXRlcmFsLCBwYXJlbnROb2RlOiBFU1RyZWUuTm9kZSk6IEVTVHJlZS5Ob2RlIHtcbiAgICAgICAgaWYgKE5vZGUuaXNQcm9wZXJ0eU5vZGUocGFyZW50Tm9kZSkgJiYgcGFyZW50Tm9kZS5rZXkgPT09IGxpdGVyYWxOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbGl0ZXJhbE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiBsaXRlcmFsTm9kZS52YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGl0ZXJhbE9iZnVzY2F0aW5nUmVwbGFjZXJGYWN0b3J5KExpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyLkJvb2xlYW5MaXRlcmFsT2JmdXNjYXRpbmdSZXBsYWNlcilcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoPGJvb2xlYW4+bGl0ZXJhbE5vZGUudmFsdWUpO1xuXG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyRmFjdG9yeShMaXRlcmFsT2JmdXNjYXRpbmdSZXBsYWNlci5OdW1iZXJMaXRlcmFsT2JmdXNjYXRpbmdSZXBsYWNlcilcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoPG51bWJlcj5saXRlcmFsTm9kZS52YWx1ZSk7XG5cbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGl0ZXJhbE9iZnVzY2F0aW5nUmVwbGFjZXJGYWN0b3J5KExpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyLlN0cmluZ0xpdGVyYWxPYmZ1c2NhdGluZ1JlcGxhY2VyKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSg8c3RyaW5nPmxpdGVyYWxOb2RlLnZhbHVlKTtcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGl0ZXJhbE5vZGU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=