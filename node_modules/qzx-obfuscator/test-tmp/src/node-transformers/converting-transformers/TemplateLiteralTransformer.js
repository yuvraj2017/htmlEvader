"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../container/ServiceIdentifiers");
var AbstractNodeTransformer_1 = require("../AbstractNodeTransformer");
var Node_1 = require("../../node/Node");
var Nodes_1 = require("../../node/Nodes");
var TemplateLiteralTransformer = TemplateLiteralTransformer_1 = function (_AbstractNodeTransfor) {
    _inherits(TemplateLiteralTransformer, _AbstractNodeTransfor);

    function TemplateLiteralTransformer(randomGenerator, options) {
        _classCallCheck(this, TemplateLiteralTransformer);

        return _possibleConstructorReturn(this, (TemplateLiteralTransformer.__proto__ || Object.getPrototypeOf(TemplateLiteralTransformer)).call(this, randomGenerator, options));
    }

    _createClass(TemplateLiteralTransformer, [{
        key: "getVisitor",
        value: function getVisitor() {
            var _this2 = this;

            return {
                enter: function enter(node, parentNode) {
                    if (Node_1.Node.isTemplateLiteralNode(node)) {
                        return _this2.transformNode(node, parentNode);
                    }
                }
            };
        }
    }, {
        key: "transformNode",
        value: function transformNode(templateLiteralNode, parentNode) {
            var templateLiteralExpressions = templateLiteralNode.expressions;
            var nodes = [];
            templateLiteralNode.quasis.forEach(function (templateElement) {
                nodes.push(Nodes_1.Nodes.getLiteralNode(templateElement.value.cooked));
                var expression = templateLiteralExpressions.shift();
                if (!expression) {
                    return;
                }
                nodes.push(expression);
            });
            nodes = nodes.filter(function (node) {
                return !(Node_1.Node.isLiteralNode(node) && node.value === '');
            });
            if (!TemplateLiteralTransformer_1.isLiteralNodeWithStringValue(nodes[0]) && !TemplateLiteralTransformer_1.isLiteralNodeWithStringValue(nodes[1])) {
                nodes.unshift(Nodes_1.Nodes.getLiteralNode(''));
            }
            if (nodes.length > 1) {
                var root = Nodes_1.Nodes.getBinaryExpressionNode('+', nodes.shift(), nodes.shift());
                nodes.forEach(function (node) {
                    root = Nodes_1.Nodes.getBinaryExpressionNode('+', root, node);
                });
                return root;
            }
            return nodes[0];
        }
    }], [{
        key: "isLiteralNodeWithStringValue",
        value: function isLiteralNodeWithStringValue(node) {
            return node && Node_1.Node.isLiteralNode(node) && typeof node.value === 'string';
        }
    }]);

    return TemplateLiteralTransformer;
}(AbstractNodeTransformer_1.AbstractNodeTransformer);
TemplateLiteralTransformer = TemplateLiteralTransformer_1 = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Object, Object])], TemplateLiteralTransformer);
exports.TemplateLiteralTransformer = TemplateLiteralTransformer;
var TemplateLiteralTransformer_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGxhdGVMaXRlcmFsVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbm9kZS10cmFuc2Zvcm1lcnMvY29udmVydGluZy10cmFuc2Zvcm1lcnMvVGVtcGxhdGVMaXRlcmFsVHJhbnNmb3JtZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsMEJBQStDO0FBQy9DLG1DQUF3RTtBQVF4RSx3Q0FBcUU7QUFDckUscUJBQXVDO0FBQ3ZDLHNCQUF5QztBQU96QyxJQUFhLEFBQTBCO0FBQXZDLEFBQXdDOztBQUtwQyx3Q0FDaUQsQUFBaUMsaUJBQ3pDLEFBQWlCO0FBRXRELEFBQUs7O3VKQUFDLEFBQWUsaUJBQUUsQUFBTyxBQUFDLEFBQUMsQUFDcEM7QUFBQyxBQU1PLEFBQU0sQUFBQyxBQUE0Qjs7Ozs7OztBQVF2QyxBQUFNO0FBQ0YsQUFBSyx1QkFBRSxlQUFDLEFBQWlCLE1BQUUsQUFBdUI7QUFDOUMsQUFBRSxBQUFDLHdCQUFDLE9BQUksS0FBQyxBQUFxQixzQkFBQyxBQUFJLEFBQUMsQUFBQyxPQUFDLEFBQUM7QUFDbkMsQUFBTSwrQkFBQyxBQUFJLE9BQUMsQUFBYSxjQUFDLEFBQUksTUFBRSxBQUFVLEFBQUMsQUFBQyxBQUNoRDtBQUFDLEFBQ0w7QUFBQyxBQUNKLEFBQUMsQUFDTjtBQVBXO0FBT1YsQUFPTSxBQUFhOzs7c0NBQUUsQUFBMkMscUJBQUUsQUFBdUI7QUFDdEYsZ0JBQU0sQUFBMEIsNkJBQXdCLEFBQW1CLG9CQUFDLEFBQVcsQUFBQztBQUV4RixnQkFBSSxBQUFLLFFBQTJDLEFBQUUsQUFBQztBQUV2RCxBQUFtQixnQ0FBQyxBQUFNLE9BQUMsQUFBTyxRQUFDLFVBQUMsQUFBdUM7QUFDdkUsQUFBSyxzQkFBQyxBQUFJLEtBQUMsUUFBSyxNQUFDLEFBQWMsZUFBQyxBQUFlLGdCQUFDLEFBQUssTUFBQyxBQUFNLEFBQUMsQUFBQyxBQUFDO0FBRS9ELG9CQUFNLEFBQVUsYUFBa0MsQUFBMEIsMkJBQUMsQUFBSyxBQUFFLEFBQUM7QUFFckYsQUFBRSxBQUFDLG9CQUFDLENBQUMsQUFBVSxBQUFDLFlBQUMsQUFBQztBQUNkLEFBQU0sQUFBQyxBQUNYO0FBQUM7QUFFRCxBQUFLLHNCQUFDLEFBQUksS0FBQyxBQUFVLEFBQUMsQUFBQyxBQUMzQjtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUssMEJBQVMsQUFBTSxPQUFDLFVBQUMsQUFBd0M7QUFDMUQsQUFBTSx1QkFBQyxBQUFDLEVBQUMsT0FBSSxLQUFDLEFBQWEsY0FBQyxBQUFJLEFBQUMsU0FBSSxBQUFJLEtBQUMsQUFBSyxVQUFLLEFBQUUsQUFBQyxBQUFDLEFBQzVEO0FBQUMsQUFBQyxBQUFDLGFBRkssQUFBSztBQU1iLEFBQUUsQUFBQyxnQkFDQyxDQUFDLEFBQTBCLDZCQUFDLEFBQTRCLDZCQUFDLEFBQUssTUFBQyxBQUFDLEFBQUMsQUFBQyxPQUNsRSxDQUFDLEFBQTBCLDZCQUFDLEFBQTRCLDZCQUFDLEFBQUssTUFBQyxBQUFDLEFBQUMsQUFDckUsQUFBQyxLQUFDLEFBQUM7QUFDQyxBQUFLLHNCQUFDLEFBQU8sUUFBQyxRQUFLLE1BQUMsQUFBYyxlQUFDLEFBQUUsQUFBQyxBQUFDLEFBQUMsQUFDNUM7QUFBQztBQUVELEFBQUUsQUFBQyxnQkFBQyxBQUFLLE1BQUMsQUFBTSxTQUFHLEFBQUMsQUFBQyxHQUFDLEFBQUM7QUFDbkIsb0JBQUksQUFBSSxPQUE0QixRQUFLLE1BQUMsQUFBdUIsd0JBQzdELEFBQUcsS0FDYSxBQUFLLE1BQUMsQUFBSyxBQUFFLFNBQ1YsQUFBSyxNQUFDLEFBQUssQUFBRSxBQUNuQyxBQUFDO0FBRUYsQUFBSyxzQkFBQyxBQUFPLFFBQUMsVUFBQyxBQUF3QztBQUNuRCxBQUFJLDJCQUFHLFFBQUssTUFBQyxBQUF1Qix3QkFBQyxBQUFHLEtBQUUsQUFBSSxNQUFzQyxBQUFJLEFBQUMsQUFBQyxBQUM5RjtBQUFDLEFBQUMsQUFBQztBQUVILEFBQU0sdUJBQUMsQUFBSSxBQUFDLEFBQ2hCO0FBQUM7QUFFRCxBQUFNLG1CQUFDLEFBQUssTUFBQyxBQUFDLEFBQUMsQUFBQyxBQUNwQjtBQUFDLEFBQ0o7OztxREFwRWdELEFBQWlCO0FBQzFELEFBQU0sbUJBQUMsQUFBSSxRQUFJLE9BQUksS0FBQyxBQUFhLGNBQUMsQUFBSSxBQUFDLFNBQUksT0FBTyxBQUFJLEtBQUMsQUFBSyxVQUFLLEFBQVEsQUFBQyxBQUM5RTtBQUFDLEFBS00sQUFBVTs7OztFQXZCMkIsMEJBQXVCO0FBQTFELEFBQTBCLGdGQUR0QyxZQUFVLEFBQUUsY0FPSixtQkFBQSxZQUFNLE9BQUMscUJBQWtCLG1CQUFDLEFBQWdCLEFBQUMsb0JBQzNDLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBUSxBQUFDLHdFQVAvQixBQUEwQixBQW9GdEM7QUFwRlkscUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0YWJsZSwgaW5qZWN0IH0gZnJvbSAnaW52ZXJzaWZ5JztcbmltcG9ydCB7IFNlcnZpY2VJZGVudGlmaWVycyB9IGZyb20gJy4uLy4uL2NvbnRhaW5lci9TZXJ2aWNlSWRlbnRpZmllcnMnO1xuXG5pbXBvcnQgKiBhcyBFU1RyZWUgZnJvbSAnZXN0cmVlJztcblxuaW1wb3J0IHsgSU9wdGlvbnMgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL29wdGlvbnMvSU9wdGlvbnMnO1xuaW1wb3J0IHsgSVJhbmRvbUdlbmVyYXRvciB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvdXRpbHMvSVJhbmRvbUdlbmVyYXRvcic7XG5pbXBvcnQgeyBJVmlzaXRvciB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvSVZpc2l0b3InO1xuXG5pbXBvcnQgeyBBYnN0cmFjdE5vZGVUcmFuc2Zvcm1lciB9IGZyb20gJy4uL0Fic3RyYWN0Tm9kZVRyYW5zZm9ybWVyJztcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi9ub2RlL05vZGUnO1xuaW1wb3J0IHsgTm9kZXMgfSBmcm9tICcuLi8uLi9ub2RlL05vZGVzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gRVMyMDE1IHRlbXBsYXRlIGxpdGVyYWxzIHRvIEVTNVxuICogVGhhbmtzIHRvIEJhYmVsIGZvciBhbGdvcml0aG1cbiAqL1xuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlTGl0ZXJhbFRyYW5zZm9ybWVyIGV4dGVuZHMgQWJzdHJhY3ROb2RlVHJhbnNmb3JtZXIge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SVJhbmRvbUdlbmVyYXRvcn0gcmFuZG9tR2VuZXJhdG9yXG4gICAgICogQHBhcmFtIHtJT3B0aW9uc30gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuSVJhbmRvbUdlbmVyYXRvcikgcmFuZG9tR2VuZXJhdG9yOiBJUmFuZG9tR2VuZXJhdG9yLFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JT3B0aW9ucykgb3B0aW9uczogSU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgc3VwZXIocmFuZG9tR2VuZXJhdG9yLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBpc0xpdGVyYWxOb2RlV2l0aFN0cmluZ1ZhbHVlIChub2RlOiBFU1RyZWUuTm9kZSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gbm9kZSAmJiBOb2RlLmlzTGl0ZXJhbE5vZGUobm9kZSkgJiYgdHlwZW9mIG5vZGUudmFsdWUgPT09ICdzdHJpbmcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge0lWaXNpdG9yfVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRWaXNpdG9yICgpOiBJVmlzaXRvciB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbnRlcjogKG5vZGU6IEVTVHJlZS5Ob2RlLCBwYXJlbnROb2RlOiBFU1RyZWUuTm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChOb2RlLmlzVGVtcGxhdGVMaXRlcmFsTm9kZShub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1Ob2RlKG5vZGUsIHBhcmVudE5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlTGl0ZXJhbH0gdGVtcGxhdGVMaXRlcmFsTm9kZVxuICAgICAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50Tm9kZVxuICAgICAqIEByZXR1cm5zIHtOb2RlfVxuICAgICAqL1xuICAgIHB1YmxpYyB0cmFuc2Zvcm1Ob2RlICh0ZW1wbGF0ZUxpdGVyYWxOb2RlOiBFU1RyZWUuVGVtcGxhdGVMaXRlcmFsLCBwYXJlbnROb2RlOiBFU1RyZWUuTm9kZSk6IEVTVHJlZS5Ob2RlIHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGVMaXRlcmFsRXhwcmVzc2lvbnM6IEVTVHJlZS5FeHByZXNzaW9uW10gPSB0ZW1wbGF0ZUxpdGVyYWxOb2RlLmV4cHJlc3Npb25zO1xuXG4gICAgICAgIGxldCBub2RlczogKEVTVHJlZS5MaXRlcmFsIHwgRVNUcmVlLkV4cHJlc3Npb24pW10gPSBbXTtcblxuICAgICAgICB0ZW1wbGF0ZUxpdGVyYWxOb2RlLnF1YXNpcy5mb3JFYWNoKCh0ZW1wbGF0ZUVsZW1lbnQ6IEVTVHJlZS5UZW1wbGF0ZUVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIG5vZGVzLnB1c2goTm9kZXMuZ2V0TGl0ZXJhbE5vZGUodGVtcGxhdGVFbGVtZW50LnZhbHVlLmNvb2tlZCkpO1xuXG4gICAgICAgICAgICBjb25zdCBleHByZXNzaW9uOiBFU1RyZWUuRXhwcmVzc2lvbiB8IHVuZGVmaW5lZCA9IHRlbXBsYXRlTGl0ZXJhbEV4cHJlc3Npb25zLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgIGlmICghZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9kZXMucHVzaChleHByZXNzaW9uKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbm9kZXMgPSBub2Rlcy5maWx0ZXIoKG5vZGU6IEVTVHJlZS5MaXRlcmFsIHwgRVNUcmVlLkV4cHJlc3Npb24pID0+IHtcbiAgICAgICAgICAgIHJldHVybiAhKE5vZGUuaXNMaXRlcmFsTm9kZShub2RlKSAmJiBub2RlLnZhbHVlID09PSAnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHNpbmNlIGArYCBpcyBsZWZ0LXRvLXJpZ2h0IGFzc29jaWF0aXZlXG4gICAgICAgIC8vIGVuc3VyZSB0aGUgZmlyc3Qgbm9kZSBpcyBhIHN0cmluZyBpZiBmaXJzdC9zZWNvbmQgaXNuJ3RcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIVRlbXBsYXRlTGl0ZXJhbFRyYW5zZm9ybWVyLmlzTGl0ZXJhbE5vZGVXaXRoU3RyaW5nVmFsdWUobm9kZXNbMF0pICYmXG4gICAgICAgICAgICAhVGVtcGxhdGVMaXRlcmFsVHJhbnNmb3JtZXIuaXNMaXRlcmFsTm9kZVdpdGhTdHJpbmdWYWx1ZShub2Rlc1sxXSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBub2Rlcy51bnNoaWZ0KE5vZGVzLmdldExpdGVyYWxOb2RlKCcnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbGV0IHJvb3Q6IEVTVHJlZS5CaW5hcnlFeHByZXNzaW9uID0gTm9kZXMuZ2V0QmluYXJ5RXhwcmVzc2lvbk5vZGUoXG4gICAgICAgICAgICAgICAgJysnLFxuICAgICAgICAgICAgICAgIDxFU1RyZWUuTGl0ZXJhbD5ub2Rlcy5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIDxFU1RyZWUuRXhwcmVzc2lvbj5ub2Rlcy5zaGlmdCgpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBub2Rlcy5mb3JFYWNoKChub2RlOiBFU1RyZWUuTGl0ZXJhbCB8IEVTVHJlZS5FeHByZXNzaW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgcm9vdCA9IE5vZGVzLmdldEJpbmFyeUV4cHJlc3Npb25Ob2RlKCcrJywgcm9vdCwgPEVTVHJlZS5MaXRlcmFsIHwgRVNUcmVlLkV4cHJlc3Npb24+bm9kZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZXNbMF07XG4gICAgfVxufVxuIl19