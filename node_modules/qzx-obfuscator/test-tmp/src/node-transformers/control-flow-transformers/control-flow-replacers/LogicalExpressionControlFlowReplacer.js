"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../../container/ServiceIdentifiers");
var ControlFlowCustomNode_1 = require("../../../enums/container/custom-nodes/ControlFlowCustomNode");
var ExpressionWithOperatorControlFlowReplacer_1 = require("./ExpressionWithOperatorControlFlowReplacer");
var Node_1 = require("../../../node/Node");
var NodeUtils_1 = require("../../../node/NodeUtils");
var LogicalExpressionControlFlowReplacer = LogicalExpressionControlFlowReplacer_1 = function (_ExpressionWithOperat) {
    _inherits(LogicalExpressionControlFlowReplacer, _ExpressionWithOperat);

    function LogicalExpressionControlFlowReplacer(controlFlowCustomNodeFactory, randomGenerator, options) {
        _classCallCheck(this, LogicalExpressionControlFlowReplacer);

        return _possibleConstructorReturn(this, (LogicalExpressionControlFlowReplacer.__proto__ || Object.getPrototypeOf(LogicalExpressionControlFlowReplacer)).call(this, controlFlowCustomNodeFactory, randomGenerator, options));
    }

    _createClass(LogicalExpressionControlFlowReplacer, [{
        key: "replace",
        value: function replace(logicalExpressionNode, parentNode, controlFlowStorage) {
            if (this.checkForProhibitedExpressions(logicalExpressionNode.left, logicalExpressionNode.right)) {
                return logicalExpressionNode;
            }
            var replacerId = logicalExpressionNode.operator;
            var logicalExpressionFunctionCustomNode = this.controlFlowCustomNodeFactory(ControlFlowCustomNode_1.ControlFlowCustomNode.LogicalExpressionFunctionNode);
            logicalExpressionFunctionCustomNode.initialize(replacerId);
            var storageKey = this.insertCustomNodeToControlFlowStorage(logicalExpressionFunctionCustomNode, controlFlowStorage, replacerId, LogicalExpressionControlFlowReplacer_1.usingExistingIdentifierChance);
            return this.getControlFlowStorageCallNode(controlFlowStorage.getStorageId(), storageKey, logicalExpressionNode.left, logicalExpressionNode.right);
        }
    }, {
        key: "checkForProhibitedExpressions",
        value: function checkForProhibitedExpressions(leftExpression, rightExpression) {
            return [leftExpression, rightExpression].some(function (expressionNode) {
                var nodeForCheck = void 0;
                if (!Node_1.Node.isUnaryExpressionNode(expressionNode)) {
                    nodeForCheck = expressionNode;
                } else {
                    nodeForCheck = NodeUtils_1.NodeUtils.getUnaryExpressionArgumentNode(expressionNode);
                }
                return !Node_1.Node.isLiteralNode(nodeForCheck) && !Node_1.Node.isIdentifierNode(nodeForCheck) && !Node_1.Node.isObjectExpressionNode(nodeForCheck) && !Node_1.Node.isExpressionStatementNode(nodeForCheck);
            });
        }
    }]);

    return LogicalExpressionControlFlowReplacer;
}(ExpressionWithOperatorControlFlowReplacer_1.ExpressionWithOperatorControlFlowReplacer);
LogicalExpressionControlFlowReplacer.usingExistingIdentifierChance = 0.5;
LogicalExpressionControlFlowReplacer = LogicalExpressionControlFlowReplacer_1 = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.Factory__IControlFlowCustomNode)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(2, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Function, Object, Object])], LogicalExpressionControlFlowReplacer);
exports.LogicalExpressionControlFlowReplacer = LogicalExpressionControlFlowReplacer;
var LogicalExpressionControlFlowReplacer_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naWNhbEV4cHJlc3Npb25Db250cm9sRmxvd1JlcGxhY2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL25vZGUtdHJhbnNmb3JtZXJzL2NvbnRyb2wtZmxvdy10cmFuc2Zvcm1lcnMvY29udHJvbC1mbG93LXJlcGxhY2Vycy9Mb2dpY2FsRXhwcmVzc2lvbkNvbnRyb2xGbG93UmVwbGFjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsMEJBQStDO0FBQy9DLG1DQUEyRTtBQVczRSxzQ0FBb0c7QUFFcEcsMERBQXdHO0FBQ3hHLHFCQUEwQztBQUMxQywwQkFBb0Q7QUFHcEQsSUFBYSxBQUFvQztBQUFqRCxBQUFrRDs7QUFXOUMsa0RBRVEsQUFBMkQsOEJBQ2xCLEFBQWlDLGlCQUN6QyxBQUFpQjtBQUV0RCxBQUFLOzsyS0FBQyxBQUE0Qiw4QkFBRSxBQUFlLGlCQUFFLEFBQU8sQUFBQyxBQUFDLEFBQ2xFO0FBQUMsQUFRTSxBQUFPOzs7O2dDQUNWLEFBQStDLHVCQUMvQyxBQUF1QixZQUN2QixBQUEwQztBQUUxQyxBQUFFLEFBQUMsZ0JBQUMsQUFBSSxLQUFDLEFBQTZCLDhCQUFDLEFBQXFCLHNCQUFDLEFBQUksTUFBRSxBQUFxQixzQkFBQyxBQUFLLEFBQUMsQUFBQyxRQUFDLEFBQUM7QUFDOUYsQUFBTSx1QkFBQyxBQUFxQixBQUFDLEFBQ2pDO0FBQUM7QUFFRCxnQkFBTSxBQUFVLGFBQVcsQUFBcUIsc0JBQUMsQUFBUSxBQUFDO0FBQzFELGdCQUFNLEFBQW1DLHNDQUFnQixBQUFJLEtBQUMsQUFBNEIsNkJBQ3RGLHdCQUFxQixzQkFBQyxBQUE2QixBQUN0RCxBQUFDO0FBRUYsQUFBbUMsZ0RBQUMsQUFBVSxXQUFDLEFBQVUsQUFBQyxBQUFDO0FBRTNELGdCQUFNLEFBQVUsYUFBVyxBQUFJLEtBQUMsQUFBb0MscUNBQ2hFLEFBQW1DLHFDQUNuQyxBQUFrQixvQkFDbEIsQUFBVSxZQUNWLEFBQW9DLHVDQUFDLEFBQTZCLEFBQ3JFLEFBQUM7QUFFRixBQUFNLG1CQUFDLEFBQUksS0FBQyxBQUE2Qiw4QkFDckMsQUFBa0IsbUJBQUMsQUFBWSxBQUFFLGdCQUNqQyxBQUFVLFlBQ1YsQUFBcUIsc0JBQUMsQUFBSSxNQUMxQixBQUFxQixzQkFBQyxBQUFLLEFBQzlCLEFBQUMsQUFDTjtBQUFDLEFBT08sQUFBNkI7OztzREFBRSxBQUFpQyxnQkFBRSxBQUFrQztBQUN4RyxBQUFNLG9CQUFFLEFBQWMsZ0JBQUUsQUFBZSxBQUFDLGlCQUFDLEFBQUksS0FBQyxVQUFDLEFBQStDO0FBQzFGLG9CQUFJLEFBQTZDLEFBQUM7QUFFbEQsQUFBRSxBQUFDLG9CQUFDLENBQUMsT0FBSSxLQUFDLEFBQXFCLHNCQUFDLEFBQWMsQUFBQyxBQUFDLGlCQUFDLEFBQUM7QUFDOUMsQUFBWSxtQ0FBRyxBQUFjLEFBQUMsQUFDbEM7QUFBQyxBQUFDLEFBQUksdUJBQUMsQUFBQztBQUNKLEFBQVksbUNBQUcsWUFBUyxVQUFDLEFBQThCLCtCQUFDLEFBQWMsQUFBQyxBQUFDLEFBQzVFO0FBQUM7QUFFRCxBQUFNLHVCQUFDLENBQUMsT0FBSSxLQUFDLEFBQWEsY0FBQyxBQUFZLEFBQUMsaUJBQ3BDLENBQUMsT0FBSSxLQUFDLEFBQWdCLGlCQUFDLEFBQVksQUFBQyxpQkFDcEMsQ0FBQyxPQUFJLEtBQUMsQUFBc0IsdUJBQUMsQUFBWSxBQUFDLGlCQUMxQyxDQUFDLE9BQUksS0FBQyxBQUF5QiwwQkFBQyxBQUFZLEFBQUMsQUFBQyxBQUN0RDtBQUFDLEFBQUMsQUFBQyxBQUNQLGFBZFc7QUFjVixBQUNKOzs7O0VBOUV5RCw0Q0FBeUM7QUFJdkUscUNBQTZCLGdDQUFXLEFBQUcsQUFBQztBQUozRCxBQUFvQyxvR0FEaEQsWUFBVSxBQUFFLGNBYUosbUJBQUEsWUFBTSxPQUFDLHFCQUFrQixtQkFBQyxBQUErQixBQUFDLG1DQUUxRCxtQkFBQSxZQUFNLE9BQUMscUJBQWtCLG1CQUFDLEFBQWdCLEFBQUMsb0JBQzNDLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBUSxBQUFDLGtGQWYvQixBQUFvQyxBQThFaEQ7QUE5RVksK0NBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0YWJsZSwgaW5qZWN0IH0gZnJvbSAnaW52ZXJzaWZ5JztcbmltcG9ydCB7IFNlcnZpY2VJZGVudGlmaWVycyB9IGZyb20gJy4uLy4uLy4uL2NvbnRhaW5lci9TZXJ2aWNlSWRlbnRpZmllcnMnO1xuXG5pbXBvcnQgKiBhcyBFU1RyZWUgZnJvbSAnZXN0cmVlJztcblxuaW1wb3J0IHsgVENvbnRyb2xGbG93Q3VzdG9tTm9kZUZhY3RvcnkgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9jb250YWluZXIvY3VzdG9tLW5vZGVzL1RDb250cm9sRmxvd0N1c3RvbU5vZGVGYWN0b3J5JztcblxuaW1wb3J0IHsgSUN1c3RvbU5vZGUgfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzL2N1c3RvbS1ub2Rlcy9JQ3VzdG9tTm9kZSc7XG5pbXBvcnQgeyBJT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvb3B0aW9ucy9JT3B0aW9ucyc7XG5pbXBvcnQgeyBJUmFuZG9tR2VuZXJhdG9yIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcy91dGlscy9JUmFuZG9tR2VuZXJhdG9yJztcbmltcG9ydCB7IElTdG9yYWdlIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcy9zdG9yYWdlcy9JU3RvcmFnZSc7XG5cbmltcG9ydCB7IENvbnRyb2xGbG93Q3VzdG9tTm9kZSB9IGZyb20gJy4uLy4uLy4uL2VudW1zL2NvbnRhaW5lci9jdXN0b20tbm9kZXMvQ29udHJvbEZsb3dDdXN0b21Ob2RlJztcblxuaW1wb3J0IHsgRXhwcmVzc2lvbldpdGhPcGVyYXRvckNvbnRyb2xGbG93UmVwbGFjZXIgfSBmcm9tICcuL0V4cHJlc3Npb25XaXRoT3BlcmF0b3JDb250cm9sRmxvd1JlcGxhY2VyJztcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi9ub2RlL05vZGUnO1xuaW1wb3J0IHsgTm9kZVV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vbm9kZS9Ob2RlVXRpbHMnO1xuXG5AaW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9naWNhbEV4cHJlc3Npb25Db250cm9sRmxvd1JlcGxhY2VyIGV4dGVuZHMgRXhwcmVzc2lvbldpdGhPcGVyYXRvckNvbnRyb2xGbG93UmVwbGFjZXIge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgdXNpbmdFeGlzdGluZ0lkZW50aWZpZXJDaGFuY2U6IG51bWJlciA9IDAuNTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VENvbnRyb2xGbG93Q3VzdG9tTm9kZUZhY3Rvcnl9IGNvbnRyb2xGbG93Q3VzdG9tTm9kZUZhY3RvcnlcbiAgICAgKiBAcGFyYW0ge0lSYW5kb21HZW5lcmF0b3J9IHJhbmRvbUdlbmVyYXRvclxuICAgICAqIEBwYXJhbSB7SU9wdGlvbnN9IG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIEBpbmplY3QoU2VydmljZUlkZW50aWZpZXJzLkZhY3RvcnlfX0lDb250cm9sRmxvd0N1c3RvbU5vZGUpXG4gICAgICAgICAgICBjb250cm9sRmxvd0N1c3RvbU5vZGVGYWN0b3J5OiBUQ29udHJvbEZsb3dDdXN0b21Ob2RlRmFjdG9yeSxcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuSVJhbmRvbUdlbmVyYXRvcikgcmFuZG9tR2VuZXJhdG9yOiBJUmFuZG9tR2VuZXJhdG9yLFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JT3B0aW9ucykgb3B0aW9uczogSU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgc3VwZXIoY29udHJvbEZsb3dDdXN0b21Ob2RlRmFjdG9yeSwgcmFuZG9tR2VuZXJhdG9yLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0xvZ2ljYWxFeHByZXNzaW9ufSBsb2dpY2FsRXhwcmVzc2lvbk5vZGVcbiAgICAgKiBAcGFyYW0ge05vZGV9IHBhcmVudE5vZGVcbiAgICAgKiBAcGFyYW0ge0lTdG9yYWdlPElDdXN0b21Ob2RlPn0gY29udHJvbEZsb3dTdG9yYWdlXG4gICAgICogQHJldHVybnMge05vZGV9XG4gICAgICovXG4gICAgcHVibGljIHJlcGxhY2UgKFxuICAgICAgICBsb2dpY2FsRXhwcmVzc2lvbk5vZGU6IEVTVHJlZS5Mb2dpY2FsRXhwcmVzc2lvbixcbiAgICAgICAgcGFyZW50Tm9kZTogRVNUcmVlLk5vZGUsXG4gICAgICAgIGNvbnRyb2xGbG93U3RvcmFnZTogSVN0b3JhZ2UgPElDdXN0b21Ob2RlPlxuICAgICk6IEVTVHJlZS5Ob2RlIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tGb3JQcm9oaWJpdGVkRXhwcmVzc2lvbnMobG9naWNhbEV4cHJlc3Npb25Ob2RlLmxlZnQsIGxvZ2ljYWxFeHByZXNzaW9uTm9kZS5yaWdodCkpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2dpY2FsRXhwcmVzc2lvbk5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXBsYWNlcklkOiBzdHJpbmcgPSBsb2dpY2FsRXhwcmVzc2lvbk5vZGUub3BlcmF0b3I7XG4gICAgICAgIGNvbnN0IGxvZ2ljYWxFeHByZXNzaW9uRnVuY3Rpb25DdXN0b21Ob2RlOiBJQ3VzdG9tTm9kZSA9IHRoaXMuY29udHJvbEZsb3dDdXN0b21Ob2RlRmFjdG9yeShcbiAgICAgICAgICAgIENvbnRyb2xGbG93Q3VzdG9tTm9kZS5Mb2dpY2FsRXhwcmVzc2lvbkZ1bmN0aW9uTm9kZVxuICAgICAgICApO1xuXG4gICAgICAgIGxvZ2ljYWxFeHByZXNzaW9uRnVuY3Rpb25DdXN0b21Ob2RlLmluaXRpYWxpemUocmVwbGFjZXJJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RvcmFnZUtleTogc3RyaW5nID0gdGhpcy5pbnNlcnRDdXN0b21Ob2RlVG9Db250cm9sRmxvd1N0b3JhZ2UoXG4gICAgICAgICAgICBsb2dpY2FsRXhwcmVzc2lvbkZ1bmN0aW9uQ3VzdG9tTm9kZSxcbiAgICAgICAgICAgIGNvbnRyb2xGbG93U3RvcmFnZSxcbiAgICAgICAgICAgIHJlcGxhY2VySWQsXG4gICAgICAgICAgICBMb2dpY2FsRXhwcmVzc2lvbkNvbnRyb2xGbG93UmVwbGFjZXIudXNpbmdFeGlzdGluZ0lkZW50aWZpZXJDaGFuY2VcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb250cm9sRmxvd1N0b3JhZ2VDYWxsTm9kZShcbiAgICAgICAgICAgIGNvbnRyb2xGbG93U3RvcmFnZS5nZXRTdG9yYWdlSWQoKSxcbiAgICAgICAgICAgIHN0b3JhZ2VLZXksXG4gICAgICAgICAgICBsb2dpY2FsRXhwcmVzc2lvbk5vZGUubGVmdCxcbiAgICAgICAgICAgIGxvZ2ljYWxFeHByZXNzaW9uTm9kZS5yaWdodFxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RXhwcmVzc2lvbn0gbGVmdEV4cHJlc3Npb25cbiAgICAgKiBAcGFyYW0ge0V4cHJlc3Npb259IHJpZ2h0RXhwcmVzc2lvblxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIHByaXZhdGUgY2hlY2tGb3JQcm9oaWJpdGVkRXhwcmVzc2lvbnMgKGxlZnRFeHByZXNzaW9uOiBFU1RyZWUuRXhwcmVzc2lvbiwgcmlnaHRFeHByZXNzaW9uOiBFU1RyZWUuRXhwcmVzc2lvbik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gW2xlZnRFeHByZXNzaW9uLCByaWdodEV4cHJlc3Npb25dLnNvbWUoKGV4cHJlc3Npb25Ob2RlOiBFU1RyZWUuTm9kZSB8IEVTVHJlZS5FeHByZXNzaW9uKTogYm9vbGVhbiA9PiB7XG4gICAgICAgICAgICBsZXQgbm9kZUZvckNoZWNrOiBFU1RyZWUuTm9kZSB8IEVTVHJlZS5FeHByZXNzaW9uO1xuXG4gICAgICAgICAgICBpZiAoIU5vZGUuaXNVbmFyeUV4cHJlc3Npb25Ob2RlKGV4cHJlc3Npb25Ob2RlKSkge1xuICAgICAgICAgICAgICAgIG5vZGVGb3JDaGVjayA9IGV4cHJlc3Npb25Ob2RlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBub2RlRm9yQ2hlY2sgPSBOb2RlVXRpbHMuZ2V0VW5hcnlFeHByZXNzaW9uQXJndW1lbnROb2RlKGV4cHJlc3Npb25Ob2RlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuICFOb2RlLmlzTGl0ZXJhbE5vZGUobm9kZUZvckNoZWNrKSAmJlxuICAgICAgICAgICAgICAgICFOb2RlLmlzSWRlbnRpZmllck5vZGUobm9kZUZvckNoZWNrKSAmJlxuICAgICAgICAgICAgICAgICFOb2RlLmlzT2JqZWN0RXhwcmVzc2lvbk5vZGUobm9kZUZvckNoZWNrKSAmJlxuICAgICAgICAgICAgICAgICFOb2RlLmlzRXhwcmVzc2lvblN0YXRlbWVudE5vZGUobm9kZUZvckNoZWNrKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19