"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../../container/ServiceIdentifiers");
var ControlFlowCustomNode_1 = require("../../../enums/container/custom-nodes/ControlFlowCustomNode");
var AbstractControlFlowReplacer_1 = require("./AbstractControlFlowReplacer");
var Node_1 = require("../../../node/Node");
var ExpressionWithOperatorControlFlowReplacer = function (_AbstractControlFlowR) {
    _inherits(ExpressionWithOperatorControlFlowReplacer, _AbstractControlFlowR);

    function ExpressionWithOperatorControlFlowReplacer(controlFlowCustomNodeFactory, randomGenerator, options) {
        _classCallCheck(this, ExpressionWithOperatorControlFlowReplacer);

        var _this = _possibleConstructorReturn(this, (ExpressionWithOperatorControlFlowReplacer.__proto__ || Object.getPrototypeOf(ExpressionWithOperatorControlFlowReplacer)).call(this, controlFlowCustomNodeFactory, randomGenerator, options));

        _this.replacerDataByControlFlowStorageId = new Map();
        return _this;
    }

    _createClass(ExpressionWithOperatorControlFlowReplacer, [{
        key: "getControlFlowStorageCallNode",
        value: function getControlFlowStorageCallNode(controlFlowStorageId, storageKey, leftExpression, rightExpression) {
            var controlFlowStorageCallCustomNode = this.controlFlowCustomNodeFactory(ControlFlowCustomNode_1.ControlFlowCustomNode.ExpressionWithOperatorControlFlowStorageCallNode);
            controlFlowStorageCallCustomNode.initialize(controlFlowStorageId, storageKey, leftExpression, rightExpression);
            var statementNode = controlFlowStorageCallCustomNode.getNode()[0];
            if (!statementNode || !Node_1.Node.isExpressionStatementNode(statementNode)) {
                throw new Error("`controlFlowStorageCallCustomNode.getNode()[0]` should returns array with `ExpressionStatement` node");
            }
            return statementNode.expression;
        }
    }]);

    return ExpressionWithOperatorControlFlowReplacer;
}(AbstractControlFlowReplacer_1.AbstractControlFlowReplacer);
ExpressionWithOperatorControlFlowReplacer = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.Factory__IControlFlowCustomNode)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(2, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Function, Object, Object])], ExpressionWithOperatorControlFlowReplacer);
exports.ExpressionWithOperatorControlFlowReplacer = ExpressionWithOperatorControlFlowReplacer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhwcmVzc2lvbldpdGhPcGVyYXRvckNvbnRyb2xGbG93UmVwbGFjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbm9kZS10cmFuc2Zvcm1lcnMvY29udHJvbC1mbG93LXRyYW5zZm9ybWVycy9jb250cm9sLWZsb3ctcmVwbGFjZXJzL0V4cHJlc3Npb25XaXRoT3BlcmF0b3JDb250cm9sRmxvd1JlcGxhY2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDBCQUErQztBQUMvQyxtQ0FBMkU7QUFXM0Usc0NBQW9HO0FBRXBHLDRDQUE0RTtBQUM1RSxxQkFBMEM7QUFHMUM7QUFBQSxBQUFzQixBQUF5QyxBQUFDOztBQWdCNUQsdURBRVEsQUFBMkQsOEJBQ2xCLEFBQWlDLGlCQUN6QyxBQUFpQjtBQUV0RCxBQUFLOzswTEFBQyxBQUE0Qiw4QkFBRSxBQUFlLGlCQUFFLEFBQU8sQUFBQyxBQUFDOztBQWIvQyxjQUFrQyxxQ0FBd0MsSUFBSSxBQUFHLEFBQUUsQUFBQyxBQWN2Rzs7QUFBQyxBQVNTLEFBQTZCOzs7O3NEQUNuQyxBQUE0QixzQkFDNUIsQUFBa0IsWUFDbEIsQUFBaUMsZ0JBQ2pDLEFBQWtDO0FBRWxDLGdCQUFNLEFBQWdDLG1DQUFnQixBQUFJLEtBQUMsQUFBNEIsNkJBQ25GLHdCQUFxQixzQkFBQyxBQUFnRCxBQUN6RSxBQUFDO0FBRUYsQUFBZ0MsNkNBQUMsQUFBVSxXQUFDLEFBQW9CLHNCQUFFLEFBQVUsWUFBRSxBQUFjLGdCQUFFLEFBQWUsQUFBQyxBQUFDO0FBRS9HLGdCQUFNLEFBQWEsZ0JBQWUsQUFBZ0MsaUNBQUMsQUFBTyxBQUFFLFVBQUMsQUFBQyxBQUFDLEFBQUM7QUFFaEYsQUFBRSxBQUFDLGdCQUFDLENBQUMsQUFBYSxpQkFBSSxDQUFDLE9BQUksS0FBQyxBQUF5QiwwQkFBQyxBQUFhLEFBQUMsQUFBQyxnQkFBQyxBQUFDO0FBQ25FLHNCQUFNLElBQUksQUFBSyxBQUFDLEFBQTBHLEFBQUMsQUFBQyxBQUNoSTtBQUFDO0FBRUQsQUFBTSxtQkFBQyxBQUFhLGNBQUMsQUFBVSxBQUFDLEFBQ3BDO0FBQUMsQUFDSjs7OztFQXBEdUUsOEJBQTJCO0FBQTdFLEFBQXlDLGdFQUQ5RCxZQUFVLEFBQUUsY0FrQkosbUJBQUEsWUFBTSxPQUFDLHFCQUFrQixtQkFBQyxBQUErQixBQUFDLG1DQUUxRCxtQkFBQSxZQUFNLE9BQUMscUJBQWtCLG1CQUFDLEFBQWdCLEFBQUMsb0JBQzNDLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBUSxBQUFDLGtGQXBCdEIsQUFBeUMsQUFvRDlEO0FBcERxQixvREFBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3RhYmxlLCBpbmplY3QgfSBmcm9tICdpbnZlcnNpZnknO1xuaW1wb3J0IHsgU2VydmljZUlkZW50aWZpZXJzIH0gZnJvbSAnLi4vLi4vLi4vY29udGFpbmVyL1NlcnZpY2VJZGVudGlmaWVycyc7XG5cbmltcG9ydCAqIGFzIEVTVHJlZSBmcm9tICdlc3RyZWUnO1xuXG5pbXBvcnQgeyBUQ29udHJvbEZsb3dDdXN0b21Ob2RlRmFjdG9yeSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2NvbnRhaW5lci9jdXN0b20tbm9kZXMvVENvbnRyb2xGbG93Q3VzdG9tTm9kZUZhY3RvcnknO1xuaW1wb3J0IHsgVFN0YXRlbWVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL25vZGUvVFN0YXRlbWVudCc7XG5cbmltcG9ydCB7IElDdXN0b21Ob2RlIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcy9jdXN0b20tbm9kZXMvSUN1c3RvbU5vZGUnO1xuaW1wb3J0IHsgSU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzL29wdGlvbnMvSU9wdGlvbnMnO1xuaW1wb3J0IHsgSVJhbmRvbUdlbmVyYXRvciB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvdXRpbHMvSVJhbmRvbUdlbmVyYXRvcic7XG5cbmltcG9ydCB7IENvbnRyb2xGbG93Q3VzdG9tTm9kZSB9IGZyb20gJy4uLy4uLy4uL2VudW1zL2NvbnRhaW5lci9jdXN0b20tbm9kZXMvQ29udHJvbEZsb3dDdXN0b21Ob2RlJztcblxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sRmxvd1JlcGxhY2VyIH0gZnJvbSAnLi9BYnN0cmFjdENvbnRyb2xGbG93UmVwbGFjZXInO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uL25vZGUvTm9kZSc7XG5cbkBpbmplY3RhYmxlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFeHByZXNzaW9uV2l0aE9wZXJhdG9yQ29udHJvbEZsb3dSZXBsYWNlciBleHRlbmRzIEFic3RyYWN0Q29udHJvbEZsb3dSZXBsYWNlciB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0lPcHRpb25zfVxuICAgICAqL1xuICAgIHByb3RlY3RlZCByZWFkb25seSBvcHRpb25zOiBJT3B0aW9ucztcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBzdHJpbmdbXT4+fVxuICAgICAqL1xuICAgIHByb3RlY3RlZCByZWFkb25seSByZXBsYWNlckRhdGFCeUNvbnRyb2xGbG93U3RvcmFnZUlkOiBNYXAgPHN0cmluZywgTWFwPHN0cmluZywgc3RyaW5nW10+PiA9IG5ldyBNYXAoKTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VENvbnRyb2xGbG93Q3VzdG9tTm9kZUZhY3Rvcnl9IGNvbnRyb2xGbG93Q3VzdG9tTm9kZUZhY3RvcnlcbiAgICAgKiBAcGFyYW0ge0lSYW5kb21HZW5lcmF0b3J9IHJhbmRvbUdlbmVyYXRvclxuICAgICAqIEBwYXJhbSB7SU9wdGlvbnN9IG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIEBpbmplY3QoU2VydmljZUlkZW50aWZpZXJzLkZhY3RvcnlfX0lDb250cm9sRmxvd0N1c3RvbU5vZGUpXG4gICAgICAgICAgICBjb250cm9sRmxvd0N1c3RvbU5vZGVGYWN0b3J5OiBUQ29udHJvbEZsb3dDdXN0b21Ob2RlRmFjdG9yeSxcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuSVJhbmRvbUdlbmVyYXRvcikgcmFuZG9tR2VuZXJhdG9yOiBJUmFuZG9tR2VuZXJhdG9yLFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JT3B0aW9ucykgb3B0aW9uczogSU9wdGlvbnNcbiAgICApIHtcbiAgICAgICAgc3VwZXIoY29udHJvbEZsb3dDdXN0b21Ob2RlRmFjdG9yeSwgcmFuZG9tR2VuZXJhdG9yLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udHJvbEZsb3dTdG9yYWdlSWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RvcmFnZUtleVxuICAgICAqIEBwYXJhbSB7RXhwcmVzc2lvbn0gbGVmdEV4cHJlc3Npb25cbiAgICAgKiBAcGFyYW0ge0V4cHJlc3Npb259IHJpZ2h0RXhwcmVzc2lvblxuICAgICAqIEByZXR1cm5zIHtOb2RlfVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRDb250cm9sRmxvd1N0b3JhZ2VDYWxsTm9kZSAoXG4gICAgICAgIGNvbnRyb2xGbG93U3RvcmFnZUlkOiBzdHJpbmcsXG4gICAgICAgIHN0b3JhZ2VLZXk6IHN0cmluZyxcbiAgICAgICAgbGVmdEV4cHJlc3Npb246IEVTVHJlZS5FeHByZXNzaW9uLFxuICAgICAgICByaWdodEV4cHJlc3Npb246IEVTVHJlZS5FeHByZXNzaW9uXG4gICAgKTogRVNUcmVlLk5vZGUge1xuICAgICAgICBjb25zdCBjb250cm9sRmxvd1N0b3JhZ2VDYWxsQ3VzdG9tTm9kZTogSUN1c3RvbU5vZGUgPSB0aGlzLmNvbnRyb2xGbG93Q3VzdG9tTm9kZUZhY3RvcnkoXG4gICAgICAgICAgICBDb250cm9sRmxvd0N1c3RvbU5vZGUuRXhwcmVzc2lvbldpdGhPcGVyYXRvckNvbnRyb2xGbG93U3RvcmFnZUNhbGxOb2RlXG4gICAgICAgICk7XG5cbiAgICAgICAgY29udHJvbEZsb3dTdG9yYWdlQ2FsbEN1c3RvbU5vZGUuaW5pdGlhbGl6ZShjb250cm9sRmxvd1N0b3JhZ2VJZCwgc3RvcmFnZUtleSwgbGVmdEV4cHJlc3Npb24sIHJpZ2h0RXhwcmVzc2lvbik7XG5cbiAgICAgICAgY29uc3Qgc3RhdGVtZW50Tm9kZTogVFN0YXRlbWVudCA9IGNvbnRyb2xGbG93U3RvcmFnZUNhbGxDdXN0b21Ob2RlLmdldE5vZGUoKVswXTtcblxuICAgICAgICBpZiAoIXN0YXRlbWVudE5vZGUgfHwgIU5vZGUuaXNFeHByZXNzaW9uU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcXGBjb250cm9sRmxvd1N0b3JhZ2VDYWxsQ3VzdG9tTm9kZS5nZXROb2RlKClbMF1cXGAgc2hvdWxkIHJldHVybnMgYXJyYXkgd2l0aCBcXGBFeHByZXNzaW9uU3RhdGVtZW50XFxgIG5vZGVgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdGF0ZW1lbnROb2RlLmV4cHJlc3Npb247XG4gICAgfVxufVxuIl19