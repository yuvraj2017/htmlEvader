"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../../container/ServiceIdentifiers");
var ControlFlowCustomNode_1 = require("../../../enums/container/custom-nodes/ControlFlowCustomNode");
var AbstractControlFlowReplacer_1 = require("./AbstractControlFlowReplacer");
var Node_1 = require("../../../node/Node");
var StringLiteralControlFlowReplacer = StringLiteralControlFlowReplacer_1 = function (_AbstractControlFlowR) {
    _inherits(StringLiteralControlFlowReplacer, _AbstractControlFlowR);

    function StringLiteralControlFlowReplacer(controlFlowCustomNodeFactory, randomGenerator, options) {
        _classCallCheck(this, StringLiteralControlFlowReplacer);

        return _possibleConstructorReturn(this, (StringLiteralControlFlowReplacer.__proto__ || Object.getPrototypeOf(StringLiteralControlFlowReplacer)).call(this, controlFlowCustomNodeFactory, randomGenerator, options));
    }

    _createClass(StringLiteralControlFlowReplacer, [{
        key: "replace",
        value: function replace(literalNode, parentNode, controlFlowStorage) {
            if (Node_1.Node.isPropertyNode(parentNode) && parentNode.key === literalNode) {
                return literalNode;
            }
            if (typeof literalNode.value !== 'string' || literalNode.value.length < 3) {
                return literalNode;
            }
            var replacerId = String(literalNode.value);
            var literalFunctionCustomNode = this.controlFlowCustomNodeFactory(ControlFlowCustomNode_1.ControlFlowCustomNode.StringLiteralNode);
            literalFunctionCustomNode.initialize(literalNode.value);
            var storageKey = this.insertCustomNodeToControlFlowStorage(literalFunctionCustomNode, controlFlowStorage, replacerId, StringLiteralControlFlowReplacer_1.usingExistingIdentifierChance);
            return this.getControlFlowStorageCallNode(controlFlowStorage.getStorageId(), storageKey);
        }
    }, {
        key: "getControlFlowStorageCallNode",
        value: function getControlFlowStorageCallNode(controlFlowStorageId, storageKey) {
            var controlFlowStorageCallCustomNode = this.controlFlowCustomNodeFactory(ControlFlowCustomNode_1.ControlFlowCustomNode.StringLiteralControlFlowStorageCallNode);
            controlFlowStorageCallCustomNode.initialize(controlFlowStorageId, storageKey);
            var statementNode = controlFlowStorageCallCustomNode.getNode()[0];
            if (!statementNode || !Node_1.Node.isExpressionStatementNode(statementNode)) {
                throw new Error("`controlFlowStorageCallCustomNode.getNode()[0]` should returns array with `ExpressionStatement` node");
            }
            return statementNode.expression;
        }
    }]);

    return StringLiteralControlFlowReplacer;
}(AbstractControlFlowReplacer_1.AbstractControlFlowReplacer);
StringLiteralControlFlowReplacer.usingExistingIdentifierChance = 1;
StringLiteralControlFlowReplacer = StringLiteralControlFlowReplacer_1 = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.Factory__IControlFlowCustomNode)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(2, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Function, Object, Object])], StringLiteralControlFlowReplacer);
exports.StringLiteralControlFlowReplacer = StringLiteralControlFlowReplacer;
var StringLiteralControlFlowReplacer_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyaW5nTGl0ZXJhbENvbnRyb2xGbG93UmVwbGFjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbm9kZS10cmFuc2Zvcm1lcnMvY29udHJvbC1mbG93LXRyYW5zZm9ybWVycy9jb250cm9sLWZsb3ctcmVwbGFjZXJzL1N0cmluZ0xpdGVyYWxDb250cm9sRmxvd1JlcGxhY2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDBCQUErQztBQUMvQyxtQ0FBMkU7QUFZM0Usc0NBQW9HO0FBRXBHLDRDQUE0RTtBQUM1RSxxQkFBMEM7QUFHMUMsSUFBYSxBQUFnQztBQUE3QyxBQUE4Qzs7QUFXMUMsOENBRVEsQUFBMkQsOEJBQ2xCLEFBQWlDLGlCQUN6QyxBQUFpQjtBQUV0RCxBQUFLOzttS0FBQyxBQUE0Qiw4QkFBRSxBQUFlLGlCQUFFLEFBQU8sQUFBQyxBQUFDLEFBQ2xFO0FBQUMsQUFRTSxBQUFPOzs7O2dDQUNWLEFBQTJCLGFBQzNCLEFBQXVCLFlBQ3ZCLEFBQTBDO0FBRTFDLEFBQUUsQUFBQyxnQkFBQyxPQUFJLEtBQUMsQUFBYyxlQUFDLEFBQVUsQUFBQyxlQUFJLEFBQVUsV0FBQyxBQUFHLFFBQUssQUFBVyxBQUFDLGFBQUMsQUFBQztBQUNwRSxBQUFNLHVCQUFDLEFBQVcsQUFBQyxBQUN2QjtBQUFDO0FBRUQsQUFBRSxBQUFDLGdCQUFDLE9BQU8sQUFBVyxZQUFDLEFBQUssVUFBSyxBQUFRLFlBQUksQUFBVyxZQUFDLEFBQUssTUFBQyxBQUFNLFNBQUcsQUFBQyxBQUFDLEdBQUMsQUFBQztBQUN4RSxBQUFNLHVCQUFDLEFBQVcsQUFBQyxBQUN2QjtBQUFDO0FBRUQsZ0JBQU0sQUFBVSxhQUFXLEFBQU0sT0FBQyxBQUFXLFlBQUMsQUFBSyxBQUFDLEFBQUM7QUFDckQsZ0JBQU0sQUFBeUIsNEJBQWdCLEFBQUksS0FBQyxBQUE0Qiw2QkFDNUUsd0JBQXFCLHNCQUFDLEFBQWlCLEFBQzFDLEFBQUM7QUFFRixBQUF5QixzQ0FBQyxBQUFVLFdBQUMsQUFBVyxZQUFDLEFBQUssQUFBQyxBQUFDO0FBRXhELGdCQUFNLEFBQVUsYUFBVyxBQUFJLEtBQUMsQUFBb0MscUNBQ2hFLEFBQXlCLDJCQUN6QixBQUFrQixvQkFDbEIsQUFBVSxZQUNWLEFBQWdDLG1DQUFDLEFBQTZCLEFBQ2pFLEFBQUM7QUFFRixBQUFNLG1CQUFDLEFBQUksS0FBQyxBQUE2Qiw4QkFBQyxBQUFrQixtQkFBQyxBQUFZLEFBQUUsZ0JBQUUsQUFBVSxBQUFDLEFBQUMsQUFDN0Y7QUFBQyxBQU9TLEFBQTZCOzs7c0RBQ25DLEFBQTRCLHNCQUM1QixBQUFrQjtBQUVsQixnQkFBTSxBQUFnQyxtQ0FBZ0IsQUFBSSxLQUFDLEFBQTRCLDZCQUNuRix3QkFBcUIsc0JBQUMsQUFBdUMsQUFDaEUsQUFBQztBQUVGLEFBQWdDLDZDQUFDLEFBQVUsV0FBQyxBQUFvQixzQkFBRSxBQUFVLEFBQUMsQUFBQztBQUU5RSxnQkFBTSxBQUFhLGdCQUFlLEFBQWdDLGlDQUFDLEFBQU8sQUFBRSxVQUFDLEFBQUMsQUFBQyxBQUFDO0FBRWhGLEFBQUUsQUFBQyxnQkFBQyxDQUFDLEFBQWEsaUJBQUksQ0FBQyxPQUFJLEtBQUMsQUFBeUIsMEJBQUMsQUFBYSxBQUFDLEFBQUMsZ0JBQUMsQUFBQztBQUNuRSxzQkFBTSxJQUFJLEFBQUssQUFBQyxBQUEwRyxBQUFDLEFBQUMsQUFDaEk7QUFBQztBQUVELEFBQU0sbUJBQUMsQUFBYSxjQUFDLEFBQVUsQUFBQyxBQUNwQztBQUFDLEFBQ0o7Ozs7RUEvRXFELDhCQUEyQjtBQUlyRCxpQ0FBNkIsZ0NBQVcsQUFBQyxBQUFDO0FBSnpELEFBQWdDLDRGQUQ1QyxZQUFVLEFBQUUsY0FhSixtQkFBQSxZQUFNLE9BQUMscUJBQWtCLG1CQUFDLEFBQStCLEFBQUMsbUNBRTFELG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBZ0IsQUFBQyxvQkFDM0MsbUJBQUEsWUFBTSxPQUFDLHFCQUFrQixtQkFBQyxBQUFRLEFBQUMsa0ZBZi9CLEFBQWdDLEFBK0U1QztBQS9FWSwyQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3RhYmxlLCBpbmplY3QgfSBmcm9tICdpbnZlcnNpZnknO1xuaW1wb3J0IHsgU2VydmljZUlkZW50aWZpZXJzIH0gZnJvbSAnLi4vLi4vLi4vY29udGFpbmVyL1NlcnZpY2VJZGVudGlmaWVycyc7XG5cbmltcG9ydCAqIGFzIEVTVHJlZSBmcm9tICdlc3RyZWUnO1xuXG5pbXBvcnQgeyBUQ29udHJvbEZsb3dDdXN0b21Ob2RlRmFjdG9yeSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2NvbnRhaW5lci9jdXN0b20tbm9kZXMvVENvbnRyb2xGbG93Q3VzdG9tTm9kZUZhY3RvcnknO1xuaW1wb3J0IHsgVFN0YXRlbWVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL25vZGUvVFN0YXRlbWVudCc7XG5cbmltcG9ydCB7IElDdXN0b21Ob2RlIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcy9jdXN0b20tbm9kZXMvSUN1c3RvbU5vZGUnO1xuaW1wb3J0IHsgSU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzL29wdGlvbnMvSU9wdGlvbnMnO1xuaW1wb3J0IHsgSVJhbmRvbUdlbmVyYXRvciB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvdXRpbHMvSVJhbmRvbUdlbmVyYXRvcic7XG5pbXBvcnQgeyBJU3RvcmFnZSB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvc3RvcmFnZXMvSVN0b3JhZ2UnO1xuXG5pbXBvcnQgeyBDb250cm9sRmxvd0N1c3RvbU5vZGUgfSBmcm9tICcuLi8uLi8uLi9lbnVtcy9jb250YWluZXIvY3VzdG9tLW5vZGVzL0NvbnRyb2xGbG93Q3VzdG9tTm9kZSc7XG5cbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbEZsb3dSZXBsYWNlciB9IGZyb20gJy4vQWJzdHJhY3RDb250cm9sRmxvd1JlcGxhY2VyJztcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi9ub2RlL05vZGUnO1xuXG5AaW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3RyaW5nTGl0ZXJhbENvbnRyb2xGbG93UmVwbGFjZXIgZXh0ZW5kcyBBYnN0cmFjdENvbnRyb2xGbG93UmVwbGFjZXIge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgdXNpbmdFeGlzdGluZ0lkZW50aWZpZXJDaGFuY2U6IG51bWJlciA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RDb250cm9sRmxvd0N1c3RvbU5vZGVGYWN0b3J5fSBjb250cm9sRmxvd0N1c3RvbU5vZGVGYWN0b3J5XG4gICAgICogQHBhcmFtIHtJUmFuZG9tR2VuZXJhdG9yfSByYW5kb21HZW5lcmF0b3JcbiAgICAgKiBAcGFyYW0ge0lPcHRpb25zfSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5GYWN0b3J5X19JQ29udHJvbEZsb3dDdXN0b21Ob2RlKVxuICAgICAgICAgICAgY29udHJvbEZsb3dDdXN0b21Ob2RlRmFjdG9yeTogVENvbnRyb2xGbG93Q3VzdG9tTm9kZUZhY3RvcnksXG4gICAgICAgIEBpbmplY3QoU2VydmljZUlkZW50aWZpZXJzLklSYW5kb21HZW5lcmF0b3IpIHJhbmRvbUdlbmVyYXRvcjogSVJhbmRvbUdlbmVyYXRvcixcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuSU9wdGlvbnMpIG9wdGlvbnM6IElPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGNvbnRyb2xGbG93Q3VzdG9tTm9kZUZhY3RvcnksIHJhbmRvbUdlbmVyYXRvciwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtMaXRlcmFsfSBsaXRlcmFsTm9kZVxuICAgICAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50Tm9kZVxuICAgICAqIEBwYXJhbSB7SVN0b3JhZ2U8SUN1c3RvbU5vZGU+fSBjb250cm9sRmxvd1N0b3JhZ2VcbiAgICAgKiBAcmV0dXJucyB7Tm9kZX1cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVwbGFjZSAoXG4gICAgICAgIGxpdGVyYWxOb2RlOiBFU1RyZWUuTGl0ZXJhbCxcbiAgICAgICAgcGFyZW50Tm9kZTogRVNUcmVlLk5vZGUsXG4gICAgICAgIGNvbnRyb2xGbG93U3RvcmFnZTogSVN0b3JhZ2UgPElDdXN0b21Ob2RlPlxuICAgICk6IEVTVHJlZS5Ob2RlIHtcbiAgICAgICAgaWYgKE5vZGUuaXNQcm9wZXJ0eU5vZGUocGFyZW50Tm9kZSkgJiYgcGFyZW50Tm9kZS5rZXkgPT09IGxpdGVyYWxOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbGl0ZXJhbE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGxpdGVyYWxOb2RlLnZhbHVlICE9PSAnc3RyaW5nJyB8fCBsaXRlcmFsTm9kZS52YWx1ZS5sZW5ndGggPCAzKSB7XG4gICAgICAgICAgICByZXR1cm4gbGl0ZXJhbE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXBsYWNlcklkOiBzdHJpbmcgPSBTdHJpbmcobGl0ZXJhbE5vZGUudmFsdWUpO1xuICAgICAgICBjb25zdCBsaXRlcmFsRnVuY3Rpb25DdXN0b21Ob2RlOiBJQ3VzdG9tTm9kZSA9IHRoaXMuY29udHJvbEZsb3dDdXN0b21Ob2RlRmFjdG9yeShcbiAgICAgICAgICAgIENvbnRyb2xGbG93Q3VzdG9tTm9kZS5TdHJpbmdMaXRlcmFsTm9kZVxuICAgICAgICApO1xuXG4gICAgICAgIGxpdGVyYWxGdW5jdGlvbkN1c3RvbU5vZGUuaW5pdGlhbGl6ZShsaXRlcmFsTm9kZS52YWx1ZSk7XG5cbiAgICAgICAgY29uc3Qgc3RvcmFnZUtleTogc3RyaW5nID0gdGhpcy5pbnNlcnRDdXN0b21Ob2RlVG9Db250cm9sRmxvd1N0b3JhZ2UoXG4gICAgICAgICAgICBsaXRlcmFsRnVuY3Rpb25DdXN0b21Ob2RlLFxuICAgICAgICAgICAgY29udHJvbEZsb3dTdG9yYWdlLFxuICAgICAgICAgICAgcmVwbGFjZXJJZCxcbiAgICAgICAgICAgIFN0cmluZ0xpdGVyYWxDb250cm9sRmxvd1JlcGxhY2VyLnVzaW5nRXhpc3RpbmdJZGVudGlmaWVyQ2hhbmNlXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29udHJvbEZsb3dTdG9yYWdlQ2FsbE5vZGUoY29udHJvbEZsb3dTdG9yYWdlLmdldFN0b3JhZ2VJZCgpLCBzdG9yYWdlS2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udHJvbEZsb3dTdG9yYWdlSWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RvcmFnZUtleVxuICAgICAqIEByZXR1cm5zIHtOb2RlfVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRDb250cm9sRmxvd1N0b3JhZ2VDYWxsTm9kZSAoXG4gICAgICAgIGNvbnRyb2xGbG93U3RvcmFnZUlkOiBzdHJpbmcsXG4gICAgICAgIHN0b3JhZ2VLZXk6IHN0cmluZ1xuICAgICk6IEVTVHJlZS5Ob2RlIHtcbiAgICAgICAgY29uc3QgY29udHJvbEZsb3dTdG9yYWdlQ2FsbEN1c3RvbU5vZGU6IElDdXN0b21Ob2RlID0gdGhpcy5jb250cm9sRmxvd0N1c3RvbU5vZGVGYWN0b3J5KFxuICAgICAgICAgICAgQ29udHJvbEZsb3dDdXN0b21Ob2RlLlN0cmluZ0xpdGVyYWxDb250cm9sRmxvd1N0b3JhZ2VDYWxsTm9kZVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnRyb2xGbG93U3RvcmFnZUNhbGxDdXN0b21Ob2RlLmluaXRpYWxpemUoY29udHJvbEZsb3dTdG9yYWdlSWQsIHN0b3JhZ2VLZXkpO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlbWVudE5vZGU6IFRTdGF0ZW1lbnQgPSBjb250cm9sRmxvd1N0b3JhZ2VDYWxsQ3VzdG9tTm9kZS5nZXROb2RlKClbMF07XG5cbiAgICAgICAgaWYgKCFzdGF0ZW1lbnROb2RlIHx8ICFOb2RlLmlzRXhwcmVzc2lvblN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXFxgY29udHJvbEZsb3dTdG9yYWdlQ2FsbEN1c3RvbU5vZGUuZ2V0Tm9kZSgpWzBdXFxgIHNob3VsZCByZXR1cm5zIGFycmF5IHdpdGggXFxgRXhwcmVzc2lvblN0YXRlbWVudFxcYCBub2RlYCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhdGVtZW50Tm9kZS5leHByZXNzaW9uO1xuICAgIH1cbn1cbiJdfQ==