"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../../container/ServiceIdentifiers");
var ControlFlowCustomNode_1 = require("../../../enums/container/custom-nodes/ControlFlowCustomNode");
var ExpressionWithOperatorControlFlowReplacer_1 = require("./ExpressionWithOperatorControlFlowReplacer");
var BinaryExpressionControlFlowReplacer = BinaryExpressionControlFlowReplacer_1 = function (_ExpressionWithOperat) {
    _inherits(BinaryExpressionControlFlowReplacer, _ExpressionWithOperat);

    function BinaryExpressionControlFlowReplacer(controlFlowCustomNodeFactory, randomGenerator, options) {
        _classCallCheck(this, BinaryExpressionControlFlowReplacer);

        return _possibleConstructorReturn(this, (BinaryExpressionControlFlowReplacer.__proto__ || Object.getPrototypeOf(BinaryExpressionControlFlowReplacer)).call(this, controlFlowCustomNodeFactory, randomGenerator, options));
    }

    _createClass(BinaryExpressionControlFlowReplacer, [{
        key: "replace",
        value: function replace(binaryExpressionNode, parentNode, controlFlowStorage) {
            var replacerId = binaryExpressionNode.operator;
            var binaryExpressionFunctionCustomNode = this.controlFlowCustomNodeFactory(ControlFlowCustomNode_1.ControlFlowCustomNode.BinaryExpressionFunctionNode);
            binaryExpressionFunctionCustomNode.initialize(replacerId);
            var storageKey = this.insertCustomNodeToControlFlowStorage(binaryExpressionFunctionCustomNode, controlFlowStorage, replacerId, BinaryExpressionControlFlowReplacer_1.usingExistingIdentifierChance);
            return this.getControlFlowStorageCallNode(controlFlowStorage.getStorageId(), storageKey, binaryExpressionNode.left, binaryExpressionNode.right);
        }
    }]);

    return BinaryExpressionControlFlowReplacer;
}(ExpressionWithOperatorControlFlowReplacer_1.ExpressionWithOperatorControlFlowReplacer);
BinaryExpressionControlFlowReplacer.usingExistingIdentifierChance = 0.5;
BinaryExpressionControlFlowReplacer = BinaryExpressionControlFlowReplacer_1 = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.Factory__IControlFlowCustomNode)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(2, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Function, Object, Object])], BinaryExpressionControlFlowReplacer);
exports.BinaryExpressionControlFlowReplacer = BinaryExpressionControlFlowReplacer;
var BinaryExpressionControlFlowReplacer_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmluYXJ5RXhwcmVzc2lvbkNvbnRyb2xGbG93UmVwbGFjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbm9kZS10cmFuc2Zvcm1lcnMvY29udHJvbC1mbG93LXRyYW5zZm9ybWVycy9jb250cm9sLWZsb3ctcmVwbGFjZXJzL0JpbmFyeUV4cHJlc3Npb25Db250cm9sRmxvd1JlcGxhY2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDBCQUErQztBQUMvQyxtQ0FBMkU7QUFXM0Usc0NBQW9HO0FBRXBHLDBEQUF3RztBQUd4RyxJQUFhLEFBQW1DO0FBQWhELEFBQWlEOztBQVc3QyxpREFFUSxBQUEyRCw4QkFDbEIsQUFBaUMsaUJBQ3pDLEFBQWlCO0FBRXRELEFBQUs7O3lLQUFDLEFBQTRCLDhCQUFFLEFBQWUsaUJBQUUsQUFBTyxBQUFDLEFBQUMsQUFDbEU7QUFBQyxBQVFNLEFBQU87Ozs7Z0NBQ1YsQUFBNkMsc0JBQzdDLEFBQXVCLFlBQ3ZCLEFBQTBDO0FBRTFDLGdCQUFNLEFBQVUsYUFBVyxBQUFvQixxQkFBQyxBQUFRLEFBQUM7QUFDekQsZ0JBQU0sQUFBa0MscUNBQWdCLEFBQUksS0FBQyxBQUE0Qiw2QkFDckYsd0JBQXFCLHNCQUFDLEFBQTRCLEFBQ3JELEFBQUM7QUFFRixBQUFrQywrQ0FBQyxBQUFVLFdBQUMsQUFBVSxBQUFDLEFBQUM7QUFFMUQsZ0JBQU0sQUFBVSxhQUFXLEFBQUksS0FBQyxBQUFvQyxxQ0FDaEUsQUFBa0Msb0NBQ2xDLEFBQWtCLG9CQUNsQixBQUFVLFlBQ1YsQUFBbUMsc0NBQUMsQUFBNkIsQUFDcEUsQUFBQztBQUVGLEFBQU0sbUJBQUMsQUFBSSxLQUFDLEFBQTZCLDhCQUNyQyxBQUFrQixtQkFBQyxBQUFZLEFBQUUsZ0JBQ2pDLEFBQVUsWUFDVixBQUFvQixxQkFBQyxBQUFJLE1BQ3pCLEFBQW9CLHFCQUFDLEFBQUssQUFDN0IsQUFBQyxBQUNOO0FBQUMsQUFDSjs7OztFQXBEd0QsNENBQXlDO0FBSXRFLG9DQUE2QixnQ0FBVyxBQUFHLEFBQUM7QUFKM0QsQUFBbUMsa0dBRC9DLFlBQVUsQUFBRSxjQWFKLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBK0IsQUFBQyxtQ0FFMUQsbUJBQUEsWUFBTSxPQUFDLHFCQUFrQixtQkFBQyxBQUFnQixBQUFDLG9CQUMzQyxtQkFBQSxZQUFNLE9BQUMscUJBQWtCLG1CQUFDLEFBQVEsQUFBQyxrRkFmL0IsQUFBbUMsQUFvRC9DO0FBcERZLDhDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdGFibGUsIGluamVjdCB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBTZXJ2aWNlSWRlbnRpZmllcnMgfSBmcm9tICcuLi8uLi8uLi9jb250YWluZXIvU2VydmljZUlkZW50aWZpZXJzJztcblxuaW1wb3J0ICogYXMgRVNUcmVlIGZyb20gJ2VzdHJlZSc7XG5cbmltcG9ydCB7IFRDb250cm9sRmxvd0N1c3RvbU5vZGVGYWN0b3J5IH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvY29udGFpbmVyL2N1c3RvbS1ub2Rlcy9UQ29udHJvbEZsb3dDdXN0b21Ob2RlRmFjdG9yeSc7XG5cbmltcG9ydCB7IElDdXN0b21Ob2RlIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcy9jdXN0b20tbm9kZXMvSUN1c3RvbU5vZGUnO1xuaW1wb3J0IHsgSU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzL29wdGlvbnMvSU9wdGlvbnMnO1xuaW1wb3J0IHsgSVJhbmRvbUdlbmVyYXRvciB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvdXRpbHMvSVJhbmRvbUdlbmVyYXRvcic7XG5pbXBvcnQgeyBJU3RvcmFnZSB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvc3RvcmFnZXMvSVN0b3JhZ2UnO1xuXG5pbXBvcnQgeyBDb250cm9sRmxvd0N1c3RvbU5vZGUgfSBmcm9tICcuLi8uLi8uLi9lbnVtcy9jb250YWluZXIvY3VzdG9tLW5vZGVzL0NvbnRyb2xGbG93Q3VzdG9tTm9kZSc7XG5cbmltcG9ydCB7IEV4cHJlc3Npb25XaXRoT3BlcmF0b3JDb250cm9sRmxvd1JlcGxhY2VyIH0gZnJvbSAnLi9FeHByZXNzaW9uV2l0aE9wZXJhdG9yQ29udHJvbEZsb3dSZXBsYWNlcic7XG5cbkBpbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCaW5hcnlFeHByZXNzaW9uQ29udHJvbEZsb3dSZXBsYWNlciBleHRlbmRzIEV4cHJlc3Npb25XaXRoT3BlcmF0b3JDb250cm9sRmxvd1JlcGxhY2VyIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IHVzaW5nRXhpc3RpbmdJZGVudGlmaWVyQ2hhbmNlOiBudW1iZXIgPSAwLjU7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RDb250cm9sRmxvd0N1c3RvbU5vZGVGYWN0b3J5fSBjb250cm9sRmxvd0N1c3RvbU5vZGVGYWN0b3J5XG4gICAgICogQHBhcmFtIHtJUmFuZG9tR2VuZXJhdG9yfSByYW5kb21HZW5lcmF0b3JcbiAgICAgKiBAcGFyYW0ge0lPcHRpb25zfSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5GYWN0b3J5X19JQ29udHJvbEZsb3dDdXN0b21Ob2RlKVxuICAgICAgICAgICAgY29udHJvbEZsb3dDdXN0b21Ob2RlRmFjdG9yeTogVENvbnRyb2xGbG93Q3VzdG9tTm9kZUZhY3RvcnksXG4gICAgICAgIEBpbmplY3QoU2VydmljZUlkZW50aWZpZXJzLklSYW5kb21HZW5lcmF0b3IpIHJhbmRvbUdlbmVyYXRvcjogSVJhbmRvbUdlbmVyYXRvcixcbiAgICAgICAgQGluamVjdChTZXJ2aWNlSWRlbnRpZmllcnMuSU9wdGlvbnMpIG9wdGlvbnM6IElPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGNvbnRyb2xGbG93Q3VzdG9tTm9kZUZhY3RvcnksIHJhbmRvbUdlbmVyYXRvciwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtCaW5hcnlFeHByZXNzaW9ufSBiaW5hcnlFeHByZXNzaW9uTm9kZVxuICAgICAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50Tm9kZVxuICAgICAqIEBwYXJhbSB7SVN0b3JhZ2U8SUN1c3RvbU5vZGU+fSBjb250cm9sRmxvd1N0b3JhZ2VcbiAgICAgKiBAcmV0dXJucyB7Tm9kZX1cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVwbGFjZSAoXG4gICAgICAgIGJpbmFyeUV4cHJlc3Npb25Ob2RlOiBFU1RyZWUuQmluYXJ5RXhwcmVzc2lvbixcbiAgICAgICAgcGFyZW50Tm9kZTogRVNUcmVlLk5vZGUsXG4gICAgICAgIGNvbnRyb2xGbG93U3RvcmFnZTogSVN0b3JhZ2UgPElDdXN0b21Ob2RlPlxuICAgICk6IEVTVHJlZS5Ob2RlIHtcbiAgICAgICAgY29uc3QgcmVwbGFjZXJJZDogc3RyaW5nID0gYmluYXJ5RXhwcmVzc2lvbk5vZGUub3BlcmF0b3I7XG4gICAgICAgIGNvbnN0IGJpbmFyeUV4cHJlc3Npb25GdW5jdGlvbkN1c3RvbU5vZGU6IElDdXN0b21Ob2RlID0gdGhpcy5jb250cm9sRmxvd0N1c3RvbU5vZGVGYWN0b3J5KFxuICAgICAgICAgICAgQ29udHJvbEZsb3dDdXN0b21Ob2RlLkJpbmFyeUV4cHJlc3Npb25GdW5jdGlvbk5vZGVcbiAgICAgICAgKTtcblxuICAgICAgICBiaW5hcnlFeHByZXNzaW9uRnVuY3Rpb25DdXN0b21Ob2RlLmluaXRpYWxpemUocmVwbGFjZXJJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RvcmFnZUtleTogc3RyaW5nID0gdGhpcy5pbnNlcnRDdXN0b21Ob2RlVG9Db250cm9sRmxvd1N0b3JhZ2UoXG4gICAgICAgICAgICBiaW5hcnlFeHByZXNzaW9uRnVuY3Rpb25DdXN0b21Ob2RlLFxuICAgICAgICAgICAgY29udHJvbEZsb3dTdG9yYWdlLFxuICAgICAgICAgICAgcmVwbGFjZXJJZCxcbiAgICAgICAgICAgIEJpbmFyeUV4cHJlc3Npb25Db250cm9sRmxvd1JlcGxhY2VyLnVzaW5nRXhpc3RpbmdJZGVudGlmaWVyQ2hhbmNlXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29udHJvbEZsb3dTdG9yYWdlQ2FsbE5vZGUoXG4gICAgICAgICAgICBjb250cm9sRmxvd1N0b3JhZ2UuZ2V0U3RvcmFnZUlkKCksXG4gICAgICAgICAgICBzdG9yYWdlS2V5LFxuICAgICAgICAgICAgYmluYXJ5RXhwcmVzc2lvbk5vZGUubGVmdCxcbiAgICAgICAgICAgIGJpbmFyeUV4cHJlc3Npb25Ob2RlLnJpZ2h0XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19