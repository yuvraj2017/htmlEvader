"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("../../container/ServiceIdentifiers");
var estraverse = require("estraverse");
var AbstractNodeTransformer_1 = require("../AbstractNodeTransformer");
var Node_1 = require("../../node/Node");
var Nodes_1 = require("../../node/Nodes");
var NodeUtils_1 = require("../../node/NodeUtils");
var DeadCodeInjectionTransformer = DeadCodeInjectionTransformer_1 = function (_AbstractNodeTransfor) {
    _inherits(DeadCodeInjectionTransformer, _AbstractNodeTransfor);

    function DeadCodeInjectionTransformer(randomGenerator, options) {
        _classCallCheck(this, DeadCodeInjectionTransformer);

        var _this = _possibleConstructorReturn(this, (DeadCodeInjectionTransformer.__proto__ || Object.getPrototypeOf(DeadCodeInjectionTransformer)).call(this, randomGenerator, options));

        _this.collectedBlockStatements = [];
        return _this;
    }

    _createClass(DeadCodeInjectionTransformer, [{
        key: "getVisitor",
        value: function getVisitor() {
            var _this2 = this;

            return {
                leave: function leave(node, parentNode) {
                    if (Node_1.Node.isProgramNode(node)) {
                        return _this2.transformNode(node, parentNode);
                    }
                }
            };
        }
    }, {
        key: "transformNode",
        value: function transformNode(programNode, parentNode) {
            this.transformProgramNode(programNode);
            return programNode;
        }
    }, {
        key: "collectBlockStatementNodes",
        value: function collectBlockStatementNodes(blockStatementNode, collectedBlockStatements) {
            var _this3 = this;

            var clonedBlockStatementNode = NodeUtils_1.NodeUtils.clone(blockStatementNode);
            var nestedBlockStatementsCount = 0,
                isValidBlockStatementNode = true;
            estraverse.replace(clonedBlockStatementNode, {
                enter: function enter(node, parentNode) {
                    if (Node_1.Node.isBlockStatementNode(node)) {
                        nestedBlockStatementsCount++;
                    }
                    if (nestedBlockStatementsCount > DeadCodeInjectionTransformer_1.maxNestedBlockStatementsCount || Node_1.Node.isBreakStatementNode(node) || Node_1.Node.isContinueStatementNode(node)) {
                        isValidBlockStatementNode = false;
                        return estraverse.VisitorOption.Break;
                    }
                    if (Node_1.Node.isIdentifierNode(node) && !Node_1.Node.isMemberExpressionNode(parentNode)) {
                        node.name = _this3.randomGenerator.getRandomVariableName(6);
                    }
                    return node;
                }
            });
            if (!isValidBlockStatementNode) {
                return;
            }
            collectedBlockStatements.push(clonedBlockStatementNode);
        }
    }, {
        key: "replaceBlockStatementNode",
        value: function replaceBlockStatementNode(blockStatementNode, randomBlockStatementNode) {
            var random1 = this.randomGenerator.getMathRandom() > 0.5;
            var random2 = this.randomGenerator.getMathRandom() > 0.5;
            var operator = random1 ? '===' : '!==';
            var leftString = this.randomGenerator.getRandomString(3);
            var rightString = random2 ? leftString : this.randomGenerator.getRandomString(3);
            var consequent = void 0,
                alternate = void 0;
            if (random1 && random2 || !random1 && !random2) {
                consequent = blockStatementNode;
                alternate = randomBlockStatementNode;
            } else {
                consequent = randomBlockStatementNode;
                alternate = blockStatementNode;
            }
            var newBlockStatementNode = Nodes_1.Nodes.getBlockStatementNode([Nodes_1.Nodes.getIfStatementNode(Nodes_1.Nodes.getBinaryExpressionNode(operator, Nodes_1.Nodes.getLiteralNode(leftString), Nodes_1.Nodes.getLiteralNode(rightString)), consequent, alternate)]);
            newBlockStatementNode = NodeUtils_1.NodeUtils.parentize(newBlockStatementNode);
            return newBlockStatementNode;
        }
    }, {
        key: "transformProgramNode",
        value: function transformProgramNode(programNode) {
            var _this4 = this;

            estraverse.traverse(programNode, {
                enter: function enter(node, parentNode) {
                    if (!Node_1.Node.isBlockStatementNode(node)) {
                        return;
                    }
                    _this4.collectBlockStatementNodes(node, _this4.collectedBlockStatements);
                }
            });
            if (this.collectedBlockStatements.length < DeadCodeInjectionTransformer_1.minCollectedBlockStatementsCount) {
                return;
            }
            estraverse.replace(programNode, {
                leave: function leave(node, parentNode) {
                    if (!_this4.collectedBlockStatements.length) {
                        return estraverse.VisitorOption.Break;
                    }
                    if (!Node_1.Node.isBlockStatementNode(node) || _this4.randomGenerator.getMathRandom() > _this4.options.deadCodeInjectionThreshold) {
                        return node;
                    }
                    var minInteger = 0;
                    var maxInteger = _this4.collectedBlockStatements.length - 1;
                    var randomIndex = _this4.randomGenerator.getRandomInteger(minInteger, maxInteger);
                    var randomBlockStatementNode = _this4.collectedBlockStatements.splice(randomIndex, 1)[0];
                    if (randomBlockStatementNode === node) {
                        return node;
                    }
                    return _this4.replaceBlockStatementNode(node, randomBlockStatementNode);
                }
            });
        }
    }]);

    return DeadCodeInjectionTransformer;
}(AbstractNodeTransformer_1.AbstractNodeTransformer);
DeadCodeInjectionTransformer.maxNestedBlockStatementsCount = 4;
DeadCodeInjectionTransformer.minCollectedBlockStatementsCount = 5;
DeadCodeInjectionTransformer = DeadCodeInjectionTransformer_1 = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Object, Object])], DeadCodeInjectionTransformer);
exports.DeadCodeInjectionTransformer = DeadCodeInjectionTransformer;
var DeadCodeInjectionTransformer_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,