"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var ServiceIdentifiers_1 = require("./container/ServiceIdentifiers");
var SourceMapMode_1 = require("./enums/SourceMapMode");
var SourceMapCorrector = function () {
    function SourceMapCorrector(obfuscationResultFactory, cryptUtils, options) {
        _classCallCheck(this, SourceMapCorrector);

        this.obfuscationResultFactory = obfuscationResultFactory;
        this.cryptUtils = cryptUtils;
        this.options = options;
    }

    _createClass(SourceMapCorrector, [{
        key: "correct",
        value: function correct(obfuscatedCode, sourceMap) {
            return this.obfuscationResultFactory(this.correctObfuscatedCode(obfuscatedCode, sourceMap), sourceMap);
        }
    }, {
        key: "correctObfuscatedCode",
        value: function correctObfuscatedCode(obfuscatedCode, sourceMap) {
            if (!sourceMap) {
                return obfuscatedCode;
            }
            var sourceMapUrl = this.options.sourceMapBaseUrl + this.options.sourceMapFileName;
            var sourceMappingUrl = '//# sourceMappingURL=';
            switch (this.options.sourceMapMode) {
                case SourceMapMode_1.SourceMapMode.Inline:
                    sourceMappingUrl += "data:application/json;base64," + this.cryptUtils.btoa(sourceMap);
                    break;
                case SourceMapMode_1.SourceMapMode.Separate:
                default:
                    if (!sourceMapUrl) {
                        return obfuscatedCode;
                    }
                    sourceMappingUrl += sourceMapUrl;
                    break;
            }
            return obfuscatedCode + "\n" + sourceMappingUrl;
        }
    }]);

    return SourceMapCorrector;
}();
SourceMapCorrector = tslib_1.__decorate([inversify_1.injectable(), tslib_1.__param(0, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.Factory__IObfuscationResult)), tslib_1.__param(1, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.ICryptUtils)), tslib_1.__param(2, inversify_1.inject(ServiceIdentifiers_1.ServiceIdentifiers.IOptions)), tslib_1.__metadata("design:paramtypes", [Function, Object, Object])], SourceMapCorrector);
exports.SourceMapCorrector = SourceMapCorrector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU291cmNlTWFwQ29ycmVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1NvdXJjZU1hcENvcnJlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLDBCQUErQztBQUMvQyxtQ0FBb0U7QUFTcEUsOEJBQXNEO0FBR3REO0FBcUJJLGdDQUM0RCxBQUFtRCwwQkFDbkUsQUFBdUIsWUFDMUIsQUFBaUI7OztBQUV0RCxBQUFJLGFBQUMsQUFBd0IsMkJBQUcsQUFBd0IsQUFBQztBQUN6RCxBQUFJLGFBQUMsQUFBVSxhQUFHLEFBQVUsQUFBQztBQUM3QixBQUFJLGFBQUMsQUFBTyxVQUFHLEFBQU8sQUFBQyxBQUMzQjtBQUFDLEFBT00sQUFBTzs7QUFwQ2xCLEFBQWEsQUFBa0I7O2dDQW9DWCxBQUFzQixnQkFBRSxBQUFpQjtBQUNyRCxBQUFNLG1CQUFDLEFBQUksS0FBQyxBQUF3Qix5QkFDaEMsQUFBSSxLQUFDLEFBQXFCLHNCQUFDLEFBQWMsZ0JBQUUsQUFBUyxBQUFDLFlBQ3JELEFBQVMsQUFDWixBQUFDLEFBQ047QUFBQyxBQU9PLEFBQXFCOzs7OENBQUUsQUFBc0IsZ0JBQUUsQUFBaUI7QUFDcEUsQUFBRSxBQUFDLGdCQUFDLENBQUMsQUFBUyxBQUFDLFdBQUMsQUFBQztBQUNiLEFBQU0sdUJBQUMsQUFBYyxBQUFDLEFBQzFCO0FBQUM7QUFFRCxnQkFBTSxBQUFZLGVBQVcsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFnQixtQkFBRyxBQUFJLEtBQUMsQUFBTyxRQUFDLEFBQWlCLEFBQUM7QUFFNUYsZ0JBQUksQUFBZ0IsbUJBQVcsQUFBdUIsQUFBQztBQUV2RCxBQUFNLEFBQUMsb0JBQUMsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFhLEFBQUMsQUFBQyxBQUFDO0FBQ2pDLHFCQUFLLGdCQUFhLGNBQUMsQUFBTTtBQUNyQixBQUFnQixBQUFJLDBFQUFnQyxBQUFJLEtBQUMsQUFBVSxXQUFDLEFBQUksS0FBQyxBQUFTLEFBQUMsQUFBRSxBQUFDO0FBRXRGLEFBQUssQUFBQztBQUVWLHFCQUFLLGdCQUFhLGNBQUMsQUFBUSxBQUFDO0FBQzVCO0FBQ0ksQUFBRSxBQUFDLHdCQUFDLENBQUMsQUFBWSxBQUFDLGNBQUMsQUFBQztBQUNoQixBQUFNLCtCQUFDLEFBQWMsQUFBQyxBQUMxQjtBQUFDO0FBRUQsQUFBZ0Isd0NBQUksQUFBWSxBQUFDO0FBRWpDLEFBQUssQUFBQyxBQUNkLEFBQUM7O0FBRUQsQUFBTSxBQUFDLG1CQUFHLEFBQWMsd0JBQUssQUFBZ0IsQUFBRSxBQUFDLEFBQ3BEO0FBQUMsQUFDSjs7Ozs7QUE1RVksQUFBa0IseUNBRDlCLFlBQVUsQUFBRSxjQXVCSixtQkFBQSxZQUFNLE9BQUMscUJBQWtCLG1CQUFDLEFBQTJCLEFBQUMsK0JBQ3RELG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBVyxBQUFDLGVBQ3RDLG1CQUFBLFlBQU0sT0FBQyxxQkFBa0IsbUJBQUMsQUFBUSxBQUFDLGtGQXhCL0IsQUFBa0IsQUE0RTlCO0FBNUVZLDZCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdGFibGUsIGluamVjdCB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgeyBTZXJ2aWNlSWRlbnRpZmllcnMgfSBmcm9tICcuL2NvbnRhaW5lci9TZXJ2aWNlSWRlbnRpZmllcnMnO1xuXG5pbXBvcnQgeyBUT2JmdXNjYXRpb25SZXN1bHRGYWN0b3J5IH0gZnJvbSAnLi90eXBlcy9jb250YWluZXIvVE9iZnVzY2F0aW9uUmVzdWx0RmFjdG9yeSc7XG5cbmltcG9ydCB7IElDcnlwdFV0aWxzIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3V0aWxzL0lDcnlwdFV0aWxzJztcbmltcG9ydCB7IElPYmZ1c2NhdGlvblJlc3VsdCB9IGZyb20gJy4vaW50ZXJmYWNlcy9JT2JmdXNjYXRpb25SZXN1bHQnO1xuaW1wb3J0IHsgSU9wdGlvbnMgfSBmcm9tICcuL2ludGVyZmFjZXMvb3B0aW9ucy9JT3B0aW9ucyc7XG5pbXBvcnQgeyBJU291cmNlTWFwQ29ycmVjdG9yIH0gZnJvbSAnLi9pbnRlcmZhY2VzL0lTb3VyY2VNYXBDb3JyZWN0b3InO1xuXG5pbXBvcnQgeyBTb3VyY2VNYXBNb2RlIH0gZnJvbSAnLi9lbnVtcy9Tb3VyY2VNYXBNb2RlJztcblxuQGluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNvdXJjZU1hcENvcnJlY3RvciBpbXBsZW1lbnRzIElTb3VyY2VNYXBDb3JyZWN0b3Ige1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJQ3J5cHRVdGlsc31cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGNyeXB0VXRpbHM6IElDcnlwdFV0aWxzO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge1RPYmZ1c2NhdGlvblJlc3VsdEZhY3Rvcnl9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBvYmZ1c2NhdGlvblJlc3VsdEZhY3Rvcnk6IFRPYmZ1c2NhdGlvblJlc3VsdEZhY3Rvcnk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SU9wdGlvbnN9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBJT3B0aW9ucztcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VE9iZnVzY2F0aW9uUmVzdWx0RmFjdG9yeX0gb2JmdXNjYXRpb25SZXN1bHRGYWN0b3J5XG4gICAgICogQHBhcmFtIHtJQ3J5cHRVdGlsc30gY3J5cHRVdGlsc1xuICAgICAqIEBwYXJhbSB7SU9wdGlvbnN9IG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIEBpbmplY3QoU2VydmljZUlkZW50aWZpZXJzLkZhY3RvcnlfX0lPYmZ1c2NhdGlvblJlc3VsdCkgb2JmdXNjYXRpb25SZXN1bHRGYWN0b3J5OiBUT2JmdXNjYXRpb25SZXN1bHRGYWN0b3J5LFxuICAgICAgICBAaW5qZWN0KFNlcnZpY2VJZGVudGlmaWVycy5JQ3J5cHRVdGlscykgY3J5cHRVdGlsczogSUNyeXB0VXRpbHMsXG4gICAgICAgIEBpbmplY3QoU2VydmljZUlkZW50aWZpZXJzLklPcHRpb25zKSBvcHRpb25zOiBJT3B0aW9uc1xuICAgICkge1xuICAgICAgICB0aGlzLm9iZnVzY2F0aW9uUmVzdWx0RmFjdG9yeSA9IG9iZnVzY2F0aW9uUmVzdWx0RmFjdG9yeTtcbiAgICAgICAgdGhpcy5jcnlwdFV0aWxzID0gY3J5cHRVdGlscztcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2JmdXNjYXRlZENvZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlTWFwXG4gICAgICogQHJldHVybnMge0lPYmZ1c2NhdGlvblJlc3VsdH1cbiAgICAgKi9cbiAgICBwdWJsaWMgY29ycmVjdCAob2JmdXNjYXRlZENvZGU6IHN0cmluZywgc291cmNlTWFwOiBzdHJpbmcpOiBJT2JmdXNjYXRpb25SZXN1bHQge1xuICAgICAgICByZXR1cm4gdGhpcy5vYmZ1c2NhdGlvblJlc3VsdEZhY3RvcnkoXG4gICAgICAgICAgICB0aGlzLmNvcnJlY3RPYmZ1c2NhdGVkQ29kZShvYmZ1c2NhdGVkQ29kZSwgc291cmNlTWFwKSxcbiAgICAgICAgICAgIHNvdXJjZU1hcFxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvYmZ1c2NhdGVkQ29kZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VNYXBcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHByaXZhdGUgY29ycmVjdE9iZnVzY2F0ZWRDb2RlIChvYmZ1c2NhdGVkQ29kZTogc3RyaW5nLCBzb3VyY2VNYXA6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGlmICghc291cmNlTWFwKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JmdXNjYXRlZENvZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzb3VyY2VNYXBVcmw6IHN0cmluZyA9IHRoaXMub3B0aW9ucy5zb3VyY2VNYXBCYXNlVXJsICsgdGhpcy5vcHRpb25zLnNvdXJjZU1hcEZpbGVOYW1lO1xuXG4gICAgICAgIGxldCBzb3VyY2VNYXBwaW5nVXJsOiBzdHJpbmcgPSAnLy8jIHNvdXJjZU1hcHBpbmdVUkw9JztcblxuICAgICAgICBzd2l0Y2ggKHRoaXMub3B0aW9ucy5zb3VyY2VNYXBNb2RlKSB7XG4gICAgICAgICAgICBjYXNlIFNvdXJjZU1hcE1vZGUuSW5saW5lOlxuICAgICAgICAgICAgICAgIHNvdXJjZU1hcHBpbmdVcmwgKz0gYGRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJHt0aGlzLmNyeXB0VXRpbHMuYnRvYShzb3VyY2VNYXApfWA7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBTb3VyY2VNYXBNb2RlLlNlcGFyYXRlOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoIXNvdXJjZU1hcFVybCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JmdXNjYXRlZENvZGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc291cmNlTWFwcGluZ1VybCArPSBzb3VyY2VNYXBVcmw7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgJHtvYmZ1c2NhdGVkQ29kZX1cXG4ke3NvdXJjZU1hcHBpbmdVcmx9YDtcbiAgICB9XG59XG4iXX0=