"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var escodegen = require("escodegen-wallaby");
var NodeType_1 = require("../enums/NodeType");

var Nodes = function () {
    function Nodes() {
        _classCallCheck(this, Nodes);
    }

    _createClass(Nodes, null, [{
        key: "getProgramNode",
        value: function getProgramNode() {
            var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            return {
                type: NodeType_1.NodeType.Program,
                body: body,
                sourceType: 'script',
                obfuscatedNode: false
            };
        }
    }, {
        key: "getArrayExpressionNode",
        value: function getArrayExpressionNode() {
            var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            return {
                type: NodeType_1.NodeType.ArrayExpression,
                elements: elements
            };
        }
    }, {
        key: "getAssignmentExpressionNode",
        value: function getAssignmentExpressionNode(operator, left, right) {
            return {
                type: NodeType_1.NodeType.AssignmentExpression,
                operator: operator,
                left: left,
                right: right,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getBinaryExpressionNode",
        value: function getBinaryExpressionNode(operator, left, right) {
            return {
                type: NodeType_1.NodeType.BinaryExpression,
                operator: operator,
                left: left,
                right: right,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getBlockStatementNode",
        value: function getBlockStatementNode() {
            var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            return {
                type: NodeType_1.NodeType.BlockStatement,
                body: body,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getBreakStatement",
        value: function getBreakStatement(label) {
            var breakStatementNode = {
                type: NodeType_1.NodeType.BreakStatement,
                obfuscatedNode: false
            };
            if (label) {
                breakStatementNode.label = label;
            }
            return breakStatementNode;
        }
    }, {
        key: "getCatchClauseNode",
        value: function getCatchClauseNode() {
            var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            return {
                type: NodeType_1.NodeType.CatchClause,
                param: Nodes.getIdentifierNode('err'),
                body: Nodes.getBlockStatementNode(body),
                obfuscatedNode: false
            };
        }
    }, {
        key: "getCallExpressionNode",
        value: function getCallExpressionNode(callee) {
            var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            return {
                type: NodeType_1.NodeType.CallExpression,
                callee: callee,
                arguments: args,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getContinueStatement",
        value: function getContinueStatement(label) {
            var continueStatementNode = {
                type: NodeType_1.NodeType.ContinueStatement,
                obfuscatedNode: false
            };
            if (label) {
                continueStatementNode.label = label;
            }
            return continueStatementNode;
        }
    }, {
        key: "getExpressionStatementNode",
        value: function getExpressionStatementNode(expression) {
            return {
                type: NodeType_1.NodeType.ExpressionStatement,
                expression: expression,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getFunctionDeclarationNode",
        value: function getFunctionDeclarationNode(functionName, params, body) {
            return {
                type: NodeType_1.NodeType.FunctionDeclaration,
                id: Nodes.getIdentifierNode(functionName),
                params: params,
                body: body,
                generator: false,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getFunctionExpressionNode",
        value: function getFunctionExpressionNode(params, body) {
            return {
                type: NodeType_1.NodeType.FunctionExpression,
                params: params,
                body: body,
                generator: false,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getIfStatementNode",
        value: function getIfStatementNode(test, consequent, alternate) {
            return Object.assign({ type: NodeType_1.NodeType.IfStatement, test: test,
                consequent: consequent }, alternate && { alternate: alternate }, { obfuscatedNode: false });
        }
    }, {
        key: "getIdentifierNode",
        value: function getIdentifierNode(name) {
            return {
                type: NodeType_1.NodeType.Identifier,
                name: name,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getLabeledStatement",
        value: function getLabeledStatement(label, body) {
            return {
                type: NodeType_1.NodeType.LabeledStatement,
                label: label,
                body: body,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getLiteralNode",
        value: function getLiteralNode(value, raw) {
            raw = raw !== undefined ? raw : "'" + value + "'";
            return {
                type: NodeType_1.NodeType.Literal,
                value: value,
                raw: raw,
                'x-verbatim-property': {
                    content: raw,
                    precedence: escodegen.Precedence.Primary
                },
                obfuscatedNode: false
            };
        }
    }, {
        key: "getLogicalExpressionNode",
        value: function getLogicalExpressionNode(operator, left, right) {
            return {
                type: NodeType_1.NodeType.LogicalExpression,
                operator: operator,
                left: left,
                right: right,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getMemberExpressionNode",
        value: function getMemberExpressionNode(object, property) {
            var computed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            return {
                type: NodeType_1.NodeType.MemberExpression,
                computed: computed,
                object: object,
                property: property,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getObjectExpressionNode",
        value: function getObjectExpressionNode(properties) {
            return {
                type: NodeType_1.NodeType.ObjectExpression,
                properties: properties,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getPropertyNode",
        value: function getPropertyNode(key, value) {
            var computed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            return {
                type: NodeType_1.NodeType.Property,
                key: key,
                value: value,
                kind: 'init',
                method: false,
                shorthand: false,
                computed: computed,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getUnaryExpressionNode",
        value: function getUnaryExpressionNode(operator, argument) {
            var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            return {
                type: NodeType_1.NodeType.UnaryExpression,
                operator: operator,
                argument: argument,
                prefix: prefix,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getReturnStatementNode",
        value: function getReturnStatementNode(argument) {
            return {
                type: NodeType_1.NodeType.ReturnStatement,
                argument: argument,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getSwitchStatementNode",
        value: function getSwitchStatementNode(discriminant, cases) {
            return {
                type: NodeType_1.NodeType.SwitchStatement,
                discriminant: discriminant,
                cases: cases,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getSwitchCaseNode",
        value: function getSwitchCaseNode(test, consequent) {
            return {
                type: NodeType_1.NodeType.SwitchCase,
                test: test,
                consequent: consequent,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getUpdateExpressionNode",
        value: function getUpdateExpressionNode(operator, argumentExpr) {
            return {
                type: NodeType_1.NodeType.UpdateExpression,
                operator: operator,
                argument: argumentExpr,
                prefix: false,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getVariableDeclarationNode",
        value: function getVariableDeclarationNode() {
            var declarations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'var';

            return {
                type: NodeType_1.NodeType.VariableDeclaration,
                declarations: declarations,
                kind: kind,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getVariableDeclaratorNode",
        value: function getVariableDeclaratorNode(id, init) {
            return {
                type: NodeType_1.NodeType.VariableDeclarator,
                id: id,
                init: init,
                obfuscatedNode: false
            };
        }
    }, {
        key: "getWhileStatementNode",
        value: function getWhileStatementNode(test, body) {
            return {
                type: NodeType_1.NodeType.WhileStatement,
                test: test,
                body: body,
                obfuscatedNode: false
            };
        }
    }]);

    return Nodes;
}();

exports.Nodes = Nodes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,