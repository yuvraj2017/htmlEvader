"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
function buildLargeCode(linesOfCode) {
    return new LargeCodeBuilder(linesOfCode).build();
}
exports.buildLargeCode = buildLargeCode;

var LargeCodeBuilder = function () {
    function LargeCodeBuilder(linesOfCode) {
        _classCallCheck(this, LargeCodeBuilder);

        this.code = '';
        this.linesOfCode = linesOfCode;
    }

    _createClass(LargeCodeBuilder, [{
        key: "build",
        value: function build() {
            var lastLineIndex = this.linesOfCode - 1;
            var funcIndex = 0,
                isFuncWasOpened = false;
            this.addLine("function Foo () {");
            this.addLine("var var0 = 0;");
            for (var index = 0; index < this.linesOfCode; index++) {
                var step = index % 10;
                var newIndex = index + 1;
                var isLastLine = index === lastLineIndex;
                if (step === 3) {
                    funcIndex = index;
                    isFuncWasOpened = true;
                    this.addLine("function func" + funcIndex + " () {");
                    this.addLine("var var" + newIndex + " = var" + index + ";");
                }
                if (step === 4) {
                    this.addLine("if (true) {");
                }
                if (step === 6) {
                    this.addLine("if (true) {");
                }
                this.addLine("var var" + newIndex + " = var" + index + ";");
                this.addLine("var" + newIndex + "++;");
                if (step === 9 || isLastLine && isFuncWasOpened) {
                    isFuncWasOpened = false;
                    this.addLine("}");
                    this.addLine("}");
                    this.addLine("return var" + newIndex + ";");
                    this.addLine("}");
                    this.addLine("var var" + newIndex + " = func" + funcIndex + "();");
                }
                if (isLastLine) {
                    this.addLine("result = var" + newIndex + ";");
                }
            }
            this.addLine("return result;");
            this.addLine("}");
            this.addLine("Foo();");
            return this.code;
        }
    }, {
        key: "addLine",
        value: function addLine(line) {
            this.code += "\n" + line;
        }
    }]);

    return LargeCodeBuilder;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRMYXJnZUNvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L2hlbHBlcnMvYnVpbGRMYXJnZUNvZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHdCQUFnQyxBQUFtQjtBQUMvQyxBQUFNLFdBQUMsSUFBSSxBQUFnQixpQkFBQyxBQUFXLEFBQUMsYUFBQyxBQUFLLEFBQUUsQUFBQyxBQUNyRDtBQUFDO0FBRkQseUJBRUMsQUFFRDs7O0FBY0ksOEJBQWEsQUFBbUI7OztBQVZ4QixhQUFJLE9BQVcsQUFBRSxBQUFDO0FBV3RCLEFBQUksYUFBQyxBQUFXLGNBQUcsQUFBVyxBQUFDLEFBQ25DO0FBQUMsQUFFTSxBQUFLOzs7OztBQUNSLGdCQUFNLEFBQWEsZ0JBQVcsQUFBSSxLQUFDLEFBQVcsY0FBRyxBQUFDLEFBQUM7QUFFbkQsZ0JBQUksQUFBUyxZQUFXLEFBQUM7Z0JBQ3JCLEFBQWUsa0JBQVksQUFBSyxBQUFDO0FBRXJDLEFBQUksaUJBQUMsQUFBTyxBQUFDLEFBQW1CLEFBQUMsQUFBQztBQUNsQyxBQUFJLGlCQUFDLEFBQU8sQUFBQyxBQUFlLEFBQUMsQUFBQztBQUU5QixBQUFHLEFBQUMsaUJBQUMsSUFBSSxBQUFLLFFBQUcsQUFBQyxHQUFFLEFBQUssUUFBRyxBQUFJLEtBQUMsQUFBVyxhQUFFLEFBQUssQUFBRSxTQUFFLEFBQUM7QUFDcEQsb0JBQU0sQUFBSSxPQUFXLEFBQUssUUFBRyxBQUFFLEFBQUM7QUFDaEMsb0JBQU0sQUFBUSxXQUFXLEFBQUssUUFBRyxBQUFDLEFBQUM7QUFDbkMsb0JBQU0sQUFBVSxhQUFZLEFBQUssVUFBSyxBQUFhLEFBQUM7QUFFcEQsQUFBRSxBQUFDLG9CQUFDLEFBQUksU0FBSyxBQUFDLEFBQUMsR0FBQyxBQUFDO0FBQ2IsQUFBUyxnQ0FBRyxBQUFLLEFBQUM7QUFDbEIsQUFBZSxzQ0FBRyxBQUFJLEFBQUM7QUFDdkIsQUFBSSx5QkFBQyxBQUFPLEFBQUMsMEJBQWdCLEFBQVMsQUFBTyxBQUFDLEFBQUM7QUFDL0MsQUFBSSx5QkFBQyxBQUFPLEFBQUMsb0JBQVUsQUFBUSxzQkFBUyxBQUFLLEFBQUcsQUFBQyxBQUFDLEFBQ3REO0FBQUM7QUFFRCxBQUFFLEFBQUMsb0JBQUMsQUFBSSxTQUFLLEFBQUMsQUFBQyxHQUFDLEFBQUM7QUFDYixBQUFJLHlCQUFDLEFBQU8sQUFBQyxBQUFhLEFBQUMsQUFBQyxBQUNoQztBQUFDO0FBRUQsQUFBRSxBQUFDLG9CQUFDLEFBQUksU0FBSyxBQUFDLEFBQUMsR0FBQyxBQUFDO0FBQ2IsQUFBSSx5QkFBQyxBQUFPLEFBQUMsQUFBYSxBQUFDLEFBQUMsQUFDaEM7QUFBQztBQUVELEFBQUkscUJBQUMsQUFBTyxBQUFDLG9CQUFVLEFBQVEsc0JBQVMsQUFBSyxBQUFHLEFBQUMsQUFBQztBQUNsRCxBQUFJLHFCQUFDLEFBQU8sQUFBQyxnQkFBTSxBQUFRLEFBQUssQUFBQyxBQUFDO0FBRWxDLEFBQUUsQUFBQyxvQkFBQyxBQUFJLFNBQUssQUFBQyxBQUFJLEtBQUMsQUFBVSxjQUFJLEFBQWUsQUFBQyxBQUFDLGlCQUFDLEFBQUM7QUFDaEQsQUFBZSxzQ0FBRyxBQUFLLEFBQUM7QUFDeEIsQUFBSSx5QkFBQyxBQUFPLEFBQUMsQUFBRyxBQUFDLEFBQUM7QUFDbEIsQUFBSSx5QkFBQyxBQUFPLEFBQUMsQUFBRyxBQUFDLEFBQUM7QUFDbEIsQUFBSSx5QkFBQyxBQUFPLEFBQUMsdUJBQWEsQUFBUSxBQUFHLEFBQUMsQUFBQztBQUN2QyxBQUFJLHlCQUFDLEFBQU8sQUFBQyxBQUFHLEFBQUMsQUFBQztBQUNsQixBQUFJLHlCQUFDLEFBQU8sQUFBQyxvQkFBVSxBQUFRLHVCQUFVLEFBQVMsQUFBSyxBQUFDLEFBQUMsQUFDN0Q7QUFBQztBQUVELEFBQUUsQUFBQyxvQkFBQyxBQUFVLEFBQUMsWUFBQyxBQUFDO0FBQ2IsQUFBSSx5QkFBQyxBQUFPLEFBQUMseUJBQWUsQUFBUSxBQUFHLEFBQUMsQUFBQyxBQUM3QztBQUFDLEFBQ0w7QUFBQztBQUVELEFBQUksaUJBQUMsQUFBTyxBQUFDLEFBQWdCLEFBQUMsQUFBQztBQUMvQixBQUFJLGlCQUFDLEFBQU8sQUFBQyxBQUFHLEFBQUMsQUFBQztBQUNsQixBQUFJLGlCQUFDLEFBQU8sQUFBQyxBQUFRLEFBQUMsQUFBQztBQUV2QixBQUFNLG1CQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFDckI7QUFBQyxBQU1PLEFBQU87OztnQ0FBRSxBQUFZO0FBQ3pCLEFBQUksaUJBQUMsQUFBSSxBQUFJLGVBQUssQUFBSSxBQUFFLEFBQUMsQUFDN0I7QUFBQyxBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTGFyZ2VDb2RlIChsaW5lc09mQ29kZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IExhcmdlQ29kZUJ1aWxkZXIobGluZXNPZkNvZGUpLmJ1aWxkKCk7XG59XG5cbmNsYXNzIExhcmdlQ29kZUJ1aWxkZXIge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHJpdmF0ZSBjb2RlOiBzdHJpbmcgPSAnJztcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBsaW5lc09mQ29kZTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxpbmVzT2ZDb2RlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKGxpbmVzT2ZDb2RlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5saW5lc09mQ29kZSA9IGxpbmVzT2ZDb2RlO1xuICAgIH1cblxuICAgIHB1YmxpYyBidWlsZCAoKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgbGFzdExpbmVJbmRleDogbnVtYmVyID0gdGhpcy5saW5lc09mQ29kZSAtIDE7XG5cbiAgICAgICAgbGV0IGZ1bmNJbmRleDogbnVtYmVyID0gMCxcbiAgICAgICAgICAgIGlzRnVuY1dhc09wZW5lZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuYWRkTGluZShgZnVuY3Rpb24gRm9vICgpIHtgKTtcbiAgICAgICAgdGhpcy5hZGRMaW5lKGB2YXIgdmFyMCA9IDA7YCk7XG5cbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMubGluZXNPZkNvZGU7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHN0ZXA6IG51bWJlciA9IGluZGV4ICUgMTA7XG4gICAgICAgICAgICBjb25zdCBuZXdJbmRleDogbnVtYmVyID0gaW5kZXggKyAxO1xuICAgICAgICAgICAgY29uc3QgaXNMYXN0TGluZTogYm9vbGVhbiA9IGluZGV4ID09PSBsYXN0TGluZUluZGV4O1xuXG4gICAgICAgICAgICBpZiAoc3RlcCA9PT0gMykge1xuICAgICAgICAgICAgICAgIGZ1bmNJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIGlzRnVuY1dhc09wZW5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRMaW5lKGBmdW5jdGlvbiBmdW5jJHtmdW5jSW5kZXh9ICgpIHtgKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZExpbmUoYHZhciB2YXIke25ld0luZGV4fSA9IHZhciR7aW5kZXh9O2ApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3RlcCA9PT0gNCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkTGluZShgaWYgKHRydWUpIHtgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHN0ZXAgPT09IDYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZExpbmUoYGlmICh0cnVlKSB7YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYWRkTGluZShgdmFyIHZhciR7bmV3SW5kZXh9ID0gdmFyJHtpbmRleH07YCk7XG4gICAgICAgICAgICB0aGlzLmFkZExpbmUoYHZhciR7bmV3SW5kZXh9Kys7YCk7XG5cbiAgICAgICAgICAgIGlmIChzdGVwID09PSA5IHx8IChpc0xhc3RMaW5lICYmIGlzRnVuY1dhc09wZW5lZCkpIHtcbiAgICAgICAgICAgICAgICBpc0Z1bmNXYXNPcGVuZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZExpbmUoYH1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZExpbmUoYH1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZExpbmUoYHJldHVybiB2YXIke25ld0luZGV4fTtgKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZExpbmUoYH1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZExpbmUoYHZhciB2YXIke25ld0luZGV4fSA9IGZ1bmMke2Z1bmNJbmRleH0oKTtgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzTGFzdExpbmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZExpbmUoYHJlc3VsdCA9IHZhciR7bmV3SW5kZXh9O2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hZGRMaW5lKGByZXR1cm4gcmVzdWx0O2ApO1xuICAgICAgICB0aGlzLmFkZExpbmUoYH1gKTtcbiAgICAgICAgdGhpcy5hZGRMaW5lKGBGb28oKTtgKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jb2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsaW5lXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIGFkZExpbmUgKGxpbmU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvZGUgKz0gYFxcbiR7bGluZX1gO1xuICAgIH1cbn1cbiJdfQ==