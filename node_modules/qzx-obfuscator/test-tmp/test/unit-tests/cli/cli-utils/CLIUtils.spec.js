"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var mkdirp = require("mkdirp");
var chai_1 = require("chai");
var CLIUtils_1 = require("../../../../src/cli/utils/CLIUtils");
describe('CLIUtils', function () {
    var fileContent = 'test';
    var tmpDir = 'test/tmp';
    before(function () {
        mkdirp.sync(tmpDir);
    });
    describe('getOutputCodePath (outputPath: string, inputPath: string): string', function () {
        var expectedInputPath = 'test/input/test-obfuscated.js',
            inputPath = 'test/input/test.js',
            outputPath = 'test/output/test.js';
        it('should return `outputPath` if this path is set', function () {
            chai_1.assert.equal(CLIUtils_1.CLIUtils.getOutputCodePath(outputPath, inputPath), outputPath);
        });
        it('should output path based on `inputPath` if `outputPath` is not set', function () {
            chai_1.assert.equal(CLIUtils_1.CLIUtils.getOutputCodePath('', inputPath), expectedInputPath);
        });
    });
    describe('getOutputSourceMapPath (outputCodePath: string): string', function () {
        var expectedOutputSourceMapPath = 'test/output/test.js.map',
            outputCodePath = 'test/output/test.js';
        it('should return output path for source map', function () {
            chai_1.assert.equal(CLIUtils_1.CLIUtils.getOutputSourceMapPath(outputCodePath), expectedOutputSourceMapPath);
        });
    });
    describe('getPackageConfig (): IPackageConfig', function () {
        it('should return `package.json` `name` field for current CLI program as object', function () {
            chai_1.assert.property(CLIUtils_1.CLIUtils.getPackageConfig(), 'name');
        });
        it('should return `package.json` `version` field for current CLI program as object', function () {
            chai_1.assert.property(CLIUtils_1.CLIUtils.getPackageConfig(), 'version');
        });
    });
    describe('validateInputPath (inputPath: string): void', function () {
        describe('`inputPath` is a valid path', function () {
            var tmpFileName = 'test.js';
            var inputPath = tmpDir + "/" + tmpFileName;
            before(function () {
                fs.writeFileSync(inputPath, fileContent);
            });
            it('shouldn\'t throw an error if `inputPath` is a valid path', function () {
                chai_1.assert.doesNotThrow(function () {
                    return CLIUtils_1.CLIUtils.validateInputPath(inputPath);
                }, ReferenceError);
            });
            after(function () {
                fs.unlinkSync(inputPath);
            });
        });
        describe('`inputPath` is not a valid path', function () {
            var tmpFileName = 'test.js';
            var inputPath = tmpDir + "/" + tmpFileName;
            it('should throw an error if `inputPath` is not a valid path', function () {
                chai_1.assert.throws(function () {
                    return CLIUtils_1.CLIUtils.validateInputPath(inputPath);
                }, ReferenceError);
            });
        });
        describe('`inputPath` is a file name has invalid extension', function () {
            var tmpFileName = 'test.ts';
            var inputPath = tmpDir + "/" + tmpFileName;
            before(function () {
                fs.writeFileSync(inputPath, fileContent);
            });
            it('should throw an error if `inputPath` is a file name has invalid extension', function () {
                chai_1.assert.throws(function () {
                    return CLIUtils_1.CLIUtils.validateInputPath(inputPath);
                }, ReferenceError);
            });
            after(function () {
                fs.unlinkSync(inputPath);
            });
        });
    });
    after(function () {
        fs.rmdirSync(tmpDir);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,