"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var ServiceIdentifiers_1 = require("../../../src/container/ServiceIdentifiers");
var InversifyContainerFacade_1 = require("../../../src/container/InversifyContainerFacade");
describe('RandomGeneratorUtils', function () {
    describe('getRandomVariableName (length: number = 6): string', function () {
        var randomGenerator = void 0,
            randomVariableName = void 0,
            regExp = void 0;
        before(function () {
            var inversifyContainerFacade = new InversifyContainerFacade_1.InversifyContainerFacade();
            inversifyContainerFacade.load('', {});
            randomGenerator = inversifyContainerFacade.get(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator);
        });
        describe('variant #1: string with random variable of length `4`', function () {
            before(function () {
                randomVariableName = randomGenerator.getRandomVariableName(4);
                regExp = /^_0x(\w){4}$/;
            });
            it('should return random variable name', function () {
                chai_1.assert.match(randomVariableName, regExp);
            });
        });
        describe('variant #2: string with random variable of length `6`', function () {
            before(function () {
                randomVariableName = randomGenerator.getRandomVariableName(6);
                regExp = /^_0x(\w){4,6}$/;
            });
            it('should return random variable name', function () {
                chai_1.assert.match(randomVariableName, regExp);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFuZG9tR2VuZXJhdG9yVXRpbHMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvdW5pdC10ZXN0cy91dGlscy9SYW5kb21HZW5lcmF0b3JVdGlscy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFCQUE4QjtBQUU5QixtQ0FBK0U7QUFLL0UseUNBQTJGO0FBRTNGLEFBQVEsU0FBQyxBQUFzQix3QkFBRTtBQUM3QixBQUFRLGFBQUMsQUFBb0Qsc0RBQUU7QUFDM0QsWUFBSSxBQUFpQztZQUNqQyxBQUEwQjtZQUMxQixBQUFjLEFBQUM7QUFFbkIsQUFBTSxlQUFDO0FBQ0gsZ0JBQU0sQUFBd0IsMkJBQThCLElBQUksMkJBQXdCLEFBQUUsQUFBQztBQUUzRixBQUF3QixxQ0FBQyxBQUFJLEtBQUMsQUFBRSxJQUFFLEFBQUUsQUFBQyxBQUFDO0FBQ3RDLEFBQWUsOEJBQUcsQUFBd0IseUJBQUMsQUFBRyxJQUFtQixxQkFBa0IsbUJBQUMsQUFBZ0IsQUFBQyxBQUN6RztBQUFDLEFBQUMsQUFBQztBQUVILEFBQVEsaUJBQUMsQUFBdUQseURBQUU7QUFDOUQsQUFBTSxtQkFBQztBQUNILEFBQWtCLHFDQUFHLEFBQWUsZ0JBQUMsQUFBcUIsc0JBQUMsQUFBQyxBQUFDLEFBQUM7QUFDOUQsQUFBTSx5QkFBRyxBQUFjLEFBQUMsQUFDNUI7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLGVBQUMsQUFBb0Msc0NBQUU7QUFDckMsdUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBa0Isb0JBQUUsQUFBTSxBQUFDLEFBQUMsQUFDN0M7QUFBQyxBQUFDLEFBQ047QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGlCQUFDLEFBQXVELHlEQUFFO0FBQzlELEFBQU0sbUJBQUM7QUFDSCxBQUFrQixxQ0FBRyxBQUFlLGdCQUFDLEFBQXFCLHNCQUFDLEFBQUMsQUFBQyxBQUFDO0FBQzlELEFBQU0seUJBQUcsQUFBZ0IsQUFBQyxBQUM5QjtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsZUFBQyxBQUFvQyxzQ0FBRTtBQUNyQyx1QkFBTSxPQUFDLEFBQUssTUFBQyxBQUFrQixvQkFBRSxBQUFNLEFBQUMsQUFBQyxBQUM3QztBQUFDLEFBQUMsQUFDTjtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQgfSBmcm9tICdjaGFpJztcblxuaW1wb3J0IHsgU2VydmljZUlkZW50aWZpZXJzIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbnRhaW5lci9TZXJ2aWNlSWRlbnRpZmllcnMnO1xuXG5pbXBvcnQgeyBJSW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2ludGVyZmFjZXMvY29udGFpbmVyL0lJbnZlcnNpZnlDb250YWluZXJGYWNhZGUnO1xuaW1wb3J0IHsgSVJhbmRvbUdlbmVyYXRvciB9IGZyb20gJy4uLy4uLy4uL3NyYy9pbnRlcmZhY2VzL3V0aWxzL0lSYW5kb21HZW5lcmF0b3InO1xuXG5pbXBvcnQgeyBJbnZlcnNpZnlDb250YWluZXJGYWNhZGUgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29udGFpbmVyL0ludmVyc2lmeUNvbnRhaW5lckZhY2FkZSc7XG5cbmRlc2NyaWJlKCdSYW5kb21HZW5lcmF0b3JVdGlscycsICgpID0+IHtcbiAgICBkZXNjcmliZSgnZ2V0UmFuZG9tVmFyaWFibGVOYW1lIChsZW5ndGg6IG51bWJlciA9IDYpOiBzdHJpbmcnLCAoKSA9PiB7XG4gICAgICAgIGxldCByYW5kb21HZW5lcmF0b3I6IElSYW5kb21HZW5lcmF0b3IsXG4gICAgICAgICAgICByYW5kb21WYXJpYWJsZU5hbWU6IHN0cmluZyxcbiAgICAgICAgICAgIHJlZ0V4cDogUmVnRXhwO1xuXG4gICAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnZlcnNpZnlDb250YWluZXJGYWNhZGU6IElJbnZlcnNpZnlDb250YWluZXJGYWNhZGUgPSBuZXcgSW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlKCk7XG5cbiAgICAgICAgICAgIGludmVyc2lmeUNvbnRhaW5lckZhY2FkZS5sb2FkKCcnLCB7fSk7XG4gICAgICAgICAgICByYW5kb21HZW5lcmF0b3IgPSBpbnZlcnNpZnlDb250YWluZXJGYWNhZGUuZ2V0PElSYW5kb21HZW5lcmF0b3I+KFNlcnZpY2VJZGVudGlmaWVycy5JUmFuZG9tR2VuZXJhdG9yKVxuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgndmFyaWFudCAjMTogc3RyaW5nIHdpdGggcmFuZG9tIHZhcmlhYmxlIG9mIGxlbmd0aCBgNGAnLCAoKSA9PiB7XG4gICAgICAgICAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJhbmRvbVZhcmlhYmxlTmFtZSA9IHJhbmRvbUdlbmVyYXRvci5nZXRSYW5kb21WYXJpYWJsZU5hbWUoNCk7XG4gICAgICAgICAgICAgICAgcmVnRXhwID0gL15fMHgoXFx3KXs0fSQvO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHJhbmRvbSB2YXJpYWJsZSBuYW1lJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5tYXRjaChyYW5kb21WYXJpYWJsZU5hbWUsIHJlZ0V4cCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgndmFyaWFudCAjMjogc3RyaW5nIHdpdGggcmFuZG9tIHZhcmlhYmxlIG9mIGxlbmd0aCBgNmAnLCAoKSA9PiB7XG4gICAgICAgICAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJhbmRvbVZhcmlhYmxlTmFtZSA9IHJhbmRvbUdlbmVyYXRvci5nZXRSYW5kb21WYXJpYWJsZU5hbWUoNik7XG4gICAgICAgICAgICAgICAgcmVnRXhwID0gL15fMHgoXFx3KXs0LDZ9JC87XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gcmFuZG9tIHZhcmlhYmxlIG5hbWUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKHJhbmRvbVZhcmlhYmxlTmFtZSwgcmVnRXhwKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXX0=