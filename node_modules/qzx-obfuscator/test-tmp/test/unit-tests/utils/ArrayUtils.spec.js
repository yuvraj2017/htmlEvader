"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var ServiceIdentifiers_1 = require("../../../src/container/ServiceIdentifiers");
var InversifyContainerFacade_1 = require("../../../src/container/InversifyContainerFacade");
describe('Utils', function () {
    var arrayUtils = void 0;
    before(function () {
        var inversifyContainerFacade = new InversifyContainerFacade_1.InversifyContainerFacade();
        inversifyContainerFacade.load('', {});
        arrayUtils = inversifyContainerFacade.get(ServiceIdentifiers_1.ServiceIdentifiers.IArrayUtils);
    });
    describe('arrayRange (length: number): number[]', function () {
        describe('range length more than 0', function () {
            var rangeLength = 5;
            var expectedArray = [0, 1, 2, 3, 4];
            var array = void 0;
            before(function () {
                array = arrayUtils.arrayRange(rangeLength);
            });
            it('should return array with range of numbers', function () {
                chai_1.assert.deepEqual(array, expectedArray);
            });
        });
        describe('range length is 0', function () {
            var rangeLength = 0;
            var expectedArray = [];
            var array = void 0;
            before(function () {
                array = arrayUtils.arrayRange(rangeLength);
            });
            it('should return empty array', function () {
                chai_1.assert.deepEqual(array, expectedArray);
            });
        });
        describe('range length less than 0', function () {
            var rangeLength = -5;
            var expectedArray = [];
            var array = void 0;
            before(function () {
                array = arrayUtils.arrayRange(rangeLength);
            });
            it('should return empty array', function () {
                chai_1.assert.deepEqual(array, expectedArray);
            });
        });
    });
    describe('arrayRotate <T> (array: T[], times: number): T[]', function () {
        var array = void 0,
            rotatedArray = void 0;
        beforeEach(function () {
            array = [1, 2, 3, 4, 5, 6];
        });
        describe('value is not 0', function () {
            var rotateValue = 2;
            var expectedArray = [5, 6, 1, 2, 3, 4];
            beforeEach(function () {
                rotatedArray = arrayUtils.arrayRotate(array, rotateValue);
            });
            it('should rotate (shift) array by a given value', function () {
                chai_1.assert.deepEqual(rotatedArray, expectedArray);
            });
        });
        describe('value equals or less 0', function () {
            var rotateValue = 0;
            var expectedArray = [1, 2, 3, 4, 5, 6];
            beforeEach(function () {
                rotatedArray = arrayUtils.arrayRotate(array, rotateValue);
            });
            it('shouldn\'t rotate array', function () {
                chai_1.assert.deepEqual(rotatedArray, expectedArray);
            });
        });
        describe('empty array', function () {
            var emptyArray = [];
            var rotateValue = 5;
            var expectedError = ReferenceError;
            var testFunc = void 0;
            beforeEach(function () {
                testFunc = function testFunc() {
                    return arrayUtils.arrayRotate(emptyArray, rotateValue);
                };
            });
            it('should throw exception if array is empty', function () {
                chai_1.assert.throws(testFunc, expectedError);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,