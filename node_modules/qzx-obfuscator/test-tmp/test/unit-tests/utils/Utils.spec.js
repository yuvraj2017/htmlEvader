"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var JSFuck_1 = require("../../../src/enums/JSFuck");
var Utils_1 = require("../../../src/utils/Utils");
describe('Utils', function () {
    describe('decToHex (dec: number): string', function () {
        describe('variant #1: number `0`', function () {
            var number = 0;
            var expectedHexString = '0';
            var hexString = void 0;
            before(function () {
                hexString = Utils_1.Utils.decToHex(number);
            });
            it('should create a string with hexadecimal value from a given decimal number', function () {
                chai_1.assert.equal(hexString, expectedHexString);
            });
        });
        describe('variant #2: number `10`', function () {
            var number = 10;
            var expectedHexString = 'a';
            var hexString = void 0;
            before(function () {
                hexString = Utils_1.Utils.decToHex(number);
            });
            it('should create a string with hexadecimal value from a given decimal number', function () {
                chai_1.assert.equal(hexString, expectedHexString);
            });
        });
        describe('variant #3: number `17`', function () {
            var number = 17;
            var expectedHexString = '11';
            var hexString = void 0;
            before(function () {
                hexString = Utils_1.Utils.decToHex(number);
            });
            it('should create a string with hexadecimal value from a given decimal number', function () {
                chai_1.assert.equal(hexString, expectedHexString);
            });
        });
        describe('variant #4: number `536870912`', function () {
            var number = 536870912;
            var expectedHexString = '20000000';
            var hexString = void 0;
            before(function () {
                hexString = Utils_1.Utils.decToHex(number);
            });
            it('should create a string with hexadecimal value from a given decimal number', function () {
                chai_1.assert.equal(hexString, expectedHexString);
            });
        });
    });
    describe('extractDomainFromUrl (url: string): string', function () {
        describe('variant #1: simple url', function () {
            var url = 'http://google.ru';
            var expectedDomain = 'google.ru';
            var domain = void 0;
            before(function () {
                domain = Utils_1.Utils.extractDomainFromUrl(url);
            });
            it('should extract domain from the given URL', function () {
                chai_1.assert.equal(domain, expectedDomain);
            });
        });
        describe('variant #2: url with `www` part', function () {
            var url = 'http://www.google.ru';
            var expectedDomain = 'www.google.ru';
            var domain = void 0;
            before(function () {
                domain = Utils_1.Utils.extractDomainFromUrl(url);
            });
            it('should extract domain from the given URL', function () {
                chai_1.assert.equal(domain, expectedDomain);
            });
        });
        describe('variant #3: url with `https` protocol and port', function () {
            var url = 'https://www.google.ru:9000';
            var expectedDomain = 'www.google.ru';
            var domain = void 0;
            before(function () {
                domain = Utils_1.Utils.extractDomainFromUrl(url);
            });
            it('should extract domain from the given URL', function () {
                chai_1.assert.equal(domain, expectedDomain);
            });
        });
        describe('variant #4: protocol-wide url and route', function () {
            var url = '//google.ru/abc';
            var expectedDomain = 'google.ru';
            var domain = void 0;
            before(function () {
                domain = Utils_1.Utils.extractDomainFromUrl(url);
            });
            it('should extract domain from the given URL', function () {
                chai_1.assert.equal(domain, expectedDomain);
            });
        });
        describe('variant #5: protocol-wide url, `localhost` and port', function () {
            var url = '//localhost:9000';
            var expectedDomain = 'localhost';
            var domain = void 0;
            before(function () {
                domain = Utils_1.Utils.extractDomainFromUrl(url);
            });
            it('should extract domain from the given URL', function () {
                chai_1.assert.equal(domain, expectedDomain);
            });
        });
    });
    describe('isCeilNumber (number: number): boolean', function () {
        describe('given number is a ceil', function () {
            var number = 4;
            var expectedResult = true;
            var result = void 0;
            before(function () {
                result = Utils_1.Utils.isCeilNumber(number);
            });
            it('should return true', function () {
                chai_1.assert.equal(result, expectedResult);
            });
        });
        describe('given number is a float', function () {
            var number = 4.5;
            var expectedResult = false;
            var result = void 0;
            before(function () {
                result = Utils_1.Utils.isCeilNumber(number);
            });
            it('should return false', function () {
                chai_1.assert.equal(result, expectedResult);
            });
        });
    });
    describe('stringRotate (string: string, times: number): string', function () {
        var string = 'abcdefg';
        var rotatedString = void 0;
        describe('value is not 0', function () {
            var rotateValue = 2;
            var expectedString = 'fgabcde';
            before(function () {
                rotatedString = Utils_1.Utils.stringRotate(string, rotateValue);
            });
            it('should rotate string by a given value', function () {
                chai_1.assert.deepEqual(rotatedString, expectedString);
            });
        });
        describe('value equals or less 0', function () {
            var rotateValue = 0;
            var expectedString = 'abcdefg';
            before(function () {
                rotatedString = Utils_1.Utils.stringRotate(string, rotateValue);
            });
            it('shouldn\'t rotate string', function () {
                chai_1.assert.deepEqual(rotatedString, expectedString);
            });
        });
        describe('empty array', function () {
            var emptyString = '';
            var rotateValue = 5;
            var expectedError = ReferenceError;
            var testFunc = void 0;
            before(function () {
                testFunc = function testFunc() {
                    return Utils_1.Utils.stringRotate(emptyString, rotateValue);
                };
            });
            it('should throw exception if string is empty', function () {
                chai_1.assert.throws(testFunc, expectedError);
            });
        });
    });
    describe('stringToJSFuck (string: string): string', function () {
        var string = 'string';
        var expectedString = JSFuck_1.JSFuck.s + " + " + JSFuck_1.JSFuck.t + " + " + JSFuck_1.JSFuck.r + " + " + JSFuck_1.JSFuck.i + " + " + JSFuck_1.JSFuck.n + " + " + JSFuck_1.JSFuck.g;
        var actualString = void 0;
        before(function () {
            actualString = Utils_1.Utils.stringToJSFuck(string);
        });
        it('should create a JSFuck encoded string from a given string', function () {
            chai_1.assert.equal(actualString, expectedString);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,