"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var InversifyContainerFacade_1 = require("../../../src/container/InversifyContainerFacade");
var ServiceIdentifiers_1 = require("../../../src/container/ServiceIdentifiers");
describe('EscapeSequenceEncoder', function () {
    describe('encode (string: string, encodeAllSymbols: boolean = false): string', function () {
        var escapeSequenceEncoder = void 0;
        before(function () {
            var inversifyContainerFacade = new InversifyContainerFacade_1.InversifyContainerFacade();
            inversifyContainerFacade.load('', {});
            escapeSequenceEncoder = inversifyContainerFacade.get(ServiceIdentifiers_1.ServiceIdentifiers.IEscapeSequenceEncoder);
        });
        describe('variant #1: default', function () {
            var string = 'string';
            var expectedString = '\\x73\\x74\\x72\\x69\\x6e\\x67';
            var actualString = void 0;
            before(function () {
                actualString = escapeSequenceEncoder.encode(string, true);
            });
            it('should return a string where all characters are encoded', function () {
                chai_1.assert.equal(actualString, expectedString);
            });
        });
        describe('variant #2: escape `escape sequences`', function () {
            var string = 'abc\'\\r\\n';
            var expectedString = 'abc\\x27\\x5cr\\x5cn';
            var actualString = void 0;
            before(function () {
                actualString = escapeSequenceEncoder.encode(string, false);
            });
            it('should return a string where all `escape sequences` are encoded', function () {
                chai_1.assert.equal(actualString, expectedString);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXNjYXBlU2VxdWVuY2VFbmNvZGVyLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L3VuaXQtdGVzdHMvdXRpbHMvRXNjYXBlU2VxdWVuY2VFbmNvZGVyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUJBQThCO0FBRTlCLHlDQUEyRjtBQUMzRixtQ0FBK0U7QUFNL0UsQUFBUSxTQUFDLEFBQXVCLHlCQUFFO0FBQzlCLEFBQVEsYUFBQyxBQUFvRSxzRUFBRTtBQUMzRSxZQUFJLEFBQTZDLEFBQUM7QUFFbEQsQUFBTSxlQUFDO0FBQ0gsZ0JBQU0sQUFBd0IsMkJBQThCLElBQUksMkJBQXdCLEFBQUUsQUFBQztBQUUzRixBQUF3QixxQ0FBQyxBQUFJLEtBQUMsQUFBRSxJQUFFLEFBQUUsQUFBQyxBQUFDO0FBQ3RDLEFBQXFCLG9DQUFHLEFBQXdCLHlCQUMzQyxBQUFHLElBQXlCLHFCQUFrQixtQkFBQyxBQUFzQixBQUFDLEFBQUMsQUFDaEY7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGlCQUFDLEFBQXFCLHVCQUFFO0FBQzVCLGdCQUFNLEFBQU0sU0FBVyxBQUFRLEFBQUM7QUFDaEMsZ0JBQU0sQUFBYyxpQkFBVyxBQUFnQyxBQUFDO0FBRWhFLGdCQUFJLEFBQW9CLEFBQUM7QUFFekIsQUFBTSxtQkFBQztBQUNILEFBQVksK0JBQUcsQUFBcUIsc0JBQUMsQUFBTSxPQUFDLEFBQU0sUUFBRSxBQUFJLEFBQUMsQUFBQyxBQUM5RDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsZUFBQyxBQUF5RCwyREFBRTtBQUMxRCx1QkFBTSxPQUFDLEFBQUssTUFBQyxBQUFZLGNBQUUsQUFBYyxBQUFDLEFBQUMsQUFDL0M7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQVEsaUJBQUMsQUFBdUMseUNBQUU7QUFDOUMsZ0JBQU0sQUFBTSxTQUFXLEFBQWEsQUFBQztBQUNyQyxnQkFBTSxBQUFjLGlCQUFXLEFBQXNCLEFBQUM7QUFFdEQsZ0JBQUksQUFBb0IsQUFBQztBQUV6QixBQUFNLG1CQUFDO0FBQ0gsQUFBWSwrQkFBRyxBQUFxQixzQkFBQyxBQUFNLE9BQUMsQUFBTSxRQUFFLEFBQUssQUFBQyxBQUFDLEFBQy9EO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxlQUFDLEFBQWlFLG1FQUFFO0FBQ2xFLHVCQUFNLE9BQUMsQUFBSyxNQUFDLEFBQVksY0FBRSxBQUFjLEFBQUMsQUFBQyxBQUMvQztBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydCB9IGZyb20gJ2NoYWknO1xuXG5pbXBvcnQgeyBJbnZlcnNpZnlDb250YWluZXJGYWNhZGUgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29udGFpbmVyL0ludmVyc2lmeUNvbnRhaW5lckZhY2FkZSc7XG5pbXBvcnQgeyBTZXJ2aWNlSWRlbnRpZmllcnMgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29udGFpbmVyL1NlcnZpY2VJZGVudGlmaWVycyc7XG5cbmltcG9ydCB7IElJbnZlcnNpZnlDb250YWluZXJGYWNhZGUgfSBmcm9tICcuLi8uLi8uLi9zcmMvaW50ZXJmYWNlcy9jb250YWluZXIvSUludmVyc2lmeUNvbnRhaW5lckZhY2FkZSc7XG5pbXBvcnQgeyBJRXNjYXBlU2VxdWVuY2VFbmNvZGVyIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2ludGVyZmFjZXMvdXRpbHMvSUVzY2FwZVNlcXVlbmNlRW5jb2Rlcic7XG5cblxuZGVzY3JpYmUoJ0VzY2FwZVNlcXVlbmNlRW5jb2RlcicsICgpID0+IHtcbiAgICBkZXNjcmliZSgnZW5jb2RlIChzdHJpbmc6IHN0cmluZywgZW5jb2RlQWxsU3ltYm9sczogYm9vbGVhbiA9IGZhbHNlKTogc3RyaW5nJywgKCkgPT4ge1xuICAgICAgICBsZXQgZXNjYXBlU2VxdWVuY2VFbmNvZGVyOiBJRXNjYXBlU2VxdWVuY2VFbmNvZGVyO1xuXG4gICAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnZlcnNpZnlDb250YWluZXJGYWNhZGU6IElJbnZlcnNpZnlDb250YWluZXJGYWNhZGUgPSBuZXcgSW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlKCk7XG5cbiAgICAgICAgICAgIGludmVyc2lmeUNvbnRhaW5lckZhY2FkZS5sb2FkKCcnLCB7fSk7XG4gICAgICAgICAgICBlc2NhcGVTZXF1ZW5jZUVuY29kZXIgPSBpbnZlcnNpZnlDb250YWluZXJGYWNhZGVcbiAgICAgICAgICAgICAgICAuZ2V0PElFc2NhcGVTZXF1ZW5jZUVuY29kZXI+KFNlcnZpY2VJZGVudGlmaWVycy5JRXNjYXBlU2VxdWVuY2VFbmNvZGVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3ZhcmlhbnQgIzE6IGRlZmF1bHQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmc6IHN0cmluZyA9ICdzdHJpbmcnO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRTdHJpbmc6IHN0cmluZyA9ICdcXFxceDczXFxcXHg3NFxcXFx4NzJcXFxceDY5XFxcXHg2ZVxcXFx4NjcnO1xuXG4gICAgICAgICAgICBsZXQgYWN0dWFsU3RyaW5nOiBzdHJpbmc7XG5cbiAgICAgICAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgYWN0dWFsU3RyaW5nID0gZXNjYXBlU2VxdWVuY2VFbmNvZGVyLmVuY29kZShzdHJpbmcsIHRydWUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgc3RyaW5nIHdoZXJlIGFsbCBjaGFyYWN0ZXJzIGFyZSBlbmNvZGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChhY3R1YWxTdHJpbmcsIGV4cGVjdGVkU3RyaW5nKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgndmFyaWFudCAjMjogZXNjYXBlIGBlc2NhcGUgc2VxdWVuY2VzYCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZzogc3RyaW5nID0gJ2FiY1xcJ1xcXFxyXFxcXG4nO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRTdHJpbmc6IHN0cmluZyA9ICdhYmNcXFxceDI3XFxcXHg1Y3JcXFxceDVjbic7XG5cbiAgICAgICAgICAgIGxldCBhY3R1YWxTdHJpbmc6IHN0cmluZztcblxuICAgICAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBhY3R1YWxTdHJpbmcgPSBlc2NhcGVTZXF1ZW5jZUVuY29kZXIuZW5jb2RlKHN0cmluZywgZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgc3RyaW5nIHdoZXJlIGFsbCBgZXNjYXBlIHNlcXVlbmNlc2AgYXJlIGVuY29kZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGFjdHVhbFN0cmluZywgZXhwZWN0ZWRTdHJpbmcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXX0=