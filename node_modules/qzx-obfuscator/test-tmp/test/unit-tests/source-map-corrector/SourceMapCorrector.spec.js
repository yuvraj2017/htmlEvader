"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ServiceIdentifiers_1 = require("../../../src/container/ServiceIdentifiers");
var chai_1 = require("chai");
var SourceMapMode_1 = require("../../../src/enums/SourceMapMode");
var InversifyContainerFacade_1 = require("../../../src/container/InversifyContainerFacade");
function getCorrectedObfuscationResult(obfuscatedCode, sourceMap, sourceMapBaseUrl, sourceMapFileName, sourceMapMode) {
    var inversifyContainerFacade = new InversifyContainerFacade_1.InversifyContainerFacade();
    inversifyContainerFacade.load('', {
        sourceMap: true,
        sourceMapBaseUrl: sourceMapBaseUrl,
        sourceMapFileName: sourceMapFileName,
        sourceMapMode: sourceMapMode
    });
    var sourceMapCorrector = inversifyContainerFacade.get(ServiceIdentifiers_1.ServiceIdentifiers.ISourceMapCorrector);
    return sourceMapCorrector.correct(obfuscatedCode, sourceMap);
}
describe('SourceMapCorrector', function () {
    describe('correct (): IObfuscationResult', function () {
        var expectedObfuscatedCode = 'var test = 1;';
        var sourceMap = 'test';
        var obfuscationResult = void 0,
            obfuscatedCode = void 0;
        describe('source map doest\'t exist', function () {
            before(function () {
                obfuscationResult = getCorrectedObfuscationResult(expectedObfuscatedCode, '', '', '', SourceMapMode_1.SourceMapMode.Separate);
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should return untouched obfuscated code', function () {
                chai_1.assert.equal(obfuscatedCode, expectedObfuscatedCode);
            });
        });
        describe('source map is set, source map mode is `inline`', function () {
            var regExp = /data:application\/json;base64/;
            before(function () {
                obfuscationResult = getCorrectedObfuscationResult(expectedObfuscatedCode, sourceMap, '', '', SourceMapMode_1.SourceMapMode.Inline);
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should add source map to obfuscated code as base64 encoded string', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('source map mode is `separate`', function () {
            var regExp = /sourceMappingURL=http:\/\/example\.com\/output\.js\.map/;
            before(function () {
                obfuscationResult = getCorrectedObfuscationResult(expectedObfuscatedCode, sourceMap, 'http://example.com', 'output.js.map', SourceMapMode_1.SourceMapMode.Separate);
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should add source map import to obfuscated code', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('source map mode is `separate`, `sourceMapUrl` is not set', function () {
            before(function () {
                obfuscationResult = getCorrectedObfuscationResult(expectedObfuscatedCode, sourceMap, '', '', SourceMapMode_1.SourceMapMode.Separate);
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should not touch obfuscated code', function () {
                chai_1.assert.equal(obfuscatedCode, expectedObfuscatedCode);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,