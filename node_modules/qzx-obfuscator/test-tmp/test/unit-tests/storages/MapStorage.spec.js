"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var ServiceIdentifiers_1 = require("../../../src/container/ServiceIdentifiers");
var InversifyContainerFacade_1 = require("../../../src/container/InversifyContainerFacade");
var MapStorage_1 = require("../../../src/storages/MapStorage");

var ConcreteStorage = function (_MapStorage_1$MapStor) {
    _inherits(ConcreteStorage, _MapStorage_1$MapStor);

    function ConcreteStorage() {
        _classCallCheck(this, ConcreteStorage);

        var inversifyContainerFacade = new InversifyContainerFacade_1.InversifyContainerFacade();
        inversifyContainerFacade.load('', {});
        return _possibleConstructorReturn(this, (ConcreteStorage.__proto__ || Object.getPrototypeOf(ConcreteStorage)).call(this, inversifyContainerFacade.get(ServiceIdentifiers_1.ServiceIdentifiers.IRandomGenerator)));
    }

    return ConcreteStorage;
}(MapStorage_1.MapStorage);

var getStorageInstance = function getStorageInstance() {
    var storage = new ConcreteStorage();
    storage.initialize();
    return storage;
};
describe('MapStorage', function () {
    var storageKey = 'foo';
    var storageValue = 'bar';
    var storage = void 0;
    describe('initialize (...args: any[]): void', function () {
        var expectedError = Error;
        var testFunc = void 0;
        before(function () {
            storage = new ConcreteStorage();
            testFunc = function testFunc() {
                return storage.set(storageKey, storageValue);
            };
        });
        it('should throws an error when storage isn\'t initialized', function () {
            chai_1.assert.throws(testFunc, expectedError);
        });
    });
    describe('getStorage (): Map <string | number, T>', function () {
        var expectedInstanceOf = Map;
        var mapStorage = void 0;
        before(function () {
            storage = getStorageInstance();
            mapStorage = storage.getStorage();
        });
        it('should return storage', function () {
            chai_1.assert.instanceOf(mapStorage, expectedInstanceOf);
        });
    });
    describe('get (key: string | number): T', function () {
        describe('variant #1: value exist', function () {
            var expectedValue = storageValue;
            var value = void 0;
            before(function () {
                storage = getStorageInstance();
                storage.set(storageKey, storageValue);
                value = storage.get(storageKey);
            });
            it('should return value from storage by key', function () {
                chai_1.assert.equal(value, expectedValue);
            });
        });
        describe('variant #2: value isn\'t exist', function () {
            var expectedError = Error;
            var testFunc = void 0;
            before(function () {
                storage = getStorageInstance();
                testFunc = function testFunc() {
                    return storage.get(storageKey);
                };
            });
            it('should throw an error', function () {
                chai_1.assert.throws(testFunc, expectedError);
            });
        });
    });
    describe('getLength (): number', function () {
        var expectedStorageLength = 1;
        var storageLength = void 0;
        before(function () {
            storage = getStorageInstance();
            storage.set(storageKey, storageValue);
            storageLength = storage.getLength();
        });
        it('should return length of storage', function () {
            chai_1.assert.equal(storageLength, expectedStorageLength);
        });
    });
    describe('getKeyOf (value: T): string | number | null', function () {
        var key = void 0;
        describe('variant #1', function () {
            before(function () {
                storage = getStorageInstance();
                storage.set(storageKey, storageValue);
                key = storage.getKeyOf(storageValue);
            });
            it('should return key of string value', function () {
                chai_1.assert.equal(key, storageKey);
            });
        });
        describe('variant #2', function () {
            var object = {
                bar: 'baz'
            };
            before(function () {
                storage = getStorageInstance();
                storage.set(storageKey, object);
                key = storage.getKeyOf(object);
            });
            it('should return key of object if objects in `set` and `get` are two same objects', function () {
                chai_1.assert.equal(key, storageKey);
            });
        });
        describe('variant #3', function () {
            var expectedKey = null;
            var object = {
                bar: 'baz'
            };
            before(function () {
                storage = getStorageInstance();
                storage.set(storageKey, object);
                key = storage.getKeyOf(Object.assign({}, object));
            });
            it('should return `null` if objects in `set` and `get` are two different objects', function () {
                chai_1.assert.equal(key, expectedKey);
            });
        });
    });
    describe('set (key: string | number, value: T): void', function () {
        var value = void 0;
        before(function () {
            storage = getStorageInstance();
            storage.set(storageKey, storageValue);
            value = storage.get(storageKey);
        });
        it('should set value to the storage', function () {
            chai_1.assert.equal(value, storageValue);
        });
    });
    describe('mergeWith (storage: this, mergeId: boolean = false): void', function () {
        var secondStorageKey = 'baz';
        var secondStorageValue = 'quux';
        var expectedArray = [[storageKey, storageValue], [secondStorageKey, secondStorageValue]];
        var array = void 0;
        before(function () {
            storage = getStorageInstance();
            storage.set(storageKey, storageValue);
            var secondStorage = getStorageInstance();
            secondStorage.set(secondStorageKey, secondStorageValue);
            storage.mergeWith(secondStorage, false);
            array = Array.from(storage.getStorage());
        });
        it('should merge two storages', function () {
            chai_1.assert.deepEqual(array, expectedArray);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,