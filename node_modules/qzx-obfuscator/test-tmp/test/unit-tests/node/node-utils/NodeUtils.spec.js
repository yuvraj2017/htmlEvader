"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var Nodes_1 = require("../../../../src/node/Nodes");
var NodeUtils_1 = require("../../../../src/node/NodeUtils");
describe('NodeUtils', function () {
    describe('addXVerbatimPropertyToLiterals (node: ESTree.Node): void', function () {
        var literalNode = void 0,
            expectedLiteralNode = void 0;
        before(function () {
            literalNode = Nodes_1.Nodes.getLiteralNode('value');
            delete literalNode['x-verbatim-property'];
            expectedLiteralNode = Nodes_1.Nodes.getLiteralNode('value');
            NodeUtils_1.NodeUtils.addXVerbatimPropertyToLiterals(literalNode);
        });
        it('should add `x-verbatim-property` to `Literal` node', function () {
            chai_1.assert.deepEqual(literalNode, expectedLiteralNode);
        });
    });
    describe('clone <T extends ESTree.Node> (astTree: T): T', function () {
        var programNode = void 0,
            expectedProgramNode = void 0;
        before(function () {
            var expressionStatementNode1 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            var expressionStatementNode2 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            var ifStatementBlockStatementNode1 = Nodes_1.Nodes.getBlockStatementNode([expressionStatementNode1, expressionStatementNode2]);
            var ifStatementNode1 = Nodes_1.Nodes.getIfStatementNode(Nodes_1.Nodes.getLiteralNode(true), ifStatementBlockStatementNode1);
            var expressionStatementNode3 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            var expressionStatementNode4 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            var ifStatementBlockStatementNode2 = Nodes_1.Nodes.getBlockStatementNode([expressionStatementNode3, expressionStatementNode4]);
            var ifStatementNode2 = Nodes_1.Nodes.getIfStatementNode(Nodes_1.Nodes.getLiteralNode(true), ifStatementBlockStatementNode2);
            programNode = NodeUtils_1.NodeUtils.clone(Nodes_1.Nodes.getProgramNode([ifStatementNode1]));
            expectedProgramNode = NodeUtils_1.NodeUtils.parentize(Nodes_1.Nodes.getProgramNode([ifStatementNode2]));
        });
        it('should clone given AST-tree', function () {
            chai_1.assert.deepEqual(programNode, expectedProgramNode);
        });
    });
    describe('convertCodeToStructure (code: string): ESTree.Node[]', function () {
        var structure = void 0,
            expectedStructure = void 0;
        before(function () {
            var code = "\n                var abc = 'cde';\n            ";
            var identifierNode = Nodes_1.Nodes.getIdentifierNode('abc');
            var literalNode = Nodes_1.Nodes.getLiteralNode('cde');
            var variableDeclaratorNode = Nodes_1.Nodes.getVariableDeclaratorNode(identifierNode, literalNode);
            var variableDeclarationNode = Nodes_1.Nodes.getVariableDeclarationNode([variableDeclaratorNode]);
            var programNode = Nodes_1.Nodes.getProgramNode([variableDeclarationNode]);
            programNode.parentNode = programNode;
            variableDeclarationNode.parentNode = programNode;
            variableDeclaratorNode.parentNode = variableDeclarationNode;
            identifierNode.parentNode = variableDeclaratorNode;
            literalNode.parentNode = variableDeclaratorNode;
            structure = NodeUtils_1.NodeUtils.convertCodeToStructure(code);
            expectedStructure = [variableDeclarationNode];
        });
        it('should convert code to `ESTree.Node[]` structure array', function () {
            chai_1.assert.deepEqual(structure, expectedStructure);
        });
    });
    describe('convertStructureToCode (structure: ESTree.Node[]): string', function () {
        var structure = void 0,
            expectedCode = void 0;
        before(function () {
            structure = [Nodes_1.Nodes.getProgramNode([Nodes_1.Nodes.getVariableDeclarationNode([Nodes_1.Nodes.getVariableDeclaratorNode(Nodes_1.Nodes.getIdentifierNode('abc'), Nodes_1.Nodes.getLiteralNode('cde'))])])];
            expectedCode = 'var abc = \'cde\';';
        });
        it('should convert `ESTree.Node[]` structure to source code', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.convertStructureToCode(structure), expectedCode);
        });
    });
    describe('getBlockStatementNodeByIndex (node: ESTree.Node, index: number = 0): ESTree.Node', function () {
        var blockStatementNode = void 0,
            expressionStatementNode1 = void 0,
            expressionStatementNode2 = void 0;
        beforeEach(function () {
            expressionStatementNode1 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            expressionStatementNode2 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            blockStatementNode = Nodes_1.Nodes.getBlockStatementNode([expressionStatementNode1, expressionStatementNode2]);
        });
        it('should return block-statement child node of given node if that node has block-statement', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockStatementNodeByIndex(blockStatementNode), expressionStatementNode1);
        });
        it('should return block-statement child node of given node with index `1` if that node has block-statement', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockStatementNodeByIndex(blockStatementNode, 1), expressionStatementNode2);
        });
        it('should throw a `ReferenceError` if index is out of boundaries', function () {
            chai_1.assert.throws(function () {
                return NodeUtils_1.NodeUtils.getBlockStatementNodeByIndex(blockStatementNode, 2);
            }, ReferenceError);
        });
        it('should throw a `TypeError` if node have no a block-statement', function () {
            chai_1.assert.throws(function () {
                return NodeUtils_1.NodeUtils.getBlockStatementNodeByIndex(expressionStatementNode1, 1);
            }, TypeError);
        });
    });
    describe('getBlockScopesOfNode (node: ESTree.Node, blockScopes: TNodeWithBlockStatement[] = []): TNodeWithBlockStatement[]', function () {
        var functionDeclarationBlockStatementNode = void 0,
            ifStatementBlockStatementNode1 = void 0,
            ifStatementBlockStatementNode2 = void 0,
            ifStatementNode1 = void 0,
            ifStatementNode2 = void 0,
            expressionStatementNode3 = void 0,
            expressionStatementNode2 = void 0,
            expressionStatementNode1 = void 0,
            functionDeclarationNode = void 0,
            programNode = void 0;
        before(function () {
            expressionStatementNode1 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            expressionStatementNode2 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            expressionStatementNode3 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            ifStatementBlockStatementNode2 = Nodes_1.Nodes.getBlockStatementNode([expressionStatementNode2, expressionStatementNode3]);
            ifStatementNode2 = Nodes_1.Nodes.getIfStatementNode(Nodes_1.Nodes.getLiteralNode(true), ifStatementBlockStatementNode2);
            ifStatementBlockStatementNode1 = Nodes_1.Nodes.getBlockStatementNode([ifStatementNode2]);
            ifStatementNode1 = Nodes_1.Nodes.getIfStatementNode(Nodes_1.Nodes.getLiteralNode(true), ifStatementBlockStatementNode1);
            functionDeclarationBlockStatementNode = Nodes_1.Nodes.getBlockStatementNode([expressionStatementNode1, ifStatementNode1]);
            functionDeclarationNode = Nodes_1.Nodes.getFunctionDeclarationNode('test', [], functionDeclarationBlockStatementNode);
            programNode = Nodes_1.Nodes.getProgramNode([functionDeclarationNode]);
            programNode.parentNode = programNode;
            functionDeclarationNode.parentNode = programNode;
            functionDeclarationBlockStatementNode.parentNode = functionDeclarationNode;
            expressionStatementNode1.parentNode = functionDeclarationBlockStatementNode;
            ifStatementNode1.parentNode = functionDeclarationBlockStatementNode;
            ifStatementBlockStatementNode1.parentNode = ifStatementNode1;
            ifStatementNode2.parentNode = ifStatementBlockStatementNode1;
            ifStatementBlockStatementNode2.parentNode = ifStatementNode2;
            expressionStatementNode3.parentNode = ifStatementBlockStatementNode2;
        });
        it('should return block-scope node for `program` node child', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(programNode)[0], programNode);
        });
        it('should return block-scope node for `functionDeclaration` node child node #1', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(functionDeclarationNode)[0], programNode);
        });
        it('should return block-scope node for `functionDeclaration blockStatement` node child node #1', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(functionDeclarationBlockStatementNode)[0], programNode);
        });
        it('should return block-scope node for `expressionStatement` node #1 child node #1', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(expressionStatementNode1)[0], functionDeclarationBlockStatementNode);
        });
        it('should return block-scope node for `expressionStatement` node #1 child node #2', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(expressionStatementNode1)[1], programNode);
        });
        it('should return block-scope node for `ifStatement` node child node #1', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(ifStatementNode1)[0], functionDeclarationBlockStatementNode);
        });
        it('should return block-scope node for `ifStatement` node child node #2', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(ifStatementNode1)[1], programNode);
        });
        it('should return block-scope node for `ifStatement blockStatement` node #1 child node #1', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(ifStatementBlockStatementNode1)[0], functionDeclarationBlockStatementNode);
        });
        it('should return block-scope node for `ifStatement blockStatement` node #1 child node #2', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(ifStatementBlockStatementNode1)[1], programNode);
        });
        it('should return block-scope node for `ifStatement blockStatement` node #2 child node #1', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(ifStatementBlockStatementNode2)[0], functionDeclarationBlockStatementNode);
        });
        it('should return block-scope node for `ifStatement blockStatement` node #1 child node #2', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(ifStatementBlockStatementNode2)[1], programNode);
        });
        it('should return block-scope node for `expressionStatement` node #3 child node #1', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(expressionStatementNode3)[0], functionDeclarationBlockStatementNode);
        });
        it('should return block-scope node for `expressionStatement` node #3 child node #2', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getBlockScopesOfNode(expressionStatementNode3)[1], programNode);
        });
        it('should throw a `ReferenceError` if node has no `parentNode` property', function () {
            chai_1.assert.throws(function () {
                return NodeUtils_1.NodeUtils.getBlockScopesOfNode(expressionStatementNode2)[0];
            }, ReferenceError);
        });
    });
    describe('getNodeBlockScopeDepth (node: ESTree.Node, depth: number = 0): number', function () {
        var functionDeclarationBlockStatementNode1 = void 0,
            functionDeclarationBlockStatementNode2 = void 0,
            ifStatementBlockStatementNode1 = void 0,
            ifStatementBlockStatementNode2 = void 0,
            ifStatementNode1 = void 0,
            ifStatementNode2 = void 0,
            expressionStatementNode1 = void 0,
            expressionStatementNode2 = void 0,
            expressionStatementNode3 = void 0,
            functionDeclarationNode1 = void 0,
            functionDeclarationNode2 = void 0,
            programNode = void 0;
        before(function () {
            expressionStatementNode1 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            expressionStatementNode2 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            expressionStatementNode3 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            ifStatementBlockStatementNode2 = Nodes_1.Nodes.getBlockStatementNode([expressionStatementNode3]);
            ifStatementNode2 = Nodes_1.Nodes.getIfStatementNode(Nodes_1.Nodes.getLiteralNode(true), ifStatementBlockStatementNode2);
            functionDeclarationBlockStatementNode2 = Nodes_1.Nodes.getBlockStatementNode([ifStatementNode2, expressionStatementNode2]);
            functionDeclarationNode2 = Nodes_1.Nodes.getFunctionDeclarationNode('test', [], functionDeclarationBlockStatementNode2);
            ifStatementBlockStatementNode1 = Nodes_1.Nodes.getBlockStatementNode([functionDeclarationNode2]);
            ifStatementNode1 = Nodes_1.Nodes.getIfStatementNode(Nodes_1.Nodes.getLiteralNode(true), ifStatementBlockStatementNode1);
            functionDeclarationBlockStatementNode1 = Nodes_1.Nodes.getBlockStatementNode([expressionStatementNode1, ifStatementNode1]);
            functionDeclarationNode1 = Nodes_1.Nodes.getFunctionDeclarationNode('test', [], functionDeclarationBlockStatementNode1);
            programNode = Nodes_1.Nodes.getProgramNode([functionDeclarationNode1]);
            programNode.parentNode = programNode;
            functionDeclarationNode1.parentNode = programNode;
            functionDeclarationBlockStatementNode1.parentNode = functionDeclarationNode1;
            expressionStatementNode1.parentNode = functionDeclarationBlockStatementNode1;
            ifStatementNode1.parentNode = functionDeclarationBlockStatementNode1;
            ifStatementBlockStatementNode1.parentNode = ifStatementNode1;
            functionDeclarationNode2.parentNode = ifStatementBlockStatementNode1;
            functionDeclarationBlockStatementNode2.parentNode = functionDeclarationNode2;
            expressionStatementNode2.parentNode = functionDeclarationBlockStatementNode2;
            ifStatementNode2.parentNode = functionDeclarationBlockStatementNode2;
            ifStatementBlockStatementNode2.parentNode = ifStatementNode2;
        });
        it('should return block-scope depth for `program` node', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getNodeBlockScopeDepth(programNode), 0);
        });
        it('should return block-scope depth for `functionDeclaration` node #1', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getNodeBlockScopeDepth(functionDeclarationNode1), 0);
        });
        it('should return block-scope depth for `functionDeclaration blockStatement` node #1', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getNodeBlockScopeDepth(functionDeclarationBlockStatementNode1), 1);
        });
        it('should return block-scope depth for `expressionStatement` node #1', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getNodeBlockScopeDepth(expressionStatementNode1), 1);
        });
        it('should return block-scope depth for `ifStatement` node #1', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getNodeBlockScopeDepth(ifStatementNode1), 1);
        });
        it('should return block-scope depth for `ifStatement blockStatement` node #1', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getNodeBlockScopeDepth(ifStatementBlockStatementNode1), 1);
        });
        it('should return block-scope depth for `functionDeclaration` node #2', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getNodeBlockScopeDepth(functionDeclarationNode2), 1);
        });
        it('should return block-scope depth for `functionDeclaration blockStatement` node #2', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getNodeBlockScopeDepth(functionDeclarationBlockStatementNode2), 2);
        });
        it('should return block-scope depth for `expressionStatement` node #2', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getNodeBlockScopeDepth(expressionStatementNode2), 2);
        });
        it('should return block-scope depth for `ifStatement` node #2', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getNodeBlockScopeDepth(ifStatementNode2), 2);
        });
        it('should return block-scope depth for `ifStatement blockStatement` node #2', function () {
            chai_1.assert.deepEqual(NodeUtils_1.NodeUtils.getNodeBlockScopeDepth(ifStatementBlockStatementNode2), 2);
        });
        it('should throw a `ReferenceError` if node has no `parentNode` property', function () {
            chai_1.assert.throws(function () {
                return NodeUtils_1.NodeUtils.getNodeBlockScopeDepth(expressionStatementNode3);
            }, ReferenceError);
        });
    });
    describe('getUnaryExpressionArgumentNode (unaryExpressionNode: ESTree.UnaryExpression): ESTree.Node', function () {
        var expectedNode = void 0,
            unaryExpressionArgumentNode = void 0;
        before(function () {
            var literalNode = Nodes_1.Nodes.getLiteralNode('test');
            var unaryExpressionNode2 = Nodes_1.Nodes.getUnaryExpressionNode('!', literalNode);
            var unaryExpressionNode1 = Nodes_1.Nodes.getUnaryExpressionNode('!', unaryExpressionNode2);
            var expressionStatementNode = Nodes_1.Nodes.getExpressionStatementNode(unaryExpressionNode1);
            var programNode = Nodes_1.Nodes.getProgramNode([expressionStatementNode]);
            programNode.parentNode = programNode;
            expressionStatementNode.parentNode = programNode;
            unaryExpressionNode1.parentNode = expressionStatementNode;
            unaryExpressionNode2.parentNode = unaryExpressionNode1;
            literalNode.parentNode = unaryExpressionNode2;
            unaryExpressionArgumentNode = NodeUtils_1.NodeUtils.getUnaryExpressionArgumentNode(unaryExpressionNode1);
            expectedNode = literalNode;
        });
        it('should return unary expression argument node', function () {
            chai_1.assert.deepEqual(unaryExpressionArgumentNode, expectedNode);
        });
    });
    describe('parentize <T extends ESTree.Node> (astTree: T): T', function () {
        var ifStatementNode = void 0,
            ifStatementBlockStatementNode = void 0,
            expressionStatementNode1 = void 0,
            expressionStatementNode2 = void 0,
            programNode = void 0;
        beforeEach(function () {
            expressionStatementNode1 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            expressionStatementNode2 = Nodes_1.Nodes.getExpressionStatementNode(Nodes_1.Nodes.getIdentifierNode('identifier'));
            ifStatementBlockStatementNode = Nodes_1.Nodes.getBlockStatementNode([expressionStatementNode1, expressionStatementNode2]);
            ifStatementNode = Nodes_1.Nodes.getIfStatementNode(Nodes_1.Nodes.getLiteralNode(true), ifStatementBlockStatementNode);
        });
        describe('parentize AST-tree with `ProgramNode` as root node', function () {
            beforeEach(function () {
                programNode = Nodes_1.Nodes.getProgramNode([ifStatementNode]);
                programNode = NodeUtils_1.NodeUtils.parentize(programNode);
            });
            it('should parentize `program` node with `ProgramNode` as root node', function () {
                chai_1.assert.deepEqual(programNode.parentNode, programNode);
            });
            it('should parentize `ifStatement` node with `ProgramNode` as root node', function () {
                chai_1.assert.deepEqual(ifStatementNode.parentNode, programNode);
            });
            it('should parentize `ifStatement blockStatement` node with `ProgramNode` as root node', function () {
                chai_1.assert.deepEqual(ifStatementBlockStatementNode.parentNode, ifStatementNode);
            });
            it('should parentize `expressionStatement` node #1 with `ProgramNode` as root node', function () {
                chai_1.assert.deepEqual(expressionStatementNode1.parentNode, ifStatementBlockStatementNode);
            });
            it('should parentize `expressionStatement` node #2 with `ProgramNode` as root node', function () {
                chai_1.assert.deepEqual(expressionStatementNode2.parentNode, ifStatementBlockStatementNode);
            });
        });
        describe('parentize AST-tree', function () {
            beforeEach(function () {
                programNode = Nodes_1.Nodes.getProgramNode([ifStatementNode]);
                programNode.parentNode = programNode;
                ifStatementNode = NodeUtils_1.NodeUtils.parentize(ifStatementNode);
            });
            it('should parentize `ifStatement` node', function () {
                chai_1.assert.deepEqual(ifStatementNode.parentNode, programNode);
            });
            it('should parentize `ifStatement blockStatement` node', function () {
                chai_1.assert.deepEqual(ifStatementBlockStatementNode.parentNode, ifStatementNode);
            });
            it('should parentize `expressionStatement` node #1', function () {
                chai_1.assert.deepEqual(expressionStatementNode1.parentNode, ifStatementBlockStatementNode);
            });
            it('should parentize `expressionStatement` node #2', function () {
                chai_1.assert.deepEqual(expressionStatementNode2.parentNode, ifStatementBlockStatementNode);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm9kZVV0aWxzLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZXN0L3VuaXQtdGVzdHMvbm9kZS9ub2RlLXV0aWxzL05vZGVVdGlscy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHFCQUE4QjtBQUk5QixzQkFBbUQ7QUFDbkQsMEJBQTJEO0FBRTNELEFBQVEsU0FBQyxBQUFXLGFBQUU7QUFDbEIsQUFBUSxhQUFDLEFBQTBELDREQUFFO0FBQ2pFLFlBQUksQUFBZ0I7WUFDaEIsQUFBd0IsQUFBQztBQUU3QixBQUFNLGVBQUM7QUFDSCxBQUFXLDBCQUFHLFFBQUssTUFBQyxBQUFjLGVBQUMsQUFBTyxBQUFDLEFBQUM7QUFDNUMsbUJBQU8sQUFBVyxZQUFDLEFBQXFCLEFBQUMsQUFBQztBQUUxQyxBQUFtQixrQ0FBRyxRQUFLLE1BQUMsQUFBYyxlQUFDLEFBQU8sQUFBQyxBQUFDO0FBRXBELHdCQUFTLFVBQUMsQUFBOEIsK0JBQUMsQUFBVyxBQUFDLEFBQUMsQUFDMUQ7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBb0Qsc0RBQUU7QUFDckQsbUJBQU0sT0FBQyxBQUFTLFVBQUMsQUFBVyxhQUFFLEFBQW1CLEFBQUMsQUFBQyxBQUN2RDtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBUSxhQUFDLEFBQStDLGlEQUFFO0FBQ3RELFlBQUksQUFBMkI7WUFDM0IsQUFBbUMsQUFBQztBQUV4QyxBQUFNLGVBQUM7QUFFSCxnQkFBTSxBQUF3QiwyQkFBK0IsUUFBSyxNQUFDLEFBQTBCLDJCQUFDLFFBQUssTUFBQyxBQUFpQixrQkFBQyxBQUFZLEFBQUMsQUFBQyxBQUFDO0FBQ3JJLGdCQUFNLEFBQXdCLDJCQUErQixRQUFLLE1BQUMsQUFBMEIsMkJBQUMsUUFBSyxNQUFDLEFBQWlCLGtCQUFDLEFBQVksQUFBQyxBQUFDLEFBQUM7QUFFckksZ0JBQU0sQUFB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O0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGlCQUFDLEFBQW9CLHNCQUFFO0FBQzNCLEFBQVUsdUJBQUM7QUFDUCxBQUFXLDhCQUFHLFFBQUssTUFBQyxBQUFjLGVBQUMsQ0FDL0IsQUFBZSxBQUNsQixBQUFDLEFBQUM7QUFDSCxBQUFXLDRCQUFDLEFBQVUsYUFBRyxBQUFXLEFBQUM7QUFFckMsQUFBZSxrQ0FBRyxZQUFTLFVBQUMsQUFBUyxVQUFDLEFBQWUsQUFBQyxBQUFDLEFBQzNEO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxlQUFDLEFBQXFDLHVDQUFFO0FBQ3RDLHVCQUFNLE9BQUMsQUFBUyxVQUFDLEFBQWUsZ0JBQUMsQUFBVSxZQUFFLEFBQVcsQUFBQyxBQUFDLEFBQzlEO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxlQUFDLEFBQW9ELHNEQUFFO0FBQ3JELHVCQUFNLE9BQUMsQUFBUyxVQUFDLEFBQTZCLDhCQUFDLEFBQVUsWUFBRSxBQUFlLEFBQUMsQUFBQyxBQUNoRjtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsZUFBQyxBQUFnRCxrREFBRTtBQUNqRCx1QkFBTSxPQUFDLEFBQVMsVUFBQyxBQUF3Qix5QkFBQyxBQUFVLFlBQUUsQUFBNkIsQUFBQyxBQUFDLEFBQ3pGO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxlQUFDLEFBQWdELGtEQUFFO0FBQ2pELHVCQUFNLE9BQUMsQUFBUyxVQUFDLEFBQXdCLHlCQUFDLEFBQVUsWUFBRSxBQUE2QixBQUFDLEFBQUMsQUFDekY7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBFU1RyZWUgZnJvbSAnZXN0cmVlJztcblxuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnY2hhaSc7XG5cbmltcG9ydCB7IFRTdGF0ZW1lbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvdHlwZXMvbm9kZS9UU3RhdGVtZW50JztcblxuaW1wb3J0IHsgTm9kZXMgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvbm9kZS9Ob2Rlcyc7XG5pbXBvcnQgeyBOb2RlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvbm9kZS9Ob2RlVXRpbHMnO1xuXG5kZXNjcmliZSgnTm9kZVV0aWxzJywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCdhZGRYVmVyYmF0aW1Qcm9wZXJ0eVRvTGl0ZXJhbHMgKG5vZGU6IEVTVHJlZS5Ob2RlKTogdm9pZCcsICgpID0+IHtcbiAgICAgICAgbGV0IGxpdGVyYWxOb2RlOiBhbnksXG4gICAgICAgICAgICBleHBlY3RlZExpdGVyYWxOb2RlOiBhbnk7XG5cbiAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgIGxpdGVyYWxOb2RlID0gTm9kZXMuZ2V0TGl0ZXJhbE5vZGUoJ3ZhbHVlJyk7XG4gICAgICAgICAgICBkZWxldGUgbGl0ZXJhbE5vZGVbJ3gtdmVyYmF0aW0tcHJvcGVydHknXTtcblxuICAgICAgICAgICAgZXhwZWN0ZWRMaXRlcmFsTm9kZSA9IE5vZGVzLmdldExpdGVyYWxOb2RlKCd2YWx1ZScpO1xuXG4gICAgICAgICAgICBOb2RlVXRpbHMuYWRkWFZlcmJhdGltUHJvcGVydHlUb0xpdGVyYWxzKGxpdGVyYWxOb2RlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBhZGQgYHgtdmVyYmF0aW0tcHJvcGVydHlgIHRvIGBMaXRlcmFsYCBub2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChsaXRlcmFsTm9kZSwgZXhwZWN0ZWRMaXRlcmFsTm9kZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2Nsb25lIDxUIGV4dGVuZHMgRVNUcmVlLk5vZGU+IChhc3RUcmVlOiBUKTogVCcsICgpID0+IHtcbiAgICAgICAgbGV0IHByb2dyYW1Ob2RlOiBFU1RyZWUuUHJvZ3JhbSxcbiAgICAgICAgICAgIGV4cGVjdGVkUHJvZ3JhbU5vZGU6IEVTVHJlZS5Qcm9ncmFtO1xuXG4gICAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgICAgICAvLyBhY3R1YWwgQVNUIHRyZWVcbiAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMTogRVNUcmVlLkV4cHJlc3Npb25TdGF0ZW1lbnQgPSBOb2Rlcy5nZXRFeHByZXNzaW9uU3RhdGVtZW50Tm9kZShOb2Rlcy5nZXRJZGVudGlmaWVyTm9kZSgnaWRlbnRpZmllcicpKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMjogRVNUcmVlLkV4cHJlc3Npb25TdGF0ZW1lbnQgPSBOb2Rlcy5nZXRFeHByZXNzaW9uU3RhdGVtZW50Tm9kZShOb2Rlcy5nZXRJZGVudGlmaWVyTm9kZSgnaWRlbnRpZmllcicpKTtcblxuICAgICAgICAgICAgY29uc3QgaWZTdGF0ZW1lbnRCbG9ja1N0YXRlbWVudE5vZGUxOiBFU1RyZWUuQmxvY2tTdGF0ZW1lbnQgPSBOb2Rlcy5nZXRCbG9ja1N0YXRlbWVudE5vZGUoW1xuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMSxcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uU3RhdGVtZW50Tm9kZTJcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICBjb25zdCBpZlN0YXRlbWVudE5vZGUxOiBFU1RyZWUuSWZTdGF0ZW1lbnQgPSBOb2Rlcy5nZXRJZlN0YXRlbWVudE5vZGUoXG4gICAgICAgICAgICAgICAgTm9kZXMuZ2V0TGl0ZXJhbE5vZGUodHJ1ZSksXG4gICAgICAgICAgICAgICAgaWZTdGF0ZW1lbnRCbG9ja1N0YXRlbWVudE5vZGUxXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBleHBlY3RlZCBBU1QgdHJlZVxuICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUzOiBFU1RyZWUuRXhwcmVzc2lvblN0YXRlbWVudCA9IE5vZGVzLmdldEV4cHJlc3Npb25TdGF0ZW1lbnROb2RlKE5vZGVzLmdldElkZW50aWZpZXJOb2RlKCdpZGVudGlmaWVyJykpO1xuICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvblN0YXRlbWVudE5vZGU0OiBFU1RyZWUuRXhwcmVzc2lvblN0YXRlbWVudCA9IE5vZGVzLmdldEV4cHJlc3Npb25TdGF0ZW1lbnROb2RlKE5vZGVzLmdldElkZW50aWZpZXJOb2RlKCdpZGVudGlmaWVyJykpO1xuXG4gICAgICAgICAgICBjb25zdCBpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZTI6IEVTVHJlZS5CbG9ja1N0YXRlbWVudCA9IE5vZGVzLmdldEJsb2NrU3RhdGVtZW50Tm9kZShbXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUzLFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlNFxuICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGlmU3RhdGVtZW50Tm9kZTI6IEVTVHJlZS5JZlN0YXRlbWVudCA9IE5vZGVzLmdldElmU3RhdGVtZW50Tm9kZShcbiAgICAgICAgICAgICAgICBOb2Rlcy5nZXRMaXRlcmFsTm9kZSh0cnVlKSxcbiAgICAgICAgICAgICAgICBpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZTJcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHByb2dyYW1Ob2RlID0gTm9kZVV0aWxzLmNsb25lKFxuICAgICAgICAgICAgICAgIE5vZGVzLmdldFByb2dyYW1Ob2RlKFtcbiAgICAgICAgICAgICAgICAgICAgaWZTdGF0ZW1lbnROb2RlMVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZXhwZWN0ZWRQcm9ncmFtTm9kZSA9IE5vZGVVdGlscy5wYXJlbnRpemUoXG4gICAgICAgICAgICAgICAgTm9kZXMuZ2V0UHJvZ3JhbU5vZGUoW1xuICAgICAgICAgICAgICAgICAgICBpZlN0YXRlbWVudE5vZGUyXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgY2xvbmUgZ2l2ZW4gQVNULXRyZWUnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKHByb2dyYW1Ob2RlLCBleHBlY3RlZFByb2dyYW1Ob2RlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnY29udmVydENvZGVUb1N0cnVjdHVyZSAoY29kZTogc3RyaW5nKTogRVNUcmVlLk5vZGVbXScsICgpID0+IHtcbiAgICAgICAgbGV0IHN0cnVjdHVyZTogVFN0YXRlbWVudFtdLFxuICAgICAgICAgICAgZXhwZWN0ZWRTdHJ1Y3R1cmU6IFRTdGF0ZW1lbnRbXTtcblxuICAgICAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gYFxuICAgICAgICAgICAgICAgIHZhciBhYmMgPSAnY2RlJztcbiAgICAgICAgICAgIGA7XG5cbiAgICAgICAgICAgIGNvbnN0IGlkZW50aWZpZXJOb2RlOiBFU1RyZWUuSWRlbnRpZmllciA9IE5vZGVzLmdldElkZW50aWZpZXJOb2RlKCdhYmMnKTtcbiAgICAgICAgICAgIGNvbnN0IGxpdGVyYWxOb2RlOiBFU1RyZWUuTGl0ZXJhbCA9IE5vZGVzLmdldExpdGVyYWxOb2RlKCdjZGUnKTtcbiAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlRGVjbGFyYXRvck5vZGU6IEVTVHJlZS5WYXJpYWJsZURlY2xhcmF0b3IgPSBOb2Rlcy5nZXRWYXJpYWJsZURlY2xhcmF0b3JOb2RlKGlkZW50aWZpZXJOb2RlLCBsaXRlcmFsTm9kZSk7XG4gICAgICAgICAgICBjb25zdCB2YXJpYWJsZURlY2xhcmF0aW9uTm9kZTogRVNUcmVlLlZhcmlhYmxlRGVjbGFyYXRpb24gPSBOb2Rlcy5nZXRWYXJpYWJsZURlY2xhcmF0aW9uTm9kZShbXG4gICAgICAgICAgICAgICAgdmFyaWFibGVEZWNsYXJhdG9yTm9kZVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBjb25zdCBwcm9ncmFtTm9kZTogRVNUcmVlLlByb2dyYW0gPSBOb2Rlcy5nZXRQcm9ncmFtTm9kZShbXG4gICAgICAgICAgICAgICAgdmFyaWFibGVEZWNsYXJhdGlvbk5vZGVcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICBwcm9ncmFtTm9kZS5wYXJlbnROb2RlID0gcHJvZ3JhbU5vZGU7XG4gICAgICAgICAgICB2YXJpYWJsZURlY2xhcmF0aW9uTm9kZS5wYXJlbnROb2RlID0gcHJvZ3JhbU5vZGU7XG4gICAgICAgICAgICB2YXJpYWJsZURlY2xhcmF0b3JOb2RlLnBhcmVudE5vZGUgPSB2YXJpYWJsZURlY2xhcmF0aW9uTm9kZTtcbiAgICAgICAgICAgIGlkZW50aWZpZXJOb2RlLnBhcmVudE5vZGUgPSB2YXJpYWJsZURlY2xhcmF0b3JOb2RlO1xuICAgICAgICAgICAgbGl0ZXJhbE5vZGUucGFyZW50Tm9kZSA9IHZhcmlhYmxlRGVjbGFyYXRvck5vZGU7XG5cbiAgICAgICAgICAgIHN0cnVjdHVyZSA9IE5vZGVVdGlscy5jb252ZXJ0Q29kZVRvU3RydWN0dXJlKGNvZGUpO1xuICAgICAgICAgICAgZXhwZWN0ZWRTdHJ1Y3R1cmUgPSBbdmFyaWFibGVEZWNsYXJhdGlvbk5vZGVdO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGNvbnZlcnQgY29kZSB0byBgRVNUcmVlLk5vZGVbXWAgc3RydWN0dXJlIGFycmF5JywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChzdHJ1Y3R1cmUsIGV4cGVjdGVkU3RydWN0dXJlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnY29udmVydFN0cnVjdHVyZVRvQ29kZSAoc3RydWN0dXJlOiBFU1RyZWUuTm9kZVtdKTogc3RyaW5nJywgKCkgPT4ge1xuICAgICAgICBsZXQgc3RydWN0dXJlOiBFU1RyZWUuTm9kZVtdLFxuICAgICAgICAgICAgZXhwZWN0ZWRDb2RlOiBzdHJpbmc7XG5cbiAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgIHN0cnVjdHVyZSA9IFtcbiAgICAgICAgICAgICAgICBOb2Rlcy5nZXRQcm9ncmFtTm9kZShbXG4gICAgICAgICAgICAgICAgICAgIE5vZGVzLmdldFZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIE5vZGVzLmdldFZhcmlhYmxlRGVjbGFyYXRvck5vZGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9kZXMuZ2V0SWRlbnRpZmllck5vZGUoJ2FiYycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vZGVzLmdldExpdGVyYWxOb2RlKCdjZGUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgZXhwZWN0ZWRDb2RlID0gJ3ZhciBhYmMgPSBcXCdjZGVcXCc7JztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBjb252ZXJ0IGBFU1RyZWUuTm9kZVtdYCBzdHJ1Y3R1cmUgdG8gc291cmNlIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKE5vZGVVdGlscy5jb252ZXJ0U3RydWN0dXJlVG9Db2RlKHN0cnVjdHVyZSksIGV4cGVjdGVkQ29kZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldEJsb2NrU3RhdGVtZW50Tm9kZUJ5SW5kZXggKG5vZGU6IEVTVHJlZS5Ob2RlLCBpbmRleDogbnVtYmVyID0gMCk6IEVTVHJlZS5Ob2RlJywgKCkgPT4ge1xuICAgICAgICBsZXQgYmxvY2tTdGF0ZW1lbnROb2RlOiBFU1RyZWUuQmxvY2tTdGF0ZW1lbnQsXG4gICAgICAgICAgICBleHByZXNzaW9uU3RhdGVtZW50Tm9kZTE6IEVTVHJlZS5FeHByZXNzaW9uU3RhdGVtZW50LFxuICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUyOiBFU1RyZWUuRXhwcmVzc2lvblN0YXRlbWVudDtcblxuICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMSA9IE5vZGVzLmdldEV4cHJlc3Npb25TdGF0ZW1lbnROb2RlKE5vZGVzLmdldElkZW50aWZpZXJOb2RlKCdpZGVudGlmaWVyJykpO1xuICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUyID0gTm9kZXMuZ2V0RXhwcmVzc2lvblN0YXRlbWVudE5vZGUoTm9kZXMuZ2V0SWRlbnRpZmllck5vZGUoJ2lkZW50aWZpZXInKSk7XG5cbiAgICAgICAgICAgIGJsb2NrU3RhdGVtZW50Tm9kZSA9IE5vZGVzLmdldEJsb2NrU3RhdGVtZW50Tm9kZShbXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUxLFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMlxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGJsb2NrLXN0YXRlbWVudCBjaGlsZCBub2RlIG9mIGdpdmVuIG5vZGUgaWYgdGhhdCBub2RlIGhhcyBibG9jay1zdGF0ZW1lbnQnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKE5vZGVVdGlscy5nZXRCbG9ja1N0YXRlbWVudE5vZGVCeUluZGV4KGJsb2NrU3RhdGVtZW50Tm9kZSksIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGJsb2NrLXN0YXRlbWVudCBjaGlsZCBub2RlIG9mIGdpdmVuIG5vZGUgd2l0aCBpbmRleCBgMWAgaWYgdGhhdCBub2RlIGhhcyBibG9jay1zdGF0ZW1lbnQnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKE5vZGVVdGlscy5nZXRCbG9ja1N0YXRlbWVudE5vZGVCeUluZGV4KGJsb2NrU3RhdGVtZW50Tm9kZSwgMSksIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYSBgUmVmZXJlbmNlRXJyb3JgIGlmIGluZGV4IGlzIG91dCBvZiBib3VuZGFyaWVzJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LnRocm93cygoKSA9PiBOb2RlVXRpbHMuZ2V0QmxvY2tTdGF0ZW1lbnROb2RlQnlJbmRleChibG9ja1N0YXRlbWVudE5vZGUsIDIpLCBSZWZlcmVuY2VFcnJvcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYSBgVHlwZUVycm9yYCBpZiBub2RlIGhhdmUgbm8gYSBibG9jay1zdGF0ZW1lbnQnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQudGhyb3dzKCgpID0+IE5vZGVVdGlscy5nZXRCbG9ja1N0YXRlbWVudE5vZGVCeUluZGV4KGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMSwgMSksIFR5cGVFcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldEJsb2NrU2NvcGVzT2ZOb2RlIChub2RlOiBFU1RyZWUuTm9kZSwgYmxvY2tTY29wZXM6IFROb2RlV2l0aEJsb2NrU3RhdGVtZW50W10gPSBbXSk6IFROb2RlV2l0aEJsb2NrU3RhdGVtZW50W10nLCAoKSA9PiB7XG4gICAgICAgIGxldCBmdW5jdGlvbkRlY2xhcmF0aW9uQmxvY2tTdGF0ZW1lbnROb2RlOiBFU1RyZWUuQmxvY2tTdGF0ZW1lbnQsXG4gICAgICAgICAgICBpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZTE6IEVTVHJlZS5CbG9ja1N0YXRlbWVudCxcbiAgICAgICAgICAgIGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlMjogRVNUcmVlLkJsb2NrU3RhdGVtZW50LFxuICAgICAgICAgICAgaWZTdGF0ZW1lbnROb2RlMTogRVNUcmVlLklmU3RhdGVtZW50LFxuICAgICAgICAgICAgaWZTdGF0ZW1lbnROb2RlMjogRVNUcmVlLklmU3RhdGVtZW50LFxuICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUzOiBFU1RyZWUuRXhwcmVzc2lvblN0YXRlbWVudCxcbiAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMjogRVNUcmVlLkV4cHJlc3Npb25TdGF0ZW1lbnQsXG4gICAgICAgICAgICBleHByZXNzaW9uU3RhdGVtZW50Tm9kZTE6IEVTVHJlZS5FeHByZXNzaW9uU3RhdGVtZW50LFxuICAgICAgICAgICAgZnVuY3Rpb25EZWNsYXJhdGlvbk5vZGU6IEVTVHJlZS5GdW5jdGlvbkRlY2xhcmF0aW9uLFxuICAgICAgICAgICAgcHJvZ3JhbU5vZGU6IEVTVHJlZS5Qcm9ncmFtO1xuXG4gICAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgICAgICBleHByZXNzaW9uU3RhdGVtZW50Tm9kZTEgPSBOb2Rlcy5nZXRFeHByZXNzaW9uU3RhdGVtZW50Tm9kZShOb2Rlcy5nZXRJZGVudGlmaWVyTm9kZSgnaWRlbnRpZmllcicpKTtcbiAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMiA9IE5vZGVzLmdldEV4cHJlc3Npb25TdGF0ZW1lbnROb2RlKE5vZGVzLmdldElkZW50aWZpZXJOb2RlKCdpZGVudGlmaWVyJykpO1xuICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUzID0gTm9kZXMuZ2V0RXhwcmVzc2lvblN0YXRlbWVudE5vZGUoTm9kZXMuZ2V0SWRlbnRpZmllck5vZGUoJ2lkZW50aWZpZXInKSk7XG5cbiAgICAgICAgICAgIGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlMiA9IE5vZGVzLmdldEJsb2NrU3RhdGVtZW50Tm9kZShbXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUyLFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlM1xuICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgIGlmU3RhdGVtZW50Tm9kZTIgPSBOb2Rlcy5nZXRJZlN0YXRlbWVudE5vZGUoXG4gICAgICAgICAgICAgICAgTm9kZXMuZ2V0TGl0ZXJhbE5vZGUodHJ1ZSksXG4gICAgICAgICAgICAgICAgaWZTdGF0ZW1lbnRCbG9ja1N0YXRlbWVudE5vZGUyXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZTEgPSBOb2Rlcy5nZXRCbG9ja1N0YXRlbWVudE5vZGUoW1xuICAgICAgICAgICAgICAgIGlmU3RhdGVtZW50Tm9kZTJcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICBpZlN0YXRlbWVudE5vZGUxID0gTm9kZXMuZ2V0SWZTdGF0ZW1lbnROb2RlKFxuICAgICAgICAgICAgICAgIE5vZGVzLmdldExpdGVyYWxOb2RlKHRydWUpLFxuICAgICAgICAgICAgICAgIGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlMVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZnVuY3Rpb25EZWNsYXJhdGlvbkJsb2NrU3RhdGVtZW50Tm9kZSA9IE5vZGVzLmdldEJsb2NrU3RhdGVtZW50Tm9kZShbXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUxLFxuICAgICAgICAgICAgICAgIGlmU3RhdGVtZW50Tm9kZTFcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbkRlY2xhcmF0aW9uTm9kZSA9IE5vZGVzLmdldEZ1bmN0aW9uRGVjbGFyYXRpb25Ob2RlKCd0ZXN0JywgW10sIGZ1bmN0aW9uRGVjbGFyYXRpb25CbG9ja1N0YXRlbWVudE5vZGUpO1xuXG4gICAgICAgICAgICBwcm9ncmFtTm9kZSA9IE5vZGVzLmdldFByb2dyYW1Ob2RlKFtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbkRlY2xhcmF0aW9uTm9kZVxuICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgIHByb2dyYW1Ob2RlLnBhcmVudE5vZGUgPSBwcm9ncmFtTm9kZTtcbiAgICAgICAgICAgIGZ1bmN0aW9uRGVjbGFyYXRpb25Ob2RlLnBhcmVudE5vZGUgPSBwcm9ncmFtTm9kZTtcbiAgICAgICAgICAgIGZ1bmN0aW9uRGVjbGFyYXRpb25CbG9ja1N0YXRlbWVudE5vZGUucGFyZW50Tm9kZSA9IGZ1bmN0aW9uRGVjbGFyYXRpb25Ob2RlO1xuICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUxLnBhcmVudE5vZGUgPSBmdW5jdGlvbkRlY2xhcmF0aW9uQmxvY2tTdGF0ZW1lbnROb2RlO1xuICAgICAgICAgICAgaWZTdGF0ZW1lbnROb2RlMS5wYXJlbnROb2RlID0gZnVuY3Rpb25EZWNsYXJhdGlvbkJsb2NrU3RhdGVtZW50Tm9kZTtcbiAgICAgICAgICAgIGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlMS5wYXJlbnROb2RlID0gaWZTdGF0ZW1lbnROb2RlMTtcbiAgICAgICAgICAgIGlmU3RhdGVtZW50Tm9kZTIucGFyZW50Tm9kZSA9IGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlMTtcbiAgICAgICAgICAgIGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlMi5wYXJlbnROb2RlID0gaWZTdGF0ZW1lbnROb2RlMjtcbiAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMy5wYXJlbnROb2RlID0gaWZTdGF0ZW1lbnRCbG9ja1N0YXRlbWVudE5vZGUyO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBibG9jay1zY29wZSBub2RlIGZvciBgcHJvZ3JhbWAgbm9kZSBjaGlsZCcsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoTm9kZVV0aWxzLmdldEJsb2NrU2NvcGVzT2ZOb2RlKHByb2dyYW1Ob2RlKVswXSwgcHJvZ3JhbU5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBibG9jay1zY29wZSBub2RlIGZvciBgZnVuY3Rpb25EZWNsYXJhdGlvbmAgbm9kZSBjaGlsZCBub2RlICMxJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChOb2RlVXRpbHMuZ2V0QmxvY2tTY29wZXNPZk5vZGUoZnVuY3Rpb25EZWNsYXJhdGlvbk5vZGUpWzBdLCBwcm9ncmFtTm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGJsb2NrLXNjb3BlIG5vZGUgZm9yIGBmdW5jdGlvbkRlY2xhcmF0aW9uIGJsb2NrU3RhdGVtZW50YCBub2RlIGNoaWxkIG5vZGUgIzEnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKE5vZGVVdGlscy5nZXRCbG9ja1Njb3Blc09mTm9kZShmdW5jdGlvbkRlY2xhcmF0aW9uQmxvY2tTdGF0ZW1lbnROb2RlKVswXSwgcHJvZ3JhbU5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBibG9jay1zY29wZSBub2RlIGZvciBgZXhwcmVzc2lvblN0YXRlbWVudGAgbm9kZSAjMSBjaGlsZCBub2RlICMxJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChOb2RlVXRpbHMuZ2V0QmxvY2tTY29wZXNPZk5vZGUoZXhwcmVzc2lvblN0YXRlbWVudE5vZGUxKVswXSwgZnVuY3Rpb25EZWNsYXJhdGlvbkJsb2NrU3RhdGVtZW50Tm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGJsb2NrLXNjb3BlIG5vZGUgZm9yIGBleHByZXNzaW9uU3RhdGVtZW50YCBub2RlICMxIGNoaWxkIG5vZGUgIzInLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKE5vZGVVdGlscy5nZXRCbG9ja1Njb3Blc09mTm9kZShleHByZXNzaW9uU3RhdGVtZW50Tm9kZTEpWzFdLCBwcm9ncmFtTm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGJsb2NrLXNjb3BlIG5vZGUgZm9yIGBpZlN0YXRlbWVudGAgbm9kZSBjaGlsZCBub2RlICMxJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChOb2RlVXRpbHMuZ2V0QmxvY2tTY29wZXNPZk5vZGUoaWZTdGF0ZW1lbnROb2RlMSlbMF0sIGZ1bmN0aW9uRGVjbGFyYXRpb25CbG9ja1N0YXRlbWVudE5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBibG9jay1zY29wZSBub2RlIGZvciBgaWZTdGF0ZW1lbnRgIG5vZGUgY2hpbGQgbm9kZSAjMicsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoTm9kZVV0aWxzLmdldEJsb2NrU2NvcGVzT2ZOb2RlKGlmU3RhdGVtZW50Tm9kZTEpWzFdLCBwcm9ncmFtTm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGJsb2NrLXNjb3BlIG5vZGUgZm9yIGBpZlN0YXRlbWVudCBibG9ja1N0YXRlbWVudGAgbm9kZSAjMSBjaGlsZCBub2RlICMxJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChOb2RlVXRpbHMuZ2V0QmxvY2tTY29wZXNPZk5vZGUoaWZTdGF0ZW1lbnRCbG9ja1N0YXRlbWVudE5vZGUxKVswXSwgZnVuY3Rpb25EZWNsYXJhdGlvbkJsb2NrU3RhdGVtZW50Tm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGJsb2NrLXNjb3BlIG5vZGUgZm9yIGBpZlN0YXRlbWVudCBibG9ja1N0YXRlbWVudGAgbm9kZSAjMSBjaGlsZCBub2RlICMyJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChOb2RlVXRpbHMuZ2V0QmxvY2tTY29wZXNPZk5vZGUoaWZTdGF0ZW1lbnRCbG9ja1N0YXRlbWVudE5vZGUxKVsxXSwgcHJvZ3JhbU5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBibG9jay1zY29wZSBub2RlIGZvciBgaWZTdGF0ZW1lbnQgYmxvY2tTdGF0ZW1lbnRgIG5vZGUgIzIgY2hpbGQgbm9kZSAjMScsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoTm9kZVV0aWxzLmdldEJsb2NrU2NvcGVzT2ZOb2RlKGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlMilbMF0sIGZ1bmN0aW9uRGVjbGFyYXRpb25CbG9ja1N0YXRlbWVudE5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBibG9jay1zY29wZSBub2RlIGZvciBgaWZTdGF0ZW1lbnQgYmxvY2tTdGF0ZW1lbnRgIG5vZGUgIzEgY2hpbGQgbm9kZSAjMicsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoTm9kZVV0aWxzLmdldEJsb2NrU2NvcGVzT2ZOb2RlKGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlMilbMV0sIHByb2dyYW1Ob2RlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYmxvY2stc2NvcGUgbm9kZSBmb3IgYGV4cHJlc3Npb25TdGF0ZW1lbnRgIG5vZGUgIzMgY2hpbGQgbm9kZSAjMScsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoTm9kZVV0aWxzLmdldEJsb2NrU2NvcGVzT2ZOb2RlKGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMylbMF0sIGZ1bmN0aW9uRGVjbGFyYXRpb25CbG9ja1N0YXRlbWVudE5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBibG9jay1zY29wZSBub2RlIGZvciBgZXhwcmVzc2lvblN0YXRlbWVudGAgbm9kZSAjMyBjaGlsZCBub2RlICMyJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChOb2RlVXRpbHMuZ2V0QmxvY2tTY29wZXNPZk5vZGUoZXhwcmVzc2lvblN0YXRlbWVudE5vZGUzKVsxXSwgcHJvZ3JhbU5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHRocm93IGEgYFJlZmVyZW5jZUVycm9yYCBpZiBub2RlIGhhcyBubyBgcGFyZW50Tm9kZWAgcHJvcGVydHknLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQudGhyb3dzKCgpID0+IE5vZGVVdGlscy5nZXRCbG9ja1Njb3Blc09mTm9kZShleHByZXNzaW9uU3RhdGVtZW50Tm9kZTIpWzBdLCBSZWZlcmVuY2VFcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldE5vZGVCbG9ja1Njb3BlRGVwdGggKG5vZGU6IEVTVHJlZS5Ob2RlLCBkZXB0aDogbnVtYmVyID0gMCk6IG51bWJlcicsICgpID0+IHtcbiAgICAgICAgbGV0IGZ1bmN0aW9uRGVjbGFyYXRpb25CbG9ja1N0YXRlbWVudE5vZGUxOiBFU1RyZWUuQmxvY2tTdGF0ZW1lbnQsXG4gICAgICAgICAgICBmdW5jdGlvbkRlY2xhcmF0aW9uQmxvY2tTdGF0ZW1lbnROb2RlMjogRVNUcmVlLkJsb2NrU3RhdGVtZW50LFxuICAgICAgICAgICAgaWZTdGF0ZW1lbnRCbG9ja1N0YXRlbWVudE5vZGUxOiBFU1RyZWUuQmxvY2tTdGF0ZW1lbnQsXG4gICAgICAgICAgICBpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZTI6IEVTVHJlZS5CbG9ja1N0YXRlbWVudCxcbiAgICAgICAgICAgIGlmU3RhdGVtZW50Tm9kZTE6IEVTVHJlZS5JZlN0YXRlbWVudCxcbiAgICAgICAgICAgIGlmU3RhdGVtZW50Tm9kZTI6IEVTVHJlZS5JZlN0YXRlbWVudCxcbiAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMTogRVNUcmVlLkV4cHJlc3Npb25TdGF0ZW1lbnQsXG4gICAgICAgICAgICBleHByZXNzaW9uU3RhdGVtZW50Tm9kZTI6IEVTVHJlZS5FeHByZXNzaW9uU3RhdGVtZW50LFxuICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUzOiBFU1RyZWUuRXhwcmVzc2lvblN0YXRlbWVudCxcbiAgICAgICAgICAgIGZ1bmN0aW9uRGVjbGFyYXRpb25Ob2RlMTogRVNUcmVlLkZ1bmN0aW9uRGVjbGFyYXRpb24sXG4gICAgICAgICAgICBmdW5jdGlvbkRlY2xhcmF0aW9uTm9kZTI6IEVTVHJlZS5GdW5jdGlvbkRlY2xhcmF0aW9uLFxuICAgICAgICAgICAgcHJvZ3JhbU5vZGU6IEVTVHJlZS5Qcm9ncmFtO1xuXG4gICAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgICAgICBleHByZXNzaW9uU3RhdGVtZW50Tm9kZTEgPSBOb2Rlcy5nZXRFeHByZXNzaW9uU3RhdGVtZW50Tm9kZShOb2Rlcy5nZXRJZGVudGlmaWVyTm9kZSgnaWRlbnRpZmllcicpKTtcbiAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMiA9IE5vZGVzLmdldEV4cHJlc3Npb25TdGF0ZW1lbnROb2RlKE5vZGVzLmdldElkZW50aWZpZXJOb2RlKCdpZGVudGlmaWVyJykpO1xuICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUzID0gTm9kZXMuZ2V0RXhwcmVzc2lvblN0YXRlbWVudE5vZGUoTm9kZXMuZ2V0SWRlbnRpZmllck5vZGUoJ2lkZW50aWZpZXInKSk7XG5cbiAgICAgICAgICAgIGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlMiA9IE5vZGVzLmdldEJsb2NrU3RhdGVtZW50Tm9kZShbXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUzXG4gICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgaWZTdGF0ZW1lbnROb2RlMiA9IE5vZGVzLmdldElmU3RhdGVtZW50Tm9kZShcbiAgICAgICAgICAgICAgICBOb2Rlcy5nZXRMaXRlcmFsTm9kZSh0cnVlKSxcbiAgICAgICAgICAgICAgICBpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZTJcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uRGVjbGFyYXRpb25CbG9ja1N0YXRlbWVudE5vZGUyID0gTm9kZXMuZ2V0QmxvY2tTdGF0ZW1lbnROb2RlKFtcbiAgICAgICAgICAgICAgICBpZlN0YXRlbWVudE5vZGUyLFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMlxuICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uRGVjbGFyYXRpb25Ob2RlMiA9IE5vZGVzLmdldEZ1bmN0aW9uRGVjbGFyYXRpb25Ob2RlKCd0ZXN0JywgW10sIGZ1bmN0aW9uRGVjbGFyYXRpb25CbG9ja1N0YXRlbWVudE5vZGUyKTtcblxuICAgICAgICAgICAgaWZTdGF0ZW1lbnRCbG9ja1N0YXRlbWVudE5vZGUxID0gTm9kZXMuZ2V0QmxvY2tTdGF0ZW1lbnROb2RlKFtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbkRlY2xhcmF0aW9uTm9kZTJcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICBpZlN0YXRlbWVudE5vZGUxID0gTm9kZXMuZ2V0SWZTdGF0ZW1lbnROb2RlKFxuICAgICAgICAgICAgICAgIE5vZGVzLmdldExpdGVyYWxOb2RlKHRydWUpLFxuICAgICAgICAgICAgICAgIGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlMVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZnVuY3Rpb25EZWNsYXJhdGlvbkJsb2NrU3RhdGVtZW50Tm9kZTEgPSBOb2Rlcy5nZXRCbG9ja1N0YXRlbWVudE5vZGUoW1xuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMSxcbiAgICAgICAgICAgICAgICBpZlN0YXRlbWVudE5vZGUxXG4gICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgZnVuY3Rpb25EZWNsYXJhdGlvbk5vZGUxID0gTm9kZXMuZ2V0RnVuY3Rpb25EZWNsYXJhdGlvbk5vZGUoJ3Rlc3QnLCBbXSwgZnVuY3Rpb25EZWNsYXJhdGlvbkJsb2NrU3RhdGVtZW50Tm9kZTEpO1xuXG4gICAgICAgICAgICBwcm9ncmFtTm9kZSA9IE5vZGVzLmdldFByb2dyYW1Ob2RlKFtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbkRlY2xhcmF0aW9uTm9kZTFcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICBwcm9ncmFtTm9kZS5wYXJlbnROb2RlID0gcHJvZ3JhbU5vZGU7XG4gICAgICAgICAgICBmdW5jdGlvbkRlY2xhcmF0aW9uTm9kZTEucGFyZW50Tm9kZSA9IHByb2dyYW1Ob2RlO1xuICAgICAgICAgICAgZnVuY3Rpb25EZWNsYXJhdGlvbkJsb2NrU3RhdGVtZW50Tm9kZTEucGFyZW50Tm9kZSA9IGZ1bmN0aW9uRGVjbGFyYXRpb25Ob2RlMTtcbiAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMS5wYXJlbnROb2RlID0gZnVuY3Rpb25EZWNsYXJhdGlvbkJsb2NrU3RhdGVtZW50Tm9kZTE7XG4gICAgICAgICAgICBpZlN0YXRlbWVudE5vZGUxLnBhcmVudE5vZGUgPSBmdW5jdGlvbkRlY2xhcmF0aW9uQmxvY2tTdGF0ZW1lbnROb2RlMTtcbiAgICAgICAgICAgIGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlMS5wYXJlbnROb2RlID0gaWZTdGF0ZW1lbnROb2RlMTtcbiAgICAgICAgICAgIGZ1bmN0aW9uRGVjbGFyYXRpb25Ob2RlMi5wYXJlbnROb2RlID0gaWZTdGF0ZW1lbnRCbG9ja1N0YXRlbWVudE5vZGUxO1xuICAgICAgICAgICAgZnVuY3Rpb25EZWNsYXJhdGlvbkJsb2NrU3RhdGVtZW50Tm9kZTIucGFyZW50Tm9kZSA9IGZ1bmN0aW9uRGVjbGFyYXRpb25Ob2RlMjtcbiAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMi5wYXJlbnROb2RlID0gZnVuY3Rpb25EZWNsYXJhdGlvbkJsb2NrU3RhdGVtZW50Tm9kZTI7XG4gICAgICAgICAgICBpZlN0YXRlbWVudE5vZGUyLnBhcmVudE5vZGUgPSBmdW5jdGlvbkRlY2xhcmF0aW9uQmxvY2tTdGF0ZW1lbnROb2RlMjtcbiAgICAgICAgICAgIGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlMi5wYXJlbnROb2RlID0gaWZTdGF0ZW1lbnROb2RlMjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYmxvY2stc2NvcGUgZGVwdGggZm9yIGBwcm9ncmFtYCBub2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChOb2RlVXRpbHMuZ2V0Tm9kZUJsb2NrU2NvcGVEZXB0aChwcm9ncmFtTm9kZSksIDApO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBibG9jay1zY29wZSBkZXB0aCBmb3IgYGZ1bmN0aW9uRGVjbGFyYXRpb25gIG5vZGUgIzEnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKE5vZGVVdGlscy5nZXROb2RlQmxvY2tTY29wZURlcHRoKGZ1bmN0aW9uRGVjbGFyYXRpb25Ob2RlMSksIDApO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBibG9jay1zY29wZSBkZXB0aCBmb3IgYGZ1bmN0aW9uRGVjbGFyYXRpb24gYmxvY2tTdGF0ZW1lbnRgIG5vZGUgIzEnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKE5vZGVVdGlscy5nZXROb2RlQmxvY2tTY29wZURlcHRoKGZ1bmN0aW9uRGVjbGFyYXRpb25CbG9ja1N0YXRlbWVudE5vZGUxKSwgMSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGJsb2NrLXNjb3BlIGRlcHRoIGZvciBgZXhwcmVzc2lvblN0YXRlbWVudGAgbm9kZSAjMScsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoTm9kZVV0aWxzLmdldE5vZGVCbG9ja1Njb3BlRGVwdGgoZXhwcmVzc2lvblN0YXRlbWVudE5vZGUxKSwgMSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGJsb2NrLXNjb3BlIGRlcHRoIGZvciBgaWZTdGF0ZW1lbnRgIG5vZGUgIzEnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKE5vZGVVdGlscy5nZXROb2RlQmxvY2tTY29wZURlcHRoKGlmU3RhdGVtZW50Tm9kZTEpLCAxKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYmxvY2stc2NvcGUgZGVwdGggZm9yIGBpZlN0YXRlbWVudCBibG9ja1N0YXRlbWVudGAgbm9kZSAjMScsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoTm9kZVV0aWxzLmdldE5vZGVCbG9ja1Njb3BlRGVwdGgoaWZTdGF0ZW1lbnRCbG9ja1N0YXRlbWVudE5vZGUxKSwgMSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGJsb2NrLXNjb3BlIGRlcHRoIGZvciBgZnVuY3Rpb25EZWNsYXJhdGlvbmAgbm9kZSAjMicsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoTm9kZVV0aWxzLmdldE5vZGVCbG9ja1Njb3BlRGVwdGgoZnVuY3Rpb25EZWNsYXJhdGlvbk5vZGUyKSwgMSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGJsb2NrLXNjb3BlIGRlcHRoIGZvciBgZnVuY3Rpb25EZWNsYXJhdGlvbiBibG9ja1N0YXRlbWVudGAgbm9kZSAjMicsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoTm9kZVV0aWxzLmdldE5vZGVCbG9ja1Njb3BlRGVwdGgoZnVuY3Rpb25EZWNsYXJhdGlvbkJsb2NrU3RhdGVtZW50Tm9kZTIpLCAyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYmxvY2stc2NvcGUgZGVwdGggZm9yIGBleHByZXNzaW9uU3RhdGVtZW50YCBub2RlICMyJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChOb2RlVXRpbHMuZ2V0Tm9kZUJsb2NrU2NvcGVEZXB0aChleHByZXNzaW9uU3RhdGVtZW50Tm9kZTIpLCAyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYmxvY2stc2NvcGUgZGVwdGggZm9yIGBpZlN0YXRlbWVudGAgbm9kZSAjMicsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoTm9kZVV0aWxzLmdldE5vZGVCbG9ja1Njb3BlRGVwdGgoaWZTdGF0ZW1lbnROb2RlMiksIDIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBibG9jay1zY29wZSBkZXB0aCBmb3IgYGlmU3RhdGVtZW50IGJsb2NrU3RhdGVtZW50YCBub2RlICMyJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChOb2RlVXRpbHMuZ2V0Tm9kZUJsb2NrU2NvcGVEZXB0aChpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZTIpLCAyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBhIGBSZWZlcmVuY2VFcnJvcmAgaWYgbm9kZSBoYXMgbm8gYHBhcmVudE5vZGVgIHByb3BlcnR5JywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LnRocm93cygoKSA9PiBOb2RlVXRpbHMuZ2V0Tm9kZUJsb2NrU2NvcGVEZXB0aChleHByZXNzaW9uU3RhdGVtZW50Tm9kZTMpLCBSZWZlcmVuY2VFcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldFVuYXJ5RXhwcmVzc2lvbkFyZ3VtZW50Tm9kZSAodW5hcnlFeHByZXNzaW9uTm9kZTogRVNUcmVlLlVuYXJ5RXhwcmVzc2lvbik6IEVTVHJlZS5Ob2RlJywgKCkgPT4ge1xuICAgICAgICBsZXQgZXhwZWN0ZWROb2RlOiBFU1RyZWUuTGl0ZXJhbCxcbiAgICAgICAgICAgIHVuYXJ5RXhwcmVzc2lvbkFyZ3VtZW50Tm9kZTogRVNUcmVlLk5vZGU7XG5cbiAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxpdGVyYWxOb2RlOiBFU1RyZWUuTGl0ZXJhbCA9IE5vZGVzLmdldExpdGVyYWxOb2RlKCd0ZXN0Jyk7XG4gICAgICAgICAgICBjb25zdCB1bmFyeUV4cHJlc3Npb25Ob2RlMjogRVNUcmVlLlVuYXJ5RXhwcmVzc2lvbiA9IE5vZGVzLmdldFVuYXJ5RXhwcmVzc2lvbk5vZGUoJyEnLCBsaXRlcmFsTm9kZSk7XG4gICAgICAgICAgICBjb25zdCB1bmFyeUV4cHJlc3Npb25Ob2RlMTogRVNUcmVlLlVuYXJ5RXhwcmVzc2lvbiA9IE5vZGVzLmdldFVuYXJ5RXhwcmVzc2lvbk5vZGUoJyEnLCB1bmFyeUV4cHJlc3Npb25Ob2RlMik7XG4gICAgICAgICAgICBjb25zdCBleHByZXNzaW9uU3RhdGVtZW50Tm9kZTogRVNUcmVlLkV4cHJlc3Npb25TdGF0ZW1lbnQgPSBOb2Rlcy5nZXRFeHByZXNzaW9uU3RhdGVtZW50Tm9kZSh1bmFyeUV4cHJlc3Npb25Ob2RlMSk7XG4gICAgICAgICAgICBjb25zdCBwcm9ncmFtTm9kZTogRVNUcmVlLlByb2dyYW0gPSBOb2Rlcy5nZXRQcm9ncmFtTm9kZShbXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGVcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICBwcm9ncmFtTm9kZS5wYXJlbnROb2RlID0gcHJvZ3JhbU5vZGU7XG4gICAgICAgICAgICBleHByZXNzaW9uU3RhdGVtZW50Tm9kZS5wYXJlbnROb2RlID0gcHJvZ3JhbU5vZGU7XG4gICAgICAgICAgICB1bmFyeUV4cHJlc3Npb25Ob2RlMS5wYXJlbnROb2RlID0gZXhwcmVzc2lvblN0YXRlbWVudE5vZGU7XG4gICAgICAgICAgICB1bmFyeUV4cHJlc3Npb25Ob2RlMi5wYXJlbnROb2RlID0gdW5hcnlFeHByZXNzaW9uTm9kZTE7XG4gICAgICAgICAgICBsaXRlcmFsTm9kZS5wYXJlbnROb2RlID0gdW5hcnlFeHByZXNzaW9uTm9kZTI7XG5cbiAgICAgICAgICAgIHVuYXJ5RXhwcmVzc2lvbkFyZ3VtZW50Tm9kZSA9IE5vZGVVdGlscy5nZXRVbmFyeUV4cHJlc3Npb25Bcmd1bWVudE5vZGUodW5hcnlFeHByZXNzaW9uTm9kZTEpO1xuICAgICAgICAgICAgZXhwZWN0ZWROb2RlID0gbGl0ZXJhbE5vZGU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHVuYXJ5IGV4cHJlc3Npb24gYXJndW1lbnQgbm9kZScsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwodW5hcnlFeHByZXNzaW9uQXJndW1lbnROb2RlLCBleHBlY3RlZE5vZGUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdwYXJlbnRpemUgPFQgZXh0ZW5kcyBFU1RyZWUuTm9kZT4gKGFzdFRyZWU6IFQpOiBUJywgKCkgPT4ge1xuICAgICAgICBsZXQgaWZTdGF0ZW1lbnROb2RlOiBFU1RyZWUuSWZTdGF0ZW1lbnQsXG4gICAgICAgICAgICBpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZTogRVNUcmVlLkJsb2NrU3RhdGVtZW50LFxuICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUxOiBFU1RyZWUuRXhwcmVzc2lvblN0YXRlbWVudCxcbiAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMjogRVNUcmVlLkV4cHJlc3Npb25TdGF0ZW1lbnQsXG4gICAgICAgICAgICBwcm9ncmFtTm9kZTogRVNUcmVlLlByb2dyYW07XG5cbiAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICBleHByZXNzaW9uU3RhdGVtZW50Tm9kZTEgPSBOb2Rlcy5nZXRFeHByZXNzaW9uU3RhdGVtZW50Tm9kZShOb2Rlcy5nZXRJZGVudGlmaWVyTm9kZSgnaWRlbnRpZmllcicpKTtcbiAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMiA9IE5vZGVzLmdldEV4cHJlc3Npb25TdGF0ZW1lbnROb2RlKE5vZGVzLmdldElkZW50aWZpZXJOb2RlKCdpZGVudGlmaWVyJykpO1xuXG4gICAgICAgICAgICBpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZSA9IE5vZGVzLmdldEJsb2NrU3RhdGVtZW50Tm9kZShbXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvblN0YXRlbWVudE5vZGUxLFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMlxuICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgIGlmU3RhdGVtZW50Tm9kZSA9IE5vZGVzLmdldElmU3RhdGVtZW50Tm9kZShcbiAgICAgICAgICAgICAgICBOb2Rlcy5nZXRMaXRlcmFsTm9kZSh0cnVlKSxcbiAgICAgICAgICAgICAgICBpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3BhcmVudGl6ZSBBU1QtdHJlZSB3aXRoIGBQcm9ncmFtTm9kZWAgYXMgcm9vdCBub2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbU5vZGUgPSBOb2Rlcy5nZXRQcm9ncmFtTm9kZShbXG4gICAgICAgICAgICAgICAgICAgIGlmU3RhdGVtZW50Tm9kZVxuICAgICAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICAgICAgcHJvZ3JhbU5vZGUgPSBOb2RlVXRpbHMucGFyZW50aXplKHByb2dyYW1Ob2RlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgnc2hvdWxkIHBhcmVudGl6ZSBgcHJvZ3JhbWAgbm9kZSB3aXRoIGBQcm9ncmFtTm9kZWAgYXMgcm9vdCBub2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwocHJvZ3JhbU5vZGUucGFyZW50Tm9kZSwgcHJvZ3JhbU5vZGUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdzaG91bGQgcGFyZW50aXplIGBpZlN0YXRlbWVudGAgbm9kZSB3aXRoIGBQcm9ncmFtTm9kZWAgYXMgcm9vdCBub2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoaWZTdGF0ZW1lbnROb2RlLnBhcmVudE5vZGUsIHByb2dyYW1Ob2RlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgnc2hvdWxkIHBhcmVudGl6ZSBgaWZTdGF0ZW1lbnQgYmxvY2tTdGF0ZW1lbnRgIG5vZGUgd2l0aCBgUHJvZ3JhbU5vZGVgIGFzIHJvb3Qgbm9kZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlLnBhcmVudE5vZGUsIGlmU3RhdGVtZW50Tm9kZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Nob3VsZCBwYXJlbnRpemUgYGV4cHJlc3Npb25TdGF0ZW1lbnRgIG5vZGUgIzEgd2l0aCBgUHJvZ3JhbU5vZGVgIGFzIHJvb3Qgbm9kZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMS5wYXJlbnROb2RlLCBpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Nob3VsZCBwYXJlbnRpemUgYGV4cHJlc3Npb25TdGF0ZW1lbnRgIG5vZGUgIzIgd2l0aCBgUHJvZ3JhbU5vZGVgIGFzIHJvb3Qgbm9kZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMi5wYXJlbnROb2RlLCBpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3BhcmVudGl6ZSBBU1QtdHJlZScsICgpID0+IHtcbiAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIHByb2dyYW1Ob2RlID0gTm9kZXMuZ2V0UHJvZ3JhbU5vZGUoW1xuICAgICAgICAgICAgICAgICAgICBpZlN0YXRlbWVudE5vZGVcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBwcm9ncmFtTm9kZS5wYXJlbnROb2RlID0gcHJvZ3JhbU5vZGU7XG5cbiAgICAgICAgICAgICAgICBpZlN0YXRlbWVudE5vZGUgPSBOb2RlVXRpbHMucGFyZW50aXplKGlmU3RhdGVtZW50Tm9kZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Nob3VsZCBwYXJlbnRpemUgYGlmU3RhdGVtZW50YCBub2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoaWZTdGF0ZW1lbnROb2RlLnBhcmVudE5vZGUsIHByb2dyYW1Ob2RlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgnc2hvdWxkIHBhcmVudGl6ZSBgaWZTdGF0ZW1lbnQgYmxvY2tTdGF0ZW1lbnRgIG5vZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZS5wYXJlbnROb2RlLCBpZlN0YXRlbWVudE5vZGUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdzaG91bGQgcGFyZW50aXplIGBleHByZXNzaW9uU3RhdGVtZW50YCBub2RlICMxJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoZXhwcmVzc2lvblN0YXRlbWVudE5vZGUxLnBhcmVudE5vZGUsIGlmU3RhdGVtZW50QmxvY2tTdGF0ZW1lbnROb2RlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgnc2hvdWxkIHBhcmVudGl6ZSBgZXhwcmVzc2lvblN0YXRlbWVudGAgbm9kZSAjMicsICgpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKGV4cHJlc3Npb25TdGF0ZW1lbnROb2RlMi5wYXJlbnROb2RlLCBpZlN0YXRlbWVudEJsb2NrU3RhdGVtZW50Tm9kZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==