"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ServiceIdentifiers_1 = require("../../../../src/container/ServiceIdentifiers");
var chai_1 = require("chai");
var readFileAsString_1 = require("../../../helpers/readFileAsString");
var InversifyContainerFacade_1 = require("../../../../src/container/InversifyContainerFacade");
var NodeAppender_1 = require("../../../../src/node/NodeAppender");
var Nodes_1 = require("../../../../src/node/Nodes");
var NodeUtils_1 = require("../../../../src/node/NodeUtils");
var convertCodeToStructure = function convertCodeToStructure(fixturePath) {
    return NodeUtils_1.NodeUtils.convertCodeToStructure(readFileAsString_1.readFileAsString("" + __dirname + fixturePath));
};
var convertCodeToAst = function convertCodeToAst(fixturePath) {
    return Nodes_1.Nodes.getProgramNode(convertCodeToStructure(fixturePath));
};
describe('NodeAppender', function () {
    describe('appendNode (blockScopeNode: TNodeWithBlockStatement[], nodeBodyStatements: TStatement[]): void', function () {
        var astTree = void 0,
            expectedAstTree = void 0,
            node = void 0;
        before(function () {
            node = convertCodeToStructure('/fixtures/simple-input.js');
            astTree = convertCodeToAst('/fixtures/append-node.js');
            expectedAstTree = convertCodeToAst('/fixtures/append-node-expected.js');
            astTree = NodeUtils_1.NodeUtils.parentize(astTree);
            expectedAstTree = NodeUtils_1.NodeUtils.parentize(expectedAstTree);
            NodeAppender_1.NodeAppender.appendNode(astTree, node);
        });
        it('should append given node to a `BlockStatement` node body', function () {
            chai_1.assert.deepEqual(astTree, expectedAstTree);
        });
    });
    describe('appendNodeToOptimalBlockScope (blockScopeStackTraceData: IStackTraceData[], blockScopeNode: TNodeWithBlockStatement, nodeBodyStatements: TStatement[], index: number = 0): void', function () {
        var stackTraceAnalyzer = void 0,
            astTree = void 0,
            expectedAstTree = void 0,
            node = void 0,
            stackTraceData = void 0;
        before(function () {
            var inversifyContainerFacade = new InversifyContainerFacade_1.InversifyContainerFacade();
            inversifyContainerFacade.load('', {});
            stackTraceAnalyzer = inversifyContainerFacade.get(ServiceIdentifiers_1.ServiceIdentifiers.IStackTraceAnalyzer);
        });
        beforeEach(function () {
            node = convertCodeToStructure('/fixtures/simple-input.js');
        });
        describe('variant #1: nested function calls', function () {
            beforeEach(function () {
                astTree = convertCodeToAst('/fixtures/append-node-to-optimal-block-scope/variant-1.js');
                expectedAstTree = convertCodeToAst('/fixtures/append-node-to-optimal-block-scope/variant-1-expected.js');
                stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
                NodeAppender_1.NodeAppender.appendNodeToOptimalBlockScope(stackTraceData, astTree, node);
            });
            it('should append node into first and deepest function call in nested function calls', function () {
                chai_1.assert.deepEqual(astTree, expectedAstTree);
            });
        });
        describe('variant #2: nested function calls', function () {
            beforeEach(function () {
                astTree = convertCodeToAst('/fixtures/append-node-to-optimal-block-scope/variant-2.js');
                expectedAstTree = convertCodeToAst('/fixtures/append-node-to-optimal-block-scope/variant-2-expected.js');
                stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
                NodeAppender_1.NodeAppender.appendNodeToOptimalBlockScope(stackTraceData, astTree, node);
            });
            it('should append node into first and deepest function call in nested function calls', function () {
                chai_1.assert.deepEqual(astTree, expectedAstTree);
            });
        });
        describe('append by specific index', function () {
            var astTree = void 0;
            beforeEach(function () {
                astTree = convertCodeToAst('/fixtures/append-node-to-optimal-block-scope/by-index.js');
            });
            describe('variant #1: append by specific index in nested function calls', function () {
                beforeEach(function () {
                    expectedAstTree = convertCodeToAst('/fixtures/append-node-to-optimal-block-scope/by-index-variant-1-expected.js');
                    stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
                    NodeAppender_1.NodeAppender.appendNodeToOptimalBlockScope(stackTraceData, astTree, node, 2);
                });
                it('should append node into deepest function call by specified index in nested function calls', function () {
                    chai_1.assert.deepEqual(astTree, expectedAstTree);
                });
            });
            describe('variant #2: append by specific index in nested function calls', function () {
                beforeEach(function () {
                    expectedAstTree = convertCodeToAst('/fixtures/append-node-to-optimal-block-scope/by-index-variant-2-expected.js');
                    stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
                    NodeAppender_1.NodeAppender.appendNodeToOptimalBlockScope(stackTraceData, astTree, node, 1);
                });
                it('should append node into deepest function call by specified index in nested function calls', function () {
                    chai_1.assert.deepEqual(astTree, expectedAstTree);
                });
            });
            describe('variant #3: append by specific index in nested function calls', function () {
                beforeEach(function () {
                    astTree = convertCodeToAst('/fixtures/append-node-to-optimal-block-scope/by-index-variant-3.js');
                    expectedAstTree = convertCodeToAst('/fixtures/append-node-to-optimal-block-scope/by-index-variant-3-expected.js');
                    stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
                    NodeAppender_1.NodeAppender.appendNodeToOptimalBlockScope(stackTraceData, astTree, node, stackTraceData.length - 1);
                });
                it('should append node into deepest function call by specified index in nested function calls', function () {
                    chai_1.assert.deepEqual(astTree, expectedAstTree);
                });
            });
        });
    });
    describe('insertNodeAtIndex (blockScopeNode: TNodeWithBlockStatement[], nodeBodyStatements: TStatement[], index: number): void', function () {
        var astTree = void 0,
            expectedAstTree = void 0,
            node = void 0;
        before(function () {
            node = convertCodeToStructure('/fixtures/simple-input.js');
            astTree = convertCodeToAst('/fixtures/insert-node-at-index.js');
            expectedAstTree = convertCodeToAst('/fixtures/insert-node-at-index-expected.js');
            astTree = NodeUtils_1.NodeUtils.parentize(astTree);
            expectedAstTree = NodeUtils_1.NodeUtils.parentize(expectedAstTree);
            NodeAppender_1.NodeAppender.insertNodeAtIndex(astTree, node, 2);
        });
        it('should insert given node in `BlockStatement` node body at index', function () {
            chai_1.assert.deepEqual(astTree, expectedAstTree);
        });
    });
    describe('prependNode (blockScopeNode: TNodeWithBlockStatement[], nodeBodyStatements: TStatement[]): void', function () {
        var astTree = void 0,
            expectedAstTree = void 0,
            node = void 0;
        before(function () {
            node = convertCodeToStructure('/fixtures/simple-input.js');
            astTree = convertCodeToAst('/fixtures/prepend-node.js');
            expectedAstTree = convertCodeToAst('/fixtures/prepend-node-expected.js');
            astTree = NodeUtils_1.NodeUtils.parentize(astTree);
            expectedAstTree = NodeUtils_1.NodeUtils.parentize(expectedAstTree);
            NodeAppender_1.NodeAppender.prependNode(astTree, node);
        });
        it('should prepend given node to a `BlockStatement` node body', function () {
            chai_1.assert.deepEqual(astTree, expectedAstTree);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,