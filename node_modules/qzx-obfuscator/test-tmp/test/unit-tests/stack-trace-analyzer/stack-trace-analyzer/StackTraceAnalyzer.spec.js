"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var StackTraceAnalyzer_1 = require("../../../../src/stack-trace-analyzer/StackTraceAnalyzer");
describe('StackTraceAnalyzer', function () {
    describe('getLimitIndex (blockScopeBodyLength: number): number', function () {
        var limitIndex = void 0;
        describe('variant #1: length - 10000', function () {
            var blockScopeBodyLength = 10000;
            var expectedLimitIndex = 44;
            before(function () {
                limitIndex = StackTraceAnalyzer_1.StackTraceAnalyzer.getLimitIndex(blockScopeBodyLength);
            });
            it('should return correct limit index based on block scope body length', function () {
                chai_1.assert.equal(limitIndex, expectedLimitIndex);
            });
        });
        describe('variant #2: length - 1000', function () {
            var blockScopeBodyLength = 1000;
            var expectedLimitIndex = 26;
            before(function () {
                limitIndex = StackTraceAnalyzer_1.StackTraceAnalyzer.getLimitIndex(blockScopeBodyLength);
            });
            it('should return correct limit index based on block scope body length', function () {
                chai_1.assert.equal(limitIndex, expectedLimitIndex);
            });
        });
        describe('variant #3: length - 25', function () {
            var blockScopeBodyLength = 25;
            var expectedLimitIndex = 24;
            before(function () {
                limitIndex = StackTraceAnalyzer_1.StackTraceAnalyzer.getLimitIndex(blockScopeBodyLength);
            });
            it('should return correct limit index based on block scope body length', function () {
                chai_1.assert.equal(limitIndex, expectedLimitIndex);
            });
        });
        describe('variant #4: length - 5', function () {
            var blockScopeBodyLength = 5;
            var expectedLimitIndex = 4;
            before(function () {
                limitIndex = StackTraceAnalyzer_1.StackTraceAnalyzer.getLimitIndex(blockScopeBodyLength);
            });
            it('should return correct limit index based on block scope body length', function () {
                chai_1.assert.equal(limitIndex, expectedLimitIndex);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhY2tUcmFjZUFuYWx5emVyLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZXN0L3VuaXQtdGVzdHMvc3RhY2stdHJhY2UtYW5hbHl6ZXIvc3RhY2stdHJhY2UtYW5hbHl6ZXIvU3RhY2tUcmFjZUFuYWx5emVyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUJBQThCO0FBRTlCLG1DQUE2RjtBQUU3RixBQUFRLFNBQUMsQUFBb0Isc0JBQUU7QUFDM0IsQUFBUSxhQUFDLEFBQXNELHdEQUFFO0FBQzdELFlBQUksQUFBa0IsQUFBQztBQUV2QixBQUFRLGlCQUFDLEFBQTRCLDhCQUFFO0FBQ25DLGdCQUFNLEFBQW9CLHVCQUFXLEFBQUssQUFBQztBQUMzQyxnQkFBTSxBQUFrQixxQkFBVyxBQUFFLEFBQUM7QUFFdEMsQUFBTSxtQkFBQztBQUNILEFBQVUsNkJBQUcscUJBQWtCLG1CQUFDLEFBQWEsY0FBQyxBQUFvQixBQUFDLEFBQUMsQUFDeEU7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLGVBQUMsQUFBb0Usc0VBQUU7QUFDckUsdUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBVSxZQUFFLEFBQWtCLEFBQUMsQUFBQyxBQUNqRDtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBUSxpQkFBQyxBQUEyQiw2QkFBRTtBQUNsQyxnQkFBTSxBQUFvQix1QkFBVyxBQUFJLEFBQUM7QUFDMUMsZ0JBQU0sQUFBa0IscUJBQVcsQUFBRSxBQUFDO0FBRXRDLEFBQU0sbUJBQUM7QUFDSCxBQUFVLDZCQUFHLHFCQUFrQixtQkFBQyxBQUFhLGNBQUMsQUFBb0IsQUFBQyxBQUFDLEFBQ3hFO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxlQUFDLEFBQW9FLHNFQUFFO0FBQ3JFLHVCQUFNLE9BQUMsQUFBSyxNQUFDLEFBQVUsWUFBRSxBQUFrQixBQUFDLEFBQUMsQUFDakQ7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQVEsaUJBQUMsQUFBeUIsMkJBQUU7QUFDaEMsZ0JBQU0sQUFBb0IsdUJBQVcsQUFBRSxBQUFDO0FBQ3hDLGdCQUFNLEFBQWtCLHFCQUFXLEFBQUUsQUFBQztBQUV0QyxBQUFNLG1CQUFDO0FBQ0gsQUFBVSw2QkFBRyxxQkFBa0IsbUJBQUMsQUFBYSxjQUFDLEFBQW9CLEFBQUMsQUFBQyxBQUN4RTtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsZUFBQyxBQUFvRSxzRUFBRTtBQUNyRSx1QkFBTSxPQUFDLEFBQUssTUFBQyxBQUFVLFlBQUUsQUFBa0IsQUFBQyxBQUFDLEFBQ2pEO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGlCQUFDLEFBQXdCLDBCQUFFO0FBQy9CLGdCQUFNLEFBQW9CLHVCQUFXLEFBQUMsQUFBQztBQUN2QyxnQkFBTSxBQUFrQixxQkFBVyxBQUFDLEFBQUM7QUFFckMsQUFBTSxtQkFBQztBQUNILEFBQVUsNkJBQUcscUJBQWtCLG1CQUFDLEFBQWEsY0FBQyxBQUFvQixBQUFDLEFBQUMsQUFDeEU7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLGVBQUMsQUFBb0Usc0VBQUU7QUFDckUsdUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBVSxZQUFFLEFBQWtCLEFBQUMsQUFBQyxBQUNqRDtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydCB9IGZyb20gJ2NoYWknO1xuXG5pbXBvcnQgeyBTdGFja1RyYWNlQW5hbHl6ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvc3RhY2stdHJhY2UtYW5hbHl6ZXIvU3RhY2tUcmFjZUFuYWx5emVyJztcblxuZGVzY3JpYmUoJ1N0YWNrVHJhY2VBbmFseXplcicsICgpID0+IHtcbiAgICBkZXNjcmliZSgnZ2V0TGltaXRJbmRleCAoYmxvY2tTY29wZUJvZHlMZW5ndGg6IG51bWJlcik6IG51bWJlcicsICgpID0+IHtcbiAgICAgICAgbGV0IGxpbWl0SW5kZXg6IG51bWJlcjtcblxuICAgICAgICBkZXNjcmliZSgndmFyaWFudCAjMTogbGVuZ3RoIC0gMTAwMDAnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBibG9ja1Njb3BlQm9keUxlbmd0aDogbnVtYmVyID0gMTAwMDA7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZExpbWl0SW5kZXg6IG51bWJlciA9IDQ0O1xuXG4gICAgICAgICAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxpbWl0SW5kZXggPSBTdGFja1RyYWNlQW5hbHl6ZXIuZ2V0TGltaXRJbmRleChibG9ja1Njb3BlQm9keUxlbmd0aCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gY29ycmVjdCBsaW1pdCBpbmRleCBiYXNlZCBvbiBibG9jayBzY29wZSBib2R5IGxlbmd0aCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwobGltaXRJbmRleCwgZXhwZWN0ZWRMaW1pdEluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgndmFyaWFudCAjMjogbGVuZ3RoIC0gMTAwMCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrU2NvcGVCb2R5TGVuZ3RoOiBudW1iZXIgPSAxMDAwO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRMaW1pdEluZGV4OiBudW1iZXIgPSAyNjtcblxuICAgICAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsaW1pdEluZGV4ID0gU3RhY2tUcmFjZUFuYWx5emVyLmdldExpbWl0SW5kZXgoYmxvY2tTY29wZUJvZHlMZW5ndGgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGNvcnJlY3QgbGltaXQgaW5kZXggYmFzZWQgb24gYmxvY2sgc2NvcGUgYm9keSBsZW5ndGgnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGxpbWl0SW5kZXgsIGV4cGVjdGVkTGltaXRJbmRleCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3ZhcmlhbnQgIzM6IGxlbmd0aCAtIDI1JywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYmxvY2tTY29wZUJvZHlMZW5ndGg6IG51bWJlciA9IDI1O1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRMaW1pdEluZGV4OiBudW1iZXIgPSAyNDtcblxuICAgICAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsaW1pdEluZGV4ID0gU3RhY2tUcmFjZUFuYWx5emVyLmdldExpbWl0SW5kZXgoYmxvY2tTY29wZUJvZHlMZW5ndGgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGNvcnJlY3QgbGltaXQgaW5kZXggYmFzZWQgb24gYmxvY2sgc2NvcGUgYm9keSBsZW5ndGgnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGxpbWl0SW5kZXgsIGV4cGVjdGVkTGltaXRJbmRleCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3ZhcmlhbnQgIzQ6IGxlbmd0aCAtIDUnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBibG9ja1Njb3BlQm9keUxlbmd0aDogbnVtYmVyID0gNTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkTGltaXRJbmRleDogbnVtYmVyID0gNDtcblxuICAgICAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsaW1pdEluZGV4ID0gU3RhY2tUcmFjZUFuYWx5emVyLmdldExpbWl0SW5kZXgoYmxvY2tTY29wZUJvZHlMZW5ndGgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGNvcnJlY3QgbGltaXQgaW5kZXggYmFzZWQgb24gYmxvY2sgc2NvcGUgYm9keSBsZW5ndGgnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGxpbWl0SW5kZXgsIGV4cGVjdGVkTGltaXRJbmRleCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==