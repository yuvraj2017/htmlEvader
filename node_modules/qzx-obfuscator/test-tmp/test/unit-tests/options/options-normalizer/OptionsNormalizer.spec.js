"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var Default_1 = require("../../../../src/options/presets/Default");
var Options_1 = require("../../../../src/options/Options");
var OptionsNormalizer_1 = require("../../../../src/options/OptionsNormalizer");
function getNormalizedOptions(optionsPreset) {
    var options = new Options_1.Options(optionsPreset);
    return OptionsNormalizer_1.OptionsNormalizer.normalizeOptions(options);
}
describe('OptionsNormalizer', function () {
    describe('normalizeOptions (options: IObfuscatorOptions): IObfuscatorOptions', function () {
        var optionsPreset = void 0,
            expectedOptionsPreset = void 0;
        describe('controlFlowFlatteningThresholdRule', function () {
            before(function () {
                optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 0 }));
                expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { controlFlowFlattening: false, controlFlowFlatteningThreshold: 0 });
            });
            it('should normalize options preset', function () {
                chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
            });
        });
        describe('deadCodeInjectionRule', function () {
            before(function () {
                optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { deadCodeInjection: true, deadCodeInjectionThreshold: 0.4, stringArray: false, stringArrayThreshold: 0 }));
                expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { deadCodeInjection: true, deadCodeInjectionThreshold: 0.4, stringArray: true, stringArrayThreshold: 0.75 });
            });
            it('should normalize options preset', function () {
                chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
            });
        });
        describe('deadCodeInjectionRule', function () {
            describe('`stringArrayThreshold` option is empty', function () {
                before(function () {
                    optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { deadCodeInjection: true, deadCodeInjectionThreshold: 0.4, stringArray: false, stringArrayThreshold: 0 }));
                    expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { deadCodeInjection: true, deadCodeInjectionThreshold: 0.4, stringArray: true, stringArrayThreshold: 0.75 });
                });
                it('should normalize options preset', function () {
                    chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
                });
            });
            describe('`stringArrayThreshold` option is not empty', function () {
                before(function () {
                    optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { deadCodeInjection: true, deadCodeInjectionThreshold: 0.4, stringArray: false, stringArrayThreshold: 0.5 }));
                    expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { deadCodeInjection: true, deadCodeInjectionThreshold: 0.4, stringArray: true, stringArrayThreshold: 0.5 });
                });
                it('should normalize options preset', function () {
                    chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
                });
            });
        });
        describe('deadCodeInjectionThresholdRule', function () {
            before(function () {
                optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { deadCodeInjection: true, deadCodeInjectionThreshold: 0 }));
                expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { deadCodeInjection: false, deadCodeInjectionThreshold: 0 });
            });
            it('should normalize options preset', function () {
                chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
            });
        });
        describe('domainLockRule', function () {
            before(function () {
                optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { domainLock: ['//localhost:9000', 'https://google.ru/abc?cde=fgh'] }));
                expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { domainLock: ['localhost', 'google.ru'] });
            });
            it('should normalize options preset', function () {
                chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
            });
        });
        describe('selfDefendingRule', function () {
            before(function () {
                optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { selfDefending: true, compact: false }));
                expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { selfDefending: true, compact: true });
            });
            it('should normalize options preset', function () {
                chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
            });
        });
        describe('sourceMapBaseUrlRule', function () {
            describe('variant #1: only source map base url', function () {
                before(function () {
                    optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { sourceMapBaseUrl: 'http://localhost:9000' }));
                    expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { sourceMapBaseUrl: '' });
                });
                it('should normalize options preset', function () {
                    chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
                });
            });
            describe('variant #2: source map base url with source map file name', function () {
                before(function () {
                    optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { sourceMapBaseUrl: 'http://localhost:9000', sourceMapFileName: '/outputSourceMapName.map' }));
                    expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { sourceMapBaseUrl: 'http://localhost:9000/', sourceMapFileName: 'outputSourceMapName.js.map' });
                });
                it('should normalize options preset', function () {
                    chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
                });
            });
        });
        describe('sourceMapFileNameRule', function () {
            before(function () {
                optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { sourceMapBaseUrl: 'http://localhost:9000', sourceMapFileName: '//outputSourceMapName' }));
                expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { sourceMapBaseUrl: 'http://localhost:9000/', sourceMapFileName: 'outputSourceMapName.js.map' });
            });
            it('should normalize options preset', function () {
                chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
            });
        });
        describe('stringArrayRule', function () {
            before(function () {
                optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { stringArray: false, stringArrayEncoding: 'rc4', stringArrayThreshold: 0.5, rotateStringArray: true }));
                expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { stringArray: false, stringArrayEncoding: false, stringArrayThreshold: 0, rotateStringArray: false });
            });
            it('should normalize options preset', function () {
                chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
            });
        });
        describe('stringArrayEncodingRule', function () {
            before(function () {
                optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { stringArrayEncoding: true }));
                expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { stringArrayEncoding: 'base64' });
            });
            it('should normalize options preset', function () {
                chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
            });
        });
        describe('stringArrayThresholdRule', function () {
            before(function () {
                optionsPreset = getNormalizedOptions(Object.assign({}, Default_1.DEFAULT_PRESET, { rotateStringArray: true, stringArray: true, stringArrayThreshold: 0 }));
                expectedOptionsPreset = Object.assign({}, Default_1.DEFAULT_PRESET, { rotateStringArray: false, stringArray: false, stringArrayThreshold: 0 });
            });
            it('should normalize options preset', function () {
                chai_1.assert.deepEqual(optionsPreset, expectedOptionsPreset);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,