"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ServiceIdentifiers_1 = require("../../../src/container/ServiceIdentifiers");
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../src/options/presets/NoCustomNodes");
var InversifyContainerFacade_1 = require("../../../src/container/InversifyContainerFacade");
describe('JavaScriptObfuscatorInternal', function () {
    describe("setSourceMapUrl (url: string)", function () {
        var code = 'var test = 1;';
        var sourceMapUrl = 'test.js.map';
        var javaScriptObfuscator = void 0;
        describe('variant #1: default behaviour', function () {
            var regExp = new RegExp("sourceMappingURL=" + sourceMapUrl);
            var obfuscatedCode = void 0,
                sourceMapObject = void 0;
            before(function () {
                var inversifyContainerFacade = new InversifyContainerFacade_1.InversifyContainerFacade();
                inversifyContainerFacade.load('', Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { sourceMap: true, sourceMapFileName: sourceMapUrl }));
                javaScriptObfuscator = inversifyContainerFacade.get(ServiceIdentifiers_1.ServiceIdentifiers.IJavaScriptObfuscator);
                var obfuscationResult = javaScriptObfuscator.obfuscate(code);
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
                sourceMapObject = JSON.parse(obfuscationResult.getSourceMap());
            });
            it('should link obfuscated code with source map', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
            it('should return valid source map with `mappings` property', function () {
                chai_1.assert.isOk(sourceMapObject.mappings);
            });
        });
        describe('variant #2: `sourceMapBaseUrl` is set', function () {
            var sourceMapBaseUrl = 'http://localhost:9000';
            var regExp = new RegExp("sourceMappingURL=" + sourceMapBaseUrl + "/" + sourceMapUrl + "$");
            var obfuscatedCode = void 0,
                sourceMapObject = void 0;
            before(function () {
                var inversifyContainerFacade = new InversifyContainerFacade_1.InversifyContainerFacade();
                inversifyContainerFacade.load('', Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { sourceMap: true, sourceMapBaseUrl: sourceMapBaseUrl, sourceMapFileName: sourceMapUrl }));
                javaScriptObfuscator = inversifyContainerFacade.get(ServiceIdentifiers_1.ServiceIdentifiers.IJavaScriptObfuscator);
                var obfuscationResult = javaScriptObfuscator.obfuscate(code);
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
                sourceMapObject = JSON.parse(obfuscationResult.getSourceMap());
            });
            it('should properly add base url to source map import inside obfuscated code', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
            it('should return valid source map with `mappings` property', function () {
                chai_1.assert.isOk(sourceMapObject.mappings);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSmF2YVNjcmlwdE9iZnVzY2F0b3JJbnRlcm5hbC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC9mdW5jdGlvbmFsLXRlc3RzL2phdmFzY3JpcHQtb2JmdXNjYXRvci1pbnRlcm5hbC9KYXZhU2NyaXB0T2JmdXNjYXRvckludGVybmFsLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQStFO0FBRS9FLHFCQUE4QjtBQU05Qiw4QkFBb0Y7QUFFcEYseUNBQTJGO0FBRTNGLEFBQVEsU0FBQyxBQUE4QixnQ0FBRTtBQUNyQyxBQUFRLEFBQUMsQUFBK0IsOENBQUU7QUFDdEMsWUFBTSxBQUFJLE9BQVcsQUFBZSxBQUFDO0FBQ3JDLFlBQU0sQUFBWSxlQUFXLEFBQWEsQUFBQztBQUUzQyxZQUFJLEFBQTJDLEFBQUM7QUFFaEQsQUFBUSxpQkFBQyxBQUErQixpQ0FBRTtBQUN0QyxnQkFBTSxBQUFNLFNBQVcsSUFBSSxBQUFNLEFBQUMsNkJBQW9CLEFBQVksQUFBRSxBQUFDLEFBQUM7QUFFdEUsZ0JBQUksQUFBc0I7Z0JBQ3RCLEFBQW9CLEFBQUM7QUFFekIsQUFBTSxtQkFBQztBQUNILG9CQUFNLEFBQXdCLDJCQUE4QixJQUFJLDJCQUF3QixBQUFFLEFBQUM7QUFFM0YsQUFBd0IseUNBQUMsQUFBSSxLQUN6QixBQUFFLHNCQUVLLGdCQUFzQiwwQkFDekIsQUFBUyxXQUFFLEFBQUksTUFDZixBQUFpQixtQkFBRSxBQUFZLEFBRXRDLEFBQUM7QUFDRixBQUFvQix1Q0FBRyxBQUF3Qix5QkFDMUMsQUFBRyxJQUF3QixxQkFBa0IsbUJBQUMsQUFBcUIsQUFBQyxBQUFDO0FBRTFFLG9CQUFNLEFBQWlCLG9CQUF1QixBQUFvQixxQkFBQyxBQUFTLFVBQUMsQUFBSSxBQUFDLEFBQUM7QUFFbkYsQUFBYyxpQ0FBRyxBQUFpQixrQkFBQyxBQUFpQixBQUFFLEFBQUM7QUFDdkQsQUFBZSxrQ0FBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQWlCLGtCQUFDLEFBQVksQUFBRSxBQUFDLEFBQUMsQUFDbkU7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLGVBQUMsQUFBNkMsK0NBQUU7QUFDOUMsdUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBYyxnQkFBRSxBQUFNLEFBQUMsQUFBQyxBQUN6QztBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsZUFBQyxBQUF5RCwyREFBRTtBQUMxRCx1QkFBTSxPQUFDLEFBQUksS0FBQyxBQUFlLGdCQUFDLEFBQVEsQUFBQyxBQUFDLEFBQzFDO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGlCQUFDLEFBQXVDLHlDQUFFO0FBQzlDLGdCQUFNLEFBQWdCLG1CQUFXLEFBQXVCLEFBQUM7QUFDekQsZ0JBQU0sQUFBTSxTQUFXLElBQUksQUFBTSxBQUFDLDZCQUFvQixBQUFnQix5QkFBSSxBQUFZLEFBQUcsQUFBQyxBQUFDO0FBRTNGLGdCQUFJLEFBQXNCO2dCQUN0QixBQUFvQixBQUFDO0FBRXpCLEFBQU0sbUJBQUM7QUFDSCxvQkFBTSxBQUF3QiwyQkFBOEIsSUFBSSwyQkFBd0IsQUFBRSxBQUFDO0FBRTNGLEFBQXdCLHlDQUFDLEFBQUksS0FDekIsQUFBRSxzQkFFSyxnQkFBc0IsMEJBQ3pCLEFBQVMsV0FBRSxBQUFJLE1BQ2YsQUFBZ0Isa0JBQUUsQUFBZ0Isa0JBQ2xDLEFBQWlCLG1CQUFFLEFBQVksQUFFdEMsQUFBQztBQUNGLEFBQW9CLHVDQUFHLEFBQXdCLHlCQUMxQyxBQUFHLElBQXdCLHFCQUFrQixtQkFBQyxBQUFxQixBQUFDLEFBQUM7QUFFMUUsb0JBQU0sQUFBaUIsb0JBQXVCLEFBQW9CLHFCQUFDLEFBQVMsVUFBQyxBQUFJLEFBQUMsQUFBQztBQUVuRixBQUFjLGlDQUFHLEFBQWlCLGtCQUFDLEFBQWlCLEFBQUUsQUFBQztBQUN2RCxBQUFlLGtDQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBaUIsa0JBQUMsQUFBWSxBQUFFLEFBQUMsQUFBQyxBQUNuRTtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsZUFBQyxBQUEwRSw0RUFBRTtBQUMzRSx1QkFBTSxPQUFDLEFBQUssTUFBQyxBQUFjLGdCQUFFLEFBQU0sQUFBQyxBQUFDLEFBQ3pDO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxlQUFDLEFBQXlELDJEQUFFO0FBQzFELHVCQUFNLE9BQUMsQUFBSSxLQUFDLEFBQWUsZ0JBQUMsQUFBUSxBQUFDLEFBQUMsQUFDMUM7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXJ2aWNlSWRlbnRpZmllcnMgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29udGFpbmVyL1NlcnZpY2VJZGVudGlmaWVycyc7XG5cbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJ2NoYWknO1xuXG5pbXBvcnQgeyBJSW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2ludGVyZmFjZXMvY29udGFpbmVyL0lJbnZlcnNpZnlDb250YWluZXJGYWNhZGUnO1xuaW1wb3J0IHsgSUphdmFTY3JpcHRPYmZ1c2NhdG9yIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2ludGVyZmFjZXMvSUphdmFTY3JpcHRPYmZzdWNhdG9yJztcbmltcG9ydCB7IElPYmZ1c2NhdGlvblJlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3NyYy9pbnRlcmZhY2VzL0lPYmZ1c2NhdGlvblJlc3VsdCc7XG5cbmltcG9ydCB7IE5PX0NVU1RPTV9OT0RFU19QUkVTRVQgfSBmcm9tICcuLi8uLi8uLi9zcmMvb3B0aW9ucy9wcmVzZXRzL05vQ3VzdG9tTm9kZXMnO1xuXG5pbXBvcnQgeyBJbnZlcnNpZnlDb250YWluZXJGYWNhZGUgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29udGFpbmVyL0ludmVyc2lmeUNvbnRhaW5lckZhY2FkZSc7XG5cbmRlc2NyaWJlKCdKYXZhU2NyaXB0T2JmdXNjYXRvckludGVybmFsJywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKGBzZXRTb3VyY2VNYXBVcmwgKHVybDogc3RyaW5nKWAsICgpID0+IHtcbiAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gJ3ZhciB0ZXN0ID0gMTsnO1xuICAgICAgICBjb25zdCBzb3VyY2VNYXBVcmw6IHN0cmluZyA9ICd0ZXN0LmpzLm1hcCc7XG5cbiAgICAgICAgbGV0IGphdmFTY3JpcHRPYmZ1c2NhdG9yOiBJSmF2YVNjcmlwdE9iZnVzY2F0b3I7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3ZhcmlhbnQgIzE6IGRlZmF1bHQgYmVoYXZpb3VyJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVnRXhwOiBSZWdFeHAgPSBuZXcgUmVnRXhwKGBzb3VyY2VNYXBwaW5nVVJMPSR7c291cmNlTWFwVXJsfWApO1xuXG4gICAgICAgICAgICBsZXQgb2JmdXNjYXRlZENvZGU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICBzb3VyY2VNYXBPYmplY3Q6IGFueTtcblxuICAgICAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnZlcnNpZnlDb250YWluZXJGYWNhZGU6IElJbnZlcnNpZnlDb250YWluZXJGYWNhZGUgPSBuZXcgSW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlKCk7XG5cbiAgICAgICAgICAgICAgICBpbnZlcnNpZnlDb250YWluZXJGYWNhZGUubG9hZChcbiAgICAgICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLk5PX0NVU1RPTV9OT0RFU19QUkVTRVQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VNYXA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VNYXBGaWxlTmFtZTogc291cmNlTWFwVXJsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGphdmFTY3JpcHRPYmZ1c2NhdG9yID0gaW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlXG4gICAgICAgICAgICAgICAgICAgIC5nZXQ8SUphdmFTY3JpcHRPYmZ1c2NhdG9yPihTZXJ2aWNlSWRlbnRpZmllcnMuSUphdmFTY3JpcHRPYmZ1c2NhdG9yKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBqYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoY29kZSk7XG5cbiAgICAgICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgICAgICAgICAgc291cmNlTWFwT2JqZWN0ID0gSlNPTi5wYXJzZShvYmZ1c2NhdGlvblJlc3VsdC5nZXRTb3VyY2VNYXAoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Nob3VsZCBsaW5rIG9iZnVzY2F0ZWQgY29kZSB3aXRoIHNvdXJjZSBtYXAnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0ZWRDb2RlLCByZWdFeHApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHZhbGlkIHNvdXJjZSBtYXAgd2l0aCBgbWFwcGluZ3NgIHByb3BlcnR5JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5pc09rKHNvdXJjZU1hcE9iamVjdC5tYXBwaW5ncyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3ZhcmlhbnQgIzI6IGBzb3VyY2VNYXBCYXNlVXJsYCBpcyBzZXQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2VNYXBCYXNlVXJsOiBzdHJpbmcgPSAnaHR0cDovL2xvY2FsaG9zdDo5MDAwJztcbiAgICAgICAgICAgIGNvbnN0IHJlZ0V4cDogUmVnRXhwID0gbmV3IFJlZ0V4cChgc291cmNlTWFwcGluZ1VSTD0ke3NvdXJjZU1hcEJhc2VVcmx9LyR7c291cmNlTWFwVXJsfSRgKTtcblxuICAgICAgICAgICAgbGV0IG9iZnVzY2F0ZWRDb2RlOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgc291cmNlTWFwT2JqZWN0OiBhbnk7XG5cbiAgICAgICAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlOiBJSW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlID0gbmV3IEludmVyc2lmeUNvbnRhaW5lckZhY2FkZSgpO1xuXG4gICAgICAgICAgICAgICAgaW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlLmxvYWQoXG4gICAgICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5OT19DVVNUT01fTk9ERVNfUFJFU0VULFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTWFwOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTWFwQmFzZVVybDogc291cmNlTWFwQmFzZVVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZU1hcEZpbGVOYW1lOiBzb3VyY2VNYXBVcmxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgamF2YVNjcmlwdE9iZnVzY2F0b3IgPSBpbnZlcnNpZnlDb250YWluZXJGYWNhZGVcbiAgICAgICAgICAgICAgICAgICAgLmdldDxJSmF2YVNjcmlwdE9iZnVzY2F0b3I+KFNlcnZpY2VJZGVudGlmaWVycy5JSmF2YVNjcmlwdE9iZnVzY2F0b3IpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IGphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShjb2RlKTtcblxuICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlID0gb2JmdXNjYXRpb25SZXN1bHQuZ2V0T2JmdXNjYXRlZENvZGUoKTtcbiAgICAgICAgICAgICAgICBzb3VyY2VNYXBPYmplY3QgPSBKU09OLnBhcnNlKG9iZnVzY2F0aW9uUmVzdWx0LmdldFNvdXJjZU1hcCgpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgnc2hvdWxkIHByb3Blcmx5IGFkZCBiYXNlIHVybCB0byBzb3VyY2UgbWFwIGltcG9ydCBpbnNpZGUgb2JmdXNjYXRlZCBjb2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgcmVnRXhwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiB2YWxpZCBzb3VyY2UgbWFwIHdpdGggYG1hcHBpbmdzYCBwcm9wZXJ0eScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuaXNPayhzb3VyY2VNYXBPYmplY3QubWFwcGluZ3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXX0=