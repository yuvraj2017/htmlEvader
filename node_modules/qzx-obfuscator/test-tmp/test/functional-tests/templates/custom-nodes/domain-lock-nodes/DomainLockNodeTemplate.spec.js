"use strict";

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

Object.defineProperty(exports, "__esModule", { value: true });
var format = require("string-template");
var chai_1 = require("chai");
var ServiceIdentifiers_1 = require("../../../../../src/container/ServiceIdentifiers");
var DomainLockNodeTemplate_1 = require("../../../../../src/templates/custom-nodes/domain-lock-nodes/domain-lock-node/DomainLockNodeTemplate");
var InversifyContainerFacade_1 = require("../../../../../src/container/InversifyContainerFacade");
function getFunctionFromTemplate(templateData, callsControllerFunctionName, currentDomain) {
    var domainLockTemplate = format(DomainLockNodeTemplate_1.DomainLockNodeTemplate(), templateData);
    return Function("\n        document = {\n            domain: '" + currentDomain + "'\n        };\n\n        var " + callsControllerFunctionName + " = (function(){            \n            return function (context, fn){\t\n                return function () {\n                    return fn.apply(context, arguments);\n                };\n            }\n        })();\n\n        " + domainLockTemplate + "\n    ")();
}
describe('DomainLockNodeTemplate (): string', function () {
    var singleNodeCallControllerFunctionName = 'callsController';
    var cryptUtils = void 0;
    before(function () {
        var inversifyContainerFacade = new InversifyContainerFacade_1.InversifyContainerFacade();
        inversifyContainerFacade.load('', {});
        cryptUtils = inversifyContainerFacade.get(ServiceIdentifiers_1.ServiceIdentifiers.ICryptUtils);
    });
    describe('variant #1: current domain matches with `domainsString`', function () {
        var domainsString = ['www.example.com'].join(';');
        var currentDomain = 'www.example.com';
        var testFunc = void 0;
        before(function () {
            var _cryptUtils$hideStrin = cryptUtils.hideString(domainsString, domainsString.length * 3),
                _cryptUtils$hideStrin2 = _slicedToArray(_cryptUtils$hideStrin, 2),
                hiddenDomainsString = _cryptUtils$hideStrin2[0],
                diff = _cryptUtils$hideStrin2[1];

            testFunc = function testFunc() {
                return getFunctionFromTemplate({
                    domainLockFunctionName: 'domainLockFunction',
                    diff: diff,
                    domains: hiddenDomainsString,
                    singleNodeCallControllerFunctionName: singleNodeCallControllerFunctionName
                }, singleNodeCallControllerFunctionName, currentDomain);
            };
        });
        it('should correctly run code inside template', function () {
            chai_1.assert.doesNotThrow(testFunc);
        });
    });
    describe('variant #2: urrent domain matches with base domain of `domainsString` item', function () {
        var domainsString = ['www.test.com', '.example.com'].join(';');
        var currentDomain = 'subdomain.example.com';
        var testFunc = void 0;
        before(function () {
            var _cryptUtils$hideStrin3 = cryptUtils.hideString(domainsString, domainsString.length * 3),
                _cryptUtils$hideStrin4 = _slicedToArray(_cryptUtils$hideStrin3, 2),
                hiddenDomainsString = _cryptUtils$hideStrin4[0],
                diff = _cryptUtils$hideStrin4[1];

            testFunc = function testFunc() {
                return getFunctionFromTemplate({
                    domainLockFunctionName: 'domainLockFunction',
                    diff: diff,
                    domains: hiddenDomainsString,
                    singleNodeCallControllerFunctionName: singleNodeCallControllerFunctionName
                }, singleNodeCallControllerFunctionName, currentDomain);
            };
        });
        it('should correctly run code inside template', function () {
            chai_1.assert.doesNotThrow(testFunc);
        });
    });
    describe('variant #3: current domain doesn\'t match with `domainsString`', function () {
        var domainsString = ['www.example.com'].join(';');
        var currentDomain = 'www.test.com';
        var testFunc = void 0;
        before(function () {
            var _cryptUtils$hideStrin5 = cryptUtils.hideString(domainsString, domainsString.length * 3),
                _cryptUtils$hideStrin6 = _slicedToArray(_cryptUtils$hideStrin5, 2),
                hiddenDomainsString = _cryptUtils$hideStrin6[0],
                diff = _cryptUtils$hideStrin6[1];

            testFunc = function testFunc() {
                return getFunctionFromTemplate({
                    domainLockFunctionName: 'domainLockFunction',
                    diff: diff,
                    domains: hiddenDomainsString,
                    singleNodeCallControllerFunctionName: singleNodeCallControllerFunctionName
                }, singleNodeCallControllerFunctionName, currentDomain);
            };
        });
        it('should throw an error', function () {
            chai_1.assert.throws(testFunc);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9tYWluTG9ja05vZGVUZW1wbGF0ZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGVzdC9mdW5jdGlvbmFsLXRlc3RzL3RlbXBsYXRlcy9jdXN0b20tbm9kZXMvZG9tYWluLWxvY2stbm9kZXMvRG9tYWluTG9ja05vZGVUZW1wbGF0ZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscUJBQTBDO0FBRTFDLHFCQUE4QjtBQUU5QixtQ0FBcUY7QUFLckYsdUNBQTZJO0FBRTdJLHlDQUFpRztBQVFqRyxpQ0FBa0MsQUFBaUIsY0FBRSxBQUFtQyw2QkFBRyxBQUFxQjtBQUM1RyxRQUFNLEFBQWtCLHFCQUFXLEFBQU0sT0FBQyx5QkFBc0IsQUFBRSwwQkFBRSxBQUFZLEFBQUMsQUFBQztBQUVsRixBQUFNLFdBQUMsQUFBUSxBQUFDLDJEQUVHLEFBQWEsa0RBR3RCLEFBQTJCLDBRQVEvQixBQUFrQixBQUN2QixBQUFDLEFBQUUsQUFBQyxBQUNUO0FBQUM7QUFFRCxBQUFRLFNBQUMsQUFBbUMscUNBQUU7QUFDMUMsUUFBTSxBQUFvQyx1Q0FBVyxBQUFpQixBQUFDO0FBRXZFLFFBQUksQUFBdUIsQUFBQztBQUU1QixBQUFNLFdBQUM7QUFDSCxZQUFNLEFBQXdCLDJCQUE4QixJQUFJLDJCQUF3QixBQUFFLEFBQUM7QUFFM0YsQUFBd0IsaUNBQUMsQUFBSSxLQUFDLEFBQUUsSUFBRSxBQUFFLEFBQUMsQUFBQztBQUN0QyxBQUFVLHFCQUFHLEFBQXdCLHlCQUFDLEFBQUcsSUFBYyxxQkFBa0IsbUJBQUMsQUFBVyxBQUFDLEFBQUMsQUFDM0Y7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGFBQUMsQUFBeUQsMkRBQUU7QUFDaEUsWUFBTSxBQUFhLGdCQUFXLENBQUMsQUFBaUIsQUFBQyxtQkFBQyxBQUFJLEtBQUMsQUFBRyxBQUFDLEFBQUM7QUFDNUQsWUFBTSxBQUFhLGdCQUFXLEFBQWlCLEFBQUM7QUFFaEQsWUFBSSxBQUFvQixBQUFDO0FBRXpCLEFBQU0sZUFBQztBQUNILEFBQU0sd0NBR0YsQUFBVSxXQUFDLEFBQVUsV0FBQyxBQUFhLGVBQUUsQUFBYSxjQUFDLEFBQU0sU0FBRyxBQUFDLEFBQUMsQUFBQzs7Z0JBRi9ELEFBQW1CO2dCQUNuQixBQUFJLEFBQ1A7O0FBRUQsQUFBUTtBQUFHO0FBQ1AsQUFBc0IsNENBQUUsQUFBb0I7QUFDNUMsQUFBSSwwQkFBRSxBQUFJO0FBQ1YsQUFBTyw2QkFBRSxBQUFtQjtBQUM1QixBQUFvQyxBQUN2QztBQUx3QyxpQkFBeEIsQUFBdUIsRUFLckMsQUFBb0Msc0NBQUUsQUFBYSxBQUFDLEFBQUMsQUFDNUQ7O0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxXQUFDLEFBQTJDLDZDQUFFO0FBQzVDLG1CQUFNLE9BQUMsQUFBWSxhQUFDLEFBQVEsQUFBQyxBQUFDLEFBQ2xDO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGFBQUMsQUFBNEUsOEVBQUU7QUFDbkYsWUFBTSxBQUFhLGdCQUFXLENBQUMsQUFBYyxnQkFBRSxBQUFjLEFBQUMsZ0JBQUMsQUFBSSxLQUFDLEFBQUcsQUFBQyxBQUFDO0FBQ3pFLFlBQU0sQUFBYSxnQkFBVyxBQUF1QixBQUFDO0FBRXRELFlBQUksQUFBb0IsQUFBQztBQUV6QixBQUFNLGVBQUM7QUFDSCxBQUFNLHlDQUdGLEFBQVUsV0FBQyxBQUFVLFdBQUMsQUFBYSxlQUFFLEFBQWEsY0FBQyxBQUFNLFNBQUcsQUFBQyxBQUFDLEFBQUM7O2dCQUYvRCxBQUFtQjtnQkFDbkIsQUFBSSxBQUNQOztBQUVELEFBQVE7QUFBRztBQUNQLEFBQXNCLDRDQUFFLEFBQW9CO0FBQzVDLEFBQUksMEJBQUUsQUFBSTtBQUNWLEFBQU8sNkJBQUUsQUFBbUI7QUFDNUIsQUFBb0MsQUFDdkM7QUFMd0MsaUJBQXhCLEFBQXVCLEVBS3JDLEFBQW9DLHNDQUFFLEFBQWEsQUFBQyxBQUFDLEFBQzVEOztBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsV0FBQyxBQUEyQyw2Q0FBRTtBQUM1QyxtQkFBTSxPQUFDLEFBQVksYUFBQyxBQUFRLEFBQUMsQUFBQyxBQUNsQztBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBUSxhQUFDLEFBQWdFLGtFQUFFO0FBQ3ZFLFlBQU0sQUFBYSxnQkFBVyxDQUFDLEFBQWlCLEFBQUMsbUJBQUMsQUFBSSxLQUFDLEFBQUcsQUFBQyxBQUFDO0FBQzVELFlBQU0sQUFBYSxnQkFBVyxBQUFjLEFBQUM7QUFFN0MsWUFBSSxBQUFvQixBQUFDO0FBRXpCLEFBQU0sZUFBQztBQUNILEFBQU0seUNBR0YsQUFBVSxXQUFDLEFBQVUsV0FBQyxBQUFhLGVBQUUsQUFBYSxjQUFDLEFBQU0sU0FBRyxBQUFDLEFBQUMsQUFBQzs7Z0JBRi9ELEFBQW1CO2dCQUNuQixBQUFJLEFBQ1A7O0FBRUQsQUFBUTtBQUFHO0FBQ1AsQUFBc0IsNENBQUUsQUFBb0I7QUFDNUMsQUFBSSwwQkFBRSxBQUFJO0FBQ1YsQUFBTyw2QkFBRSxBQUFtQjtBQUM1QixBQUFvQyxBQUN2QztBQUx3QyxpQkFBeEIsQUFBdUIsRUFLckMsQUFBb0Msc0NBQUUsQUFBYSxBQUFDLEFBQUMsQUFDNUQ7O0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxXQUFDLEFBQXVCLHlCQUFFO0FBQ3hCLG1CQUFNLE9BQUMsQUFBTSxPQUFDLEFBQVEsQUFBQyxBQUFDLEFBQzVCO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZvcm1hdCBmcm9tICdzdHJpbmctdGVtcGxhdGUnO1xuXG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICdjaGFpJztcblxuaW1wb3J0IHsgU2VydmljZUlkZW50aWZpZXJzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3JjL2NvbnRhaW5lci9TZXJ2aWNlSWRlbnRpZmllcnMnO1xuXG5pbXBvcnQgeyBJQ3J5cHRVdGlscyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NyYy9pbnRlcmZhY2VzL3V0aWxzL0lDcnlwdFV0aWxzJztcbmltcG9ydCB7IElJbnZlcnNpZnlDb250YWluZXJGYWNhZGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zcmMvaW50ZXJmYWNlcy9jb250YWluZXIvSUludmVyc2lmeUNvbnRhaW5lckZhY2FkZSc7XG5cbmltcG9ydCB7IERvbWFpbkxvY2tOb2RlVGVtcGxhdGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zcmMvdGVtcGxhdGVzL2N1c3RvbS1ub2Rlcy9kb21haW4tbG9jay1ub2Rlcy9kb21haW4tbG9jay1ub2RlL0RvbWFpbkxvY2tOb2RlVGVtcGxhdGUnO1xuXG5pbXBvcnQgeyBJbnZlcnNpZnlDb250YWluZXJGYWNhZGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zcmMvY29udGFpbmVyL0ludmVyc2lmeUNvbnRhaW5lckZhY2FkZSc7XG5cbi8qKlxuICogQHBhcmFtIHRlbXBsYXRlRGF0YVxuICogQHBhcmFtIGNhbGxzQ29udHJvbGxlckZ1bmN0aW9uTmFtZVxuICogQHBhcmFtIGN1cnJlbnREb21haW5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZ2V0RnVuY3Rpb25Gcm9tVGVtcGxhdGUgKHRlbXBsYXRlRGF0YTogYW55LCBjYWxsc0NvbnRyb2xsZXJGdW5jdGlvbk5hbWU6IHN0cmluZywgIGN1cnJlbnREb21haW46IHN0cmluZykge1xuICAgIGNvbnN0IGRvbWFpbkxvY2tUZW1wbGF0ZTogc3RyaW5nID0gZm9ybWF0KERvbWFpbkxvY2tOb2RlVGVtcGxhdGUoKSwgdGVtcGxhdGVEYXRhKTtcblxuICAgIHJldHVybiBGdW5jdGlvbihgXG4gICAgICAgIGRvY3VtZW50ID0ge1xuICAgICAgICAgICAgZG9tYWluOiAnJHtjdXJyZW50RG9tYWlufSdcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgJHtjYWxsc0NvbnRyb2xsZXJGdW5jdGlvbk5hbWV9ID0gKGZ1bmN0aW9uKCl7ICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbnRleHQsIGZuKXtcdFxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgJHtkb21haW5Mb2NrVGVtcGxhdGV9XG4gICAgYCkoKTtcbn1cblxuZGVzY3JpYmUoJ0RvbWFpbkxvY2tOb2RlVGVtcGxhdGUgKCk6IHN0cmluZycsICgpID0+IHtcbiAgICBjb25zdCBzaW5nbGVOb2RlQ2FsbENvbnRyb2xsZXJGdW5jdGlvbk5hbWU6IHN0cmluZyA9ICdjYWxsc0NvbnRyb2xsZXInO1xuXG4gICAgbGV0IGNyeXB0VXRpbHM6IElDcnlwdFV0aWxzO1xuXG4gICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgY29uc3QgaW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlOiBJSW52ZXJzaWZ5Q29udGFpbmVyRmFjYWRlID0gbmV3IEludmVyc2lmeUNvbnRhaW5lckZhY2FkZSgpO1xuXG4gICAgICAgIGludmVyc2lmeUNvbnRhaW5lckZhY2FkZS5sb2FkKCcnLCB7fSk7XG4gICAgICAgIGNyeXB0VXRpbHMgPSBpbnZlcnNpZnlDb250YWluZXJGYWNhZGUuZ2V0PElDcnlwdFV0aWxzPihTZXJ2aWNlSWRlbnRpZmllcnMuSUNyeXB0VXRpbHMpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3ZhcmlhbnQgIzE6IGN1cnJlbnQgZG9tYWluIG1hdGNoZXMgd2l0aCBgZG9tYWluc1N0cmluZ2AnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRvbWFpbnNTdHJpbmc6IHN0cmluZyA9IFsnd3d3LmV4YW1wbGUuY29tJ10uam9pbignOycpO1xuICAgICAgICBjb25zdCBjdXJyZW50RG9tYWluOiBzdHJpbmcgPSAnd3d3LmV4YW1wbGUuY29tJztcblxuICAgICAgICBsZXQgdGVzdEZ1bmM6ICgpID0+IHZvaWQ7XG5cbiAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFtcbiAgICAgICAgICAgICAgICBoaWRkZW5Eb21haW5zU3RyaW5nLFxuICAgICAgICAgICAgICAgIGRpZmZcbiAgICAgICAgICAgIF0gPSBjcnlwdFV0aWxzLmhpZGVTdHJpbmcoZG9tYWluc1N0cmluZywgZG9tYWluc1N0cmluZy5sZW5ndGggKiAzKTtcblxuICAgICAgICAgICAgdGVzdEZ1bmMgPSAoKSA9PiBnZXRGdW5jdGlvbkZyb21UZW1wbGF0ZSh7XG4gICAgICAgICAgICAgICAgZG9tYWluTG9ja0Z1bmN0aW9uTmFtZTogJ2RvbWFpbkxvY2tGdW5jdGlvbicsXG4gICAgICAgICAgICAgICAgZGlmZjogZGlmZixcbiAgICAgICAgICAgICAgICBkb21haW5zOiBoaWRkZW5Eb21haW5zU3RyaW5nLFxuICAgICAgICAgICAgICAgIHNpbmdsZU5vZGVDYWxsQ29udHJvbGxlckZ1bmN0aW9uTmFtZVxuICAgICAgICAgICAgfSwgc2luZ2xlTm9kZUNhbGxDb250cm9sbGVyRnVuY3Rpb25OYW1lLCBjdXJyZW50RG9tYWluKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBjb3JyZWN0bHkgcnVuIGNvZGUgaW5zaWRlIHRlbXBsYXRlJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmRvZXNOb3RUaHJvdyh0ZXN0RnVuYyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3ZhcmlhbnQgIzI6IHVycmVudCBkb21haW4gbWF0Y2hlcyB3aXRoIGJhc2UgZG9tYWluIG9mIGBkb21haW5zU3RyaW5nYCBpdGVtJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBkb21haW5zU3RyaW5nOiBzdHJpbmcgPSBbJ3d3dy50ZXN0LmNvbScsICcuZXhhbXBsZS5jb20nXS5qb2luKCc7Jyk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnREb21haW46IHN0cmluZyA9ICdzdWJkb21haW4uZXhhbXBsZS5jb20nO1xuXG4gICAgICAgIGxldCB0ZXN0RnVuYzogKCkgPT4gdm9pZDtcblxuICAgICAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgW1xuICAgICAgICAgICAgICAgIGhpZGRlbkRvbWFpbnNTdHJpbmcsXG4gICAgICAgICAgICAgICAgZGlmZlxuICAgICAgICAgICAgXSA9IGNyeXB0VXRpbHMuaGlkZVN0cmluZyhkb21haW5zU3RyaW5nLCBkb21haW5zU3RyaW5nLmxlbmd0aCAqIDMpO1xuXG4gICAgICAgICAgICB0ZXN0RnVuYyA9ICgpID0+IGdldEZ1bmN0aW9uRnJvbVRlbXBsYXRlKHtcbiAgICAgICAgICAgICAgICBkb21haW5Mb2NrRnVuY3Rpb25OYW1lOiAnZG9tYWluTG9ja0Z1bmN0aW9uJyxcbiAgICAgICAgICAgICAgICBkaWZmOiBkaWZmLFxuICAgICAgICAgICAgICAgIGRvbWFpbnM6IGhpZGRlbkRvbWFpbnNTdHJpbmcsXG4gICAgICAgICAgICAgICAgc2luZ2xlTm9kZUNhbGxDb250cm9sbGVyRnVuY3Rpb25OYW1lXG4gICAgICAgICAgICB9LCBzaW5nbGVOb2RlQ2FsbENvbnRyb2xsZXJGdW5jdGlvbk5hbWUsIGN1cnJlbnREb21haW4pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGNvcnJlY3RseSBydW4gY29kZSBpbnNpZGUgdGVtcGxhdGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZG9lc05vdFRocm93KHRlc3RGdW5jKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgndmFyaWFudCAjMzogY3VycmVudCBkb21haW4gZG9lc25cXCd0IG1hdGNoIHdpdGggYGRvbWFpbnNTdHJpbmdgJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBkb21haW5zU3RyaW5nOiBzdHJpbmcgPSBbJ3d3dy5leGFtcGxlLmNvbSddLmpvaW4oJzsnKTtcbiAgICAgICAgY29uc3QgY3VycmVudERvbWFpbjogc3RyaW5nID0gJ3d3dy50ZXN0LmNvbSc7XG5cbiAgICAgICAgbGV0IHRlc3RGdW5jOiAoKSA9PiB2b2lkO1xuXG4gICAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbXG4gICAgICAgICAgICAgICAgaGlkZGVuRG9tYWluc1N0cmluZyxcbiAgICAgICAgICAgICAgICBkaWZmXG4gICAgICAgICAgICBdID0gY3J5cHRVdGlscy5oaWRlU3RyaW5nKGRvbWFpbnNTdHJpbmcsIGRvbWFpbnNTdHJpbmcubGVuZ3RoICogMyk7XG5cbiAgICAgICAgICAgIHRlc3RGdW5jID0gKCkgPT4gZ2V0RnVuY3Rpb25Gcm9tVGVtcGxhdGUoe1xuICAgICAgICAgICAgICAgIGRvbWFpbkxvY2tGdW5jdGlvbk5hbWU6ICdkb21haW5Mb2NrRnVuY3Rpb24nLFxuICAgICAgICAgICAgICAgIGRpZmY6IGRpZmYsXG4gICAgICAgICAgICAgICAgZG9tYWluczogaGlkZGVuRG9tYWluc1N0cmluZyxcbiAgICAgICAgICAgICAgICBzaW5nbGVOb2RlQ2FsbENvbnRyb2xsZXJGdW5jdGlvbk5hbWVcbiAgICAgICAgICAgIH0sIHNpbmdsZU5vZGVDYWxsQ29udHJvbGxlckZ1bmN0aW9uTmFtZSwgY3VycmVudERvbWFpbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3InLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQudGhyb3dzKHRlc3RGdW5jKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==