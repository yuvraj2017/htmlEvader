"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var format = require("string-template");
var chai_1 = require("chai");
var ServiceIdentifiers_1 = require("../../../../../src/container/ServiceIdentifiers");
var AtobTemplate_1 = require("../../../../../src/templates/custom-nodes/AtobTemplate");
var Rc4Template_1 = require("../../../../../src/templates/custom-nodes/Rc4Template");
var StringArrayBase64DecodeNodeTemplate_1 = require("../../../../../src/templates/custom-nodes/string-array-nodes/string-array-calls-wrapper/StringArrayBase64DecodeNodeTemplate");
var StringArrayCallsWrapperTemplate_1 = require("../../../../../src/templates/custom-nodes/string-array-nodes/string-array-calls-wrapper/StringArrayCallsWrapperTemplate");
var StringArrayRC4DecodeNodeTemplate_1 = require("../../../../../src/templates/custom-nodes/string-array-nodes/string-array-calls-wrapper/StringArrayRC4DecodeNodeTemplate");
var InversifyContainerFacade_1 = require("../../../../../src/container/InversifyContainerFacade");
describe('StringArrayCallsWrapperNodeTemplate (): string', function () {
    var stringArrayName = 'stringArrayName';
    var stringArrayCallsWrapperName = 'stringArrayCallsWrapperName';
    var cryptUtils = void 0;
    before(function () {
        var inversifyContainerFacade = new InversifyContainerFacade_1.InversifyContainerFacade();
        inversifyContainerFacade.load('', {});
        cryptUtils = inversifyContainerFacade.get(ServiceIdentifiers_1.ServiceIdentifiers.ICryptUtils);
    });
    describe('variant #1: `base64` encoding', function () {
        var atobDecodeNodeTemplate = format(StringArrayBase64DecodeNodeTemplate_1.StringArrayBase64DecodeNodeTemplate(), {
            atobPolyfill: AtobTemplate_1.AtobTemplate(),
            selfDefendingCode: '',
            stringArrayCallsWrapperName: stringArrayCallsWrapperName
        });
        var index = '0x0';
        var expectedDecodedValue = 'test1';
        var decodedValue = void 0;
        before(function () {
            var stringArrayCallsWrapperTemplate = format(StringArrayCallsWrapperTemplate_1.StringArrayCallsWrapperTemplate(), {
                decodeNodeTemplate: atobDecodeNodeTemplate,
                stringArrayCallsWrapperName: stringArrayCallsWrapperName,
                stringArrayName: stringArrayName
            });
            decodedValue = Function("\n                var " + stringArrayName + " = ['" + cryptUtils.btoa('test1') + "'];\n            \n                " + stringArrayCallsWrapperTemplate + "\n                \n                return " + stringArrayCallsWrapperName + "(" + index + ");\n            ")();
        });
        it('should correctly return decoded value', function () {
            chai_1.assert.deepEqual(decodedValue, expectedDecodedValue);
        });
    });
    describe('variant #2: `rc4` encoding', function () {
        var rc4DecodeNodeTemplate = format(StringArrayRC4DecodeNodeTemplate_1.StringArrayRc4DecodeNodeTemplate(), {
            atobPolyfill: AtobTemplate_1.AtobTemplate(),
            rc4Polyfill: Rc4Template_1.Rc4Template(),
            selfDefendingCode: '',
            stringArrayCallsWrapperName: stringArrayCallsWrapperName
        });
        var index = '0x0';
        var key = 'key';
        var expectedDecodedValue = 'test1';
        var decodedValue = void 0;
        before(function () {
            var stringArrayCallsWrapperTemplate = format(StringArrayCallsWrapperTemplate_1.StringArrayCallsWrapperTemplate(), {
                decodeNodeTemplate: rc4DecodeNodeTemplate,
                stringArrayCallsWrapperName: stringArrayCallsWrapperName,
                stringArrayName: stringArrayName
            });
            decodedValue = Function("\n                var " + stringArrayName + " = ['" + cryptUtils.btoa(cryptUtils.rc4('test1', key)) + "'];\n            \n                " + stringArrayCallsWrapperTemplate + "\n                \n                return " + stringArrayCallsWrapperName + "('" + index + "', '" + key + "');\n            ")();
        });
        it('should correctly return decoded value', function () {
            chai_1.assert.deepEqual(decodedValue, expectedDecodedValue);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,