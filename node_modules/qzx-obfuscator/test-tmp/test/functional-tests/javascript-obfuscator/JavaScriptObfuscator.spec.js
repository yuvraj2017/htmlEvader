"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var JavaScriptObfuscator_1 = require("../../../src/JavaScriptObfuscator");
var NoCustomNodes_1 = require("../../../src/options/presets/NoCustomNodes");
var buildLargeCode_1 = require("../../helpers/buildLargeCode");
var getRegExpMatch_1 = require("../../helpers/getRegExpMatch");
var readFileAsString_1 = require("../../helpers/readFileAsString");
describe('JavaScriptObfuscator', function () {
    describe('obfuscate (sourceCode: string, customOptions?: IObfuscatorOptions): IObfuscationResult', function () {
        describe('correct source code', function () {
            var obfuscatedCode = void 0,
                sourceMap = void 0;
            beforeEach(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input-1.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
                sourceMap = obfuscationResult.getSourceMap();
            });
            it('should return correct obfuscated code', function () {
                chai_1.assert.isOk(obfuscatedCode);
            });
            it('should return empty source map', function () {
                chai_1.assert.isNotOk(sourceMap);
            });
        });
        describe('empty source code', function () {
            var obfuscatedCode = void 0;
            beforeEach(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/empty-input.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code);
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should return an empty obfuscated code', function () {
                chai_1.assert.isNotOk(obfuscatedCode);
            });
        });
        describe('empty source code with comments', function () {
            var obfuscatedCode = void 0;
            beforeEach(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/comments-only.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code);
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should return an empty obfuscated code', function () {
                chai_1.assert.isNotOk(obfuscatedCode);
            });
        });
        describe('`sourceMap` option is `true`', function () {
            describe('`sourceMapMode` is `separate`', function () {
                var obfuscatedCode = void 0,
                    sourceMap = void 0;
                beforeEach(function () {
                    var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input-1.js');
                    var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { sourceMap: true }));
                    obfuscatedCode = obfuscationResult.getObfuscatedCode();
                    sourceMap = JSON.parse(obfuscationResult.getSourceMap()).mappings;
                });
                it('should return correct obfuscated code', function () {
                    chai_1.assert.isOk(obfuscatedCode);
                });
                it('should return correct source map', function () {
                    chai_1.assert.isOk(sourceMap);
                });
            });
            describe('`sourceMapMode` is `inline`', function () {
                var regExp = /sourceMappingURL=data:application\/json;base64/;
                var obfuscatedCode = void 0,
                    sourceMap = void 0;
                beforeEach(function () {
                    var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input-1.js');
                    var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { sourceMap: true, sourceMapMode: 'inline' }));
                    obfuscatedCode = obfuscationResult.getObfuscatedCode();
                    sourceMap = JSON.parse(obfuscationResult.getSourceMap()).mappings;
                });
                it('should return correct obfuscated code', function () {
                    chai_1.assert.isOk(obfuscatedCode);
                });
                it('should return obfuscated code with inline source map as Base64 string', function () {
                    chai_1.assert.match(obfuscatedCode, regExp);
                });
                it('should return correct source map', function () {
                    chai_1.assert.isOk(sourceMap);
                });
            });
            describe('empty source code', function () {
                var obfuscatedCode = void 0,
                    sourceMapNames = void 0,
                    sourceMapSources = void 0,
                    sourceMapMappings = void 0;
                beforeEach(function () {
                    var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/empty-input.js');
                    var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, {
                        sourceMap: true
                    });
                    obfuscatedCode = obfuscationResult.getObfuscatedCode();
                    var sourceMapObject = JSON.parse(obfuscationResult.getSourceMap());
                    sourceMapNames = sourceMapObject.names;
                    sourceMapSources = sourceMapObject.sources;
                    sourceMapMappings = sourceMapObject.mappings;
                });
                it('should return empty obfuscated code', function () {
                    chai_1.assert.isNotOk(obfuscatedCode);
                });
                it('should return empty source map property `names`', function () {
                    chai_1.assert.deepEqual(sourceMapNames, []);
                });
                it('should return empty source map property `sources`', function () {
                    chai_1.assert.deepEqual(sourceMapSources, []);
                });
                it('should return empty source map property `mappings`', function () {
                    chai_1.assert.isNotOk(sourceMapMappings);
                });
            });
        });
        describe('variable inside global scope', function () {
            var regExp = /^var *test *= *0x\d+;$/;
            var obfuscatedCode = void 0;
            beforeEach(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input-1.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should return correct obfuscated code', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('variable inside global scope', function () {
            var regExp = /^\(function *\(\) *\{ *var *_0x[\w]+ *= *0x\d+; *\}(\(\)\)|\)\(\));?$/;
            var obfuscatedCode = void 0;
            beforeEach(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/block-scope.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should return correct obfuscated code', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('latin literal variable value', function () {
            var stringArrayLatinRegExp = /^var _0x(\w){4} *= *\['abc'\];/;
            var stringArrayCallRegExp = /var *test *= *_0x(\w){4}\('0x0'\);$/;
            var obfuscatedCode = void 0;
            beforeEach(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input-2.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('match #1: should return correct obfuscated code', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayLatinRegExp);
            });
            it('match #2: should return correct obfuscated code', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayCallRegExp);
            });
        });
        describe('cyrillic literal variable value', function () {
            var stringArrayCyrillicRegExp = /^var _0x(\w){4} *= *\['абц'\];/;
            var stringArrayCallRegExp = /var *test *= *_0x(\w){4}\('0x0'\);$/;
            var obfuscatedCode = void 0;
            beforeEach(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input-cyrillic.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('match #1: should return correct obfuscated code', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayCyrillicRegExp);
            });
            it('match #2: should return correct obfuscated code', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayCallRegExp);
            });
        });
        describe('seed', function () {
            this.timeout(60000);
            describe('same seed on each run', function () {
                var code = readFileAsString_1.readFileAsString('./test/fixtures/sample.js');
                var samples = 100;
                var obfuscatedCode1 = void 0,
                    obfuscatedCode2 = void 0,
                    seed = 12345,
                    equalsCount = 0;
                beforeEach(function () {
                    for (var i = 0; i < samples; i++) {
                        if (i % 20 === 0) {
                            seed++;
                        }
                        var obfuscationResult1 = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, {
                            seed: seed
                        });
                        var obfuscationResult2 = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, {
                            seed: seed
                        });
                        obfuscatedCode1 = obfuscationResult1.getObfuscatedCode();
                        obfuscatedCode2 = obfuscationResult2.getObfuscatedCode();
                        if (obfuscatedCode1 === obfuscatedCode2) {
                            equalsCount++;
                        }
                    }
                });
                it('should return same code every time with same `seed`', function () {
                    chai_1.assert.equal(equalsCount, samples);
                });
            });
            describe('variant #1: different seed on each run', function () {
                var code = readFileAsString_1.readFileAsString('./test/fixtures/sample.js');
                var obfuscatedCode1 = void 0,
                    obfuscatedCode2 = void 0;
                beforeEach(function () {
                    var obfuscationResult1 = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, {
                        seed: 12345
                    });
                    var obfuscationResult2 = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, {
                        seed: 12346
                    });
                    obfuscatedCode1 = obfuscationResult1.getObfuscatedCode();
                    obfuscatedCode2 = obfuscationResult2.getObfuscatedCode();
                });
                it('should return different obfuscated code with different `seed` option value', function () {
                    chai_1.assert.notEqual(obfuscatedCode1, obfuscatedCode2);
                });
            });
            describe('variant #2: different seed on each run', function () {
                var code = readFileAsString_1.readFileAsString('./test/fixtures/sample.js');
                var obfuscatedCode1 = void 0,
                    obfuscatedCode2 = void 0;
                beforeEach(function () {
                    var obfuscationResult1 = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, {
                        seed: 0
                    });
                    var obfuscationResult2 = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, {
                        seed: 0
                    });
                    obfuscatedCode1 = obfuscationResult1.getObfuscatedCode();
                    obfuscatedCode2 = obfuscationResult2.getObfuscatedCode();
                });
                it('should return different obfuscated code with different `seed` option value', function () {
                    chai_1.assert.notEqual(obfuscatedCode1, obfuscatedCode2);
                });
            });
            describe('variant #3: same seed for different source code', function () {
                var code1 = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input-cyrillic.js');
                var code2 = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input-2.js');
                var regExp = /var (_0x(\w){4}) *= *\['.*'\];/;
                var match1 = void 0,
                    match2 = void 0;
                beforeEach(function () {
                    var obfuscationResult1 = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code1, {
                        seed: 123
                    });
                    var obfuscationResult2 = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code2, {
                        seed: 123
                    });
                    var obfuscatedCode1 = obfuscationResult1.getObfuscatedCode();
                    var obfuscatedCode2 = obfuscationResult2.getObfuscatedCode();
                    match1 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode1, regExp);
                    match2 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode2, regExp);
                });
                it('should return different String Array names for different source code with same seed', function () {
                    chai_1.assert.notEqual(match1, match2);
                });
            });
        });
        describe('new.target MetaProperty', function () {
            var regExp = /new\.target *=== *Foo/;
            var obfuscatedCode = void 0;
            beforeEach(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/new-target.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should keep new.target MetaProperty', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('mangle', function () {
            var regExp = /var *a *= *0x1/;
            var obfuscatedCode = void 0;
            beforeEach(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/mangle.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, {
                    mangle: true
                });
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should mangle obfuscated code', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('3.5k variables', function () {
            this.timeout(200000);
            var expectedValue = 3500;
            var result = void 0;
            beforeEach(function () {
                var code = buildLargeCode_1.buildLargeCode(expectedValue);
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, {
                    compact: true,
                    controlFlowFlattening: true,
                    controlFlowFlatteningThreshold: 1,
                    deadCodeInjection: true,
                    deadCodeInjectionThreshold: 1,
                    disableConsoleOutput: false,
                    rotateStringArray: true,
                    stringArray: true,
                    stringArrayEncoding: 'rc4',
                    stringArrayThreshold: 1,
                    unicodeEscapeSequence: false
                });
                var obfuscatedCode = obfuscationResult.getObfuscatedCode();
                result = eval(obfuscatedCode);
            });
            it('should correctly obfuscate 3.5k variables', function () {
                chai_1.assert.equal(result, expectedValue);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSmF2YVNjcmlwdE9iZnVzY2F0b3Iuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvZnVuY3Rpb25hbC10ZXN0cy9qYXZhc2NyaXB0LW9iZnVzY2F0b3IvSmF2YVNjcmlwdE9iZnVzY2F0b3Iuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQkFBOEI7QUFJOUIscUNBQXlFO0FBRXpFLDhCQUFvRjtBQUVwRiwrQkFBOEQ7QUFDOUQsK0JBQThEO0FBQzlELGlDQUFrRTtBQUVsRSxBQUFRLFNBQUMsQUFBc0Isd0JBQUU7QUFDN0IsQUFBUSxhQUFDLEFBQXdGLDBGQUFFO0FBQy9GLEFBQVEsaUJBQUMsQUFBcUIsdUJBQUU7QUFDNUIsZ0JBQUksQUFBc0I7Z0JBQ3RCLEFBQWlCLEFBQUM7QUFFdEIsQUFBVSx1QkFBQztBQUNQLG9CQUFNLEFBQUksT0FBVyxtQkFBZ0IsaUJBQUMsQUFBUyxZQUFHLEFBQTZCLEFBQUMsQUFBQztBQUNqRixvQkFBTSxBQUFpQixvQkFBdUIsdUJBQW9CLHFCQUFDLEFBQVMsVUFDeEUsQUFBSSx3QkFFRyxnQkFBc0IsQUFFaEMsQUFBQztBQUVGLEFBQWMsaUNBQUcsQUFBaUIsa0JBQUMsQUFBaUIsQUFBRSxBQUFDO0FBQ3ZELEFBQVMsNEJBQUcsQUFBaUIsa0JBQUMsQUFBWSxBQUFFLEFBQUMsQUFDakQ7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLGVBQUMsQUFBdUMseUNBQUU7QUFDeEMsdUJBQU0sT0FBQyxBQUFJLEtBQUMsQUFBYyxBQUFDLEFBQUMsQUFDaEM7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLGVBQUMsQUFBZ0Msa0NBQUU7QUFDakMsdUJBQU0sT0FBQyxBQUFPLFFBQUMsQUFBUyxBQUFDLEFBQUMsQUFDOUI7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQVEsaUJBQUMsQUFBbUIscUJBQUU7QUFDMUIsZ0JBQUksQUFBc0Is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QUFNLEFBQWlCLDJDQUEyQyxxQkFBQyxBQUFTLFVBQ3hFLEFBQUk7QUFFQSxBQUFPLDZCQUFFLEFBQUk7QUFDYixBQUFxQiwyQ0FBRSxBQUFJO0FBQzNCLEFBQThCLG9EQUFFLEFBQUM7QUFDakMsQUFBaUIsdUNBQUUsQUFBSTtBQUN2QixBQUEwQixnREFBRSxBQUFDO0FBQzdCLEFBQW9CLDBDQUFFLEFBQUs7QUFDM0IsQUFBaUIsdUNBQUUsQUFBSTtBQUN2QixBQUFXLGlDQUFFLEFBQUk7QUFDakIsQUFBbUIseUNBQUUsQUFBSztBQUMxQixBQUFvQiwwQ0FBRSxBQUFDO0FBQ3ZCLEFBQXFCLDJDQUFFLEFBQUssQUFDL0IsQUFDSixBQUFDO0FBYkUsaUJBRjBDO0FBaUI5QyxvQkFBTSxBQUFjLGlCQUFXLEFBQWlCLGtCQUFDLEFBQWlCLEFBQUUsQUFBQztBQUNyRSxBQUFNLHlCQUFHLEFBQUksS0FBQyxBQUFjLEFBQUMsQUFBQyxBQUNsQztBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsZUFBQyxBQUEyQyw2Q0FBRTtBQUM1Qyx1QkFBTSxPQUFDLEFBQUssTUFBQyxBQUFNLFFBQUUsQUFBYSxBQUFDLEFBQUMsQUFDeEM7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQgfSBmcm9tICdjaGFpJztcblxuaW1wb3J0IHsgSU9iZnVzY2F0aW9uUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vc3JjL2ludGVyZmFjZXMvSU9iZnVzY2F0aW9uUmVzdWx0JztcblxuaW1wb3J0IHsgSmF2YVNjcmlwdE9iZnVzY2F0b3IgfSBmcm9tICcuLi8uLi8uLi9zcmMvSmF2YVNjcmlwdE9iZnVzY2F0b3InO1xuXG5pbXBvcnQgeyBOT19DVVNUT01fTk9ERVNfUFJFU0VUIH0gZnJvbSAnLi4vLi4vLi4vc3JjL29wdGlvbnMvcHJlc2V0cy9Ob0N1c3RvbU5vZGVzJztcblxuaW1wb3J0IHsgYnVpbGRMYXJnZUNvZGUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2J1aWxkTGFyZ2VDb2RlJztcbmltcG9ydCB7IGdldFJlZ0V4cE1hdGNoIH0gZnJvbSAnLi4vLi4vaGVscGVycy9nZXRSZWdFeHBNYXRjaCc7XG5pbXBvcnQgeyByZWFkRmlsZUFzU3RyaW5nIH0gZnJvbSAnLi4vLi4vaGVscGVycy9yZWFkRmlsZUFzU3RyaW5nJztcblxuZGVzY3JpYmUoJ0phdmFTY3JpcHRPYmZ1c2NhdG9yJywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCdvYmZ1c2NhdGUgKHNvdXJjZUNvZGU6IHN0cmluZywgY3VzdG9tT3B0aW9ucz86IElPYmZ1c2NhdG9yT3B0aW9ucyk6IElPYmZ1c2NhdGlvblJlc3VsdCcsICgpID0+IHtcbiAgICAgICAgZGVzY3JpYmUoJ2NvcnJlY3Qgc291cmNlIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgb2JmdXNjYXRlZENvZGU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICBzb3VyY2VNYXA6IHN0cmluZztcblxuICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL3NpbXBsZS1pbnB1dC0xLmpzJyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlID0gb2JmdXNjYXRpb25SZXN1bHQuZ2V0T2JmdXNjYXRlZENvZGUoKTtcbiAgICAgICAgICAgICAgICBzb3VyY2VNYXAgPSBvYmZ1c2NhdGlvblJlc3VsdC5nZXRTb3VyY2VNYXAoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBjb3JyZWN0IG9iZnVzY2F0ZWQgY29kZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuaXNPayhvYmZ1c2NhdGVkQ29kZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gZW1wdHkgc291cmNlIG1hcCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuaXNOb3RPayhzb3VyY2VNYXApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCdlbXB0eSBzb3VyY2UgY29kZScsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTogc3RyaW5nO1xuXG4gICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlOiBzdHJpbmcgPSByZWFkRmlsZUFzU3RyaW5nKF9fZGlybmFtZSArICcvZml4dHVyZXMvZW1wdHktaW5wdXQuanMnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvYmZ1c2NhdGlvblJlc3VsdDogSU9iZnVzY2F0aW9uUmVzdWx0ID0gSmF2YVNjcmlwdE9iZnVzY2F0b3Iub2JmdXNjYXRlKFxuICAgICAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gZW1wdHkgb2JmdXNjYXRlZCBjb2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5pc05vdE9rKG9iZnVzY2F0ZWRDb2RlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgnZW1wdHkgc291cmNlIGNvZGUgd2l0aCBjb21tZW50cycsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTogc3RyaW5nO1xuXG4gICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlOiBzdHJpbmcgPSByZWFkRmlsZUFzU3RyaW5nKF9fZGlybmFtZSArICcvZml4dHVyZXMvY29tbWVudHMtb25seS5qcycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoXG4gICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlID0gb2JmdXNjYXRpb25SZXN1bHQuZ2V0T2JmdXNjYXRlZENvZGUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBlbXB0eSBvYmZ1c2NhdGVkIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmlzTm90T2sob2JmdXNjYXRlZENvZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCdgc291cmNlTWFwYCBvcHRpb24gaXMgYHRydWVgJywgKCkgPT4ge1xuICAgICAgICAgICAgZGVzY3JpYmUoJ2Bzb3VyY2VNYXBNb2RlYCBpcyBgc2VwYXJhdGVgJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VNYXA6IHN0cmluZztcblxuICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2RlOiBzdHJpbmcgPSByZWFkRmlsZUFzU3RyaW5nKF9fZGlybmFtZSArICcvZml4dHVyZXMvc2ltcGxlLWlucHV0LTEuanMnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VNYXA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZU1hcCA9IEpTT04ucGFyc2Uob2JmdXNjYXRpb25SZXN1bHQuZ2V0U291cmNlTWFwKCkpLm1hcHBpbmdzO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gY29ycmVjdCBvYmZ1c2NhdGVkIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5pc09rKG9iZnVzY2F0ZWRDb2RlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGNvcnJlY3Qgc291cmNlIG1hcCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmlzT2soc291cmNlTWFwKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBkZXNjcmliZSgnYHNvdXJjZU1hcE1vZGVgIGlzIGBpbmxpbmVgJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ0V4cDogUmVnRXhwID0gL3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvblxcL2pzb247YmFzZTY0LztcblxuICAgICAgICAgICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VNYXA6IHN0cmluZztcblxuICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2RlOiBzdHJpbmcgPSByZWFkRmlsZUFzU3RyaW5nKF9fZGlybmFtZSArICcvZml4dHVyZXMvc2ltcGxlLWlucHV0LTEuanMnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VNYXA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTWFwTW9kZTogJ2lubGluZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZU1hcCA9IEpTT04ucGFyc2Uob2JmdXNjYXRpb25SZXN1bHQuZ2V0U291cmNlTWFwKCkpLm1hcHBpbmdzO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gY29ycmVjdCBvYmZ1c2NhdGVkIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5pc09rKG9iZnVzY2F0ZWRDb2RlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIG9iZnVzY2F0ZWQgY29kZSB3aXRoIGlubGluZSBzb3VyY2UgbWFwIGFzIEJhc2U2NCBzdHJpbmcnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgcmVnRXhwKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGNvcnJlY3Qgc291cmNlIG1hcCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmlzT2soc291cmNlTWFwKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBkZXNjcmliZSgnZW1wdHkgc291cmNlIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG9iZnVzY2F0ZWRDb2RlOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZU1hcE5hbWVzOiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlTWFwU291cmNlczogc3RyaW5nW10sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZU1hcE1hcHBpbmdzOiBzdHJpbmc7XG5cbiAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL2VtcHR5LWlucHV0LmpzJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZU1hcDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlID0gb2JmdXNjYXRpb25SZXN1bHQuZ2V0T2JmdXNjYXRlZENvZGUoKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VNYXBPYmplY3Q6IGFueSA9IEpTT04ucGFyc2Uob2JmdXNjYXRpb25SZXN1bHQuZ2V0U291cmNlTWFwKCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZU1hcE5hbWVzID0gc291cmNlTWFwT2JqZWN0Lm5hbWVzO1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VNYXBTb3VyY2VzID0gc291cmNlTWFwT2JqZWN0LnNvdXJjZXM7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZU1hcE1hcHBpbmdzID0gc291cmNlTWFwT2JqZWN0Lm1hcHBpbmdzO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gZW1wdHkgb2JmdXNjYXRlZCBjb2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQuaXNOb3RPayhvYmZ1c2NhdGVkQ29kZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBlbXB0eSBzb3VyY2UgbWFwIHByb3BlcnR5IGBuYW1lc2AnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwoc291cmNlTWFwTmFtZXMsIFtdKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGVtcHR5IHNvdXJjZSBtYXAgcHJvcGVydHkgYHNvdXJjZXNgJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKHNvdXJjZU1hcFNvdXJjZXMsIFtdKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGVtcHR5IHNvdXJjZSBtYXAgcHJvcGVydHkgYG1hcHBpbmdzYCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmlzTm90T2soc291cmNlTWFwTWFwcGluZ3MpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCd2YXJpYWJsZSBpbnNpZGUgZ2xvYmFsIHNjb3BlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVnRXhwOiBSZWdFeHAgPSAvXnZhciAqdGVzdCAqPSAqMHhcXGQrOyQvO1xuXG4gICAgICAgICAgICBsZXQgb2JmdXNjYXRlZENvZGU6IHN0cmluZztcblxuICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL3NpbXBsZS1pbnB1dC0xLmpzJyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlID0gb2JmdXNjYXRpb25SZXN1bHQuZ2V0T2JmdXNjYXRlZENvZGUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBjb3JyZWN0IG9iZnVzY2F0ZWQgY29kZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnQubWF0Y2gob2JmdXNjYXRlZENvZGUsIHJlZ0V4cCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3ZhcmlhYmxlIGluc2lkZSBnbG9iYWwgc2NvcGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZWdFeHA6IFJlZ0V4cCA9IC9eXFwoZnVuY3Rpb24gKlxcKFxcKSAqXFx7ICp2YXIgKl8weFtcXHddKyAqPSAqMHhcXGQrOyAqXFx9KFxcKFxcKVxcKXxcXClcXChcXCkpOz8kLztcblxuICAgICAgICAgICAgbGV0IG9iZnVzY2F0ZWRDb2RlOiBzdHJpbmc7XG5cbiAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvZGU6IHN0cmluZyA9IHJlYWRGaWxlQXNTdHJpbmcoX19kaXJuYW1lICsgJy9maXh0dXJlcy9ibG9jay1zY29wZS5qcycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoXG4gICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLk5PX0NVU1RPTV9OT0RFU19QUkVTRVRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gY29ycmVjdCBvYmZ1c2NhdGVkIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0ZWRDb2RlLCByZWdFeHApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCdsYXRpbiBsaXRlcmFsIHZhcmlhYmxlIHZhbHVlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RyaW5nQXJyYXlMYXRpblJlZ0V4cDogUmVnRXhwID0gL152YXIgXzB4KFxcdyl7NH0gKj0gKlxcWydhYmMnXFxdOy87XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdBcnJheUNhbGxSZWdFeHA6IFJlZ0V4cCA9IC92YXIgKnRlc3QgKj0gKl8weChcXHcpezR9XFwoJzB4MCdcXCk7JC87XG5cbiAgICAgICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTogc3RyaW5nO1xuXG4gICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlOiBzdHJpbmcgPSByZWFkRmlsZUFzU3RyaW5nKF9fZGlybmFtZSArICcvZml4dHVyZXMvc2ltcGxlLWlucHV0LTIuanMnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvYmZ1c2NhdGlvblJlc3VsdDogSU9iZnVzY2F0aW9uUmVzdWx0ID0gSmF2YVNjcmlwdE9iZnVzY2F0b3Iub2JmdXNjYXRlKFxuICAgICAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5OT19DVVNUT01fTk9ERVNfUFJFU0VULFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nQXJyYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdBcnJheVRocmVzaG9sZDogMVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlID0gb2JmdXNjYXRpb25SZXN1bHQuZ2V0T2JmdXNjYXRlZENvZGUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgnbWF0Y2ggIzE6IHNob3VsZCByZXR1cm4gY29ycmVjdCBvYmZ1c2NhdGVkIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0ZWRDb2RlLCBzdHJpbmdBcnJheUxhdGluUmVnRXhwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgnbWF0Y2ggIzI6IHNob3VsZCByZXR1cm4gY29ycmVjdCBvYmZ1c2NhdGVkIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0ZWRDb2RlLCBzdHJpbmdBcnJheUNhbGxSZWdFeHApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCdjeXJpbGxpYyBsaXRlcmFsIHZhcmlhYmxlIHZhbHVlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RyaW5nQXJyYXlDeXJpbGxpY1JlZ0V4cDogUmVnRXhwID0gL152YXIgXzB4KFxcdyl7NH0gKj0gKlxcWyfQsNCx0YYnXFxdOy87XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdBcnJheUNhbGxSZWdFeHA6IFJlZ0V4cCA9IC92YXIgKnRlc3QgKj0gKl8weChcXHcpezR9XFwoJzB4MCdcXCk7JC87XG5cbiAgICAgICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTogc3RyaW5nO1xuXG4gICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlOiBzdHJpbmcgPSByZWFkRmlsZUFzU3RyaW5nKF9fZGlybmFtZSArICcvZml4dHVyZXMvc2ltcGxlLWlucHV0LWN5cmlsbGljLmpzJyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ0FycmF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nQXJyYXlUaHJlc2hvbGQ6IDFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ21hdGNoICMxOiBzaG91bGQgcmV0dXJuIGNvcnJlY3Qgb2JmdXNjYXRlZCBjb2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgc3RyaW5nQXJyYXlDeXJpbGxpY1JlZ0V4cCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ21hdGNoICMyOiBzaG91bGQgcmV0dXJuIGNvcnJlY3Qgb2JmdXNjYXRlZCBjb2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgc3RyaW5nQXJyYXlDYWxsUmVnRXhwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgnc2VlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMudGltZW91dCg2MDAwMCk7XG5cbiAgICAgICAgICAgIGRlc2NyaWJlKCdzYW1lIHNlZWQgb24gZWFjaCBydW4nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZygnLi90ZXN0L2ZpeHR1cmVzL3NhbXBsZS5qcycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNhbXBsZXM6IG51bWJlciA9IDEwMDtcblxuICAgICAgICAgICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTE6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgb2JmdXNjYXRlZENvZGUyOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIHNlZWQ6IG51bWJlciA9IDEyMzQ1LFxuICAgICAgICAgICAgICAgICAgICBlcXVhbHNDb3VudDogbnVtYmVyID0gMDtcblxuICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgc2FtcGxlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAlIDIwID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VlZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmZ1c2NhdGlvblJlc3VsdDE6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VlZDogc2VlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmZ1c2NhdGlvblJlc3VsdDI6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VlZDogc2VlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlMSA9IG9iZnVzY2F0aW9uUmVzdWx0MS5nZXRPYmZ1c2NhdGVkQ29kZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JmdXNjYXRlZENvZGUyID0gb2JmdXNjYXRpb25SZXN1bHQyLmdldE9iZnVzY2F0ZWRDb2RlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmZ1c2NhdGVkQ29kZTEgPT09IG9iZnVzY2F0ZWRDb2RlMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVxdWFsc0NvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHNhbWUgY29kZSBldmVyeSB0aW1lIHdpdGggc2FtZSBgc2VlZGAnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChlcXVhbHNDb3VudCwgc2FtcGxlcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZGVzY3JpYmUoJ3ZhcmlhbnQgIzE6IGRpZmZlcmVudCBzZWVkIG9uIGVhY2ggcnVuJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvZGU6IHN0cmluZyA9IHJlYWRGaWxlQXNTdHJpbmcoJy4vdGVzdC9maXh0dXJlcy9zYW1wbGUuanMnKTtcblxuICAgICAgICAgICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTE6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgb2JmdXNjYXRlZENvZGUyOiBzdHJpbmc7XG5cbiAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQxOiBJT2JmdXNjYXRpb25SZXN1bHQgPSBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZWQ6IDEyMzQ1XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0MjogSU9iZnVzY2F0aW9uUmVzdWx0ID0gSmF2YVNjcmlwdE9iZnVzY2F0b3Iub2JmdXNjYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWVkOiAxMjM0NlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlMSA9IG9iZnVzY2F0aW9uUmVzdWx0MS5nZXRPYmZ1c2NhdGVkQ29kZSgpO1xuICAgICAgICAgICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZTIgPSBvYmZ1c2NhdGlvblJlc3VsdDIuZ2V0T2JmdXNjYXRlZENvZGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGRpZmZlcmVudCBvYmZ1c2NhdGVkIGNvZGUgd2l0aCBkaWZmZXJlbnQgYHNlZWRgIG9wdGlvbiB2YWx1ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0Lm5vdEVxdWFsKG9iZnVzY2F0ZWRDb2RlMSwgb2JmdXNjYXRlZENvZGUyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBkZXNjcmliZSgndmFyaWFudCAjMjogZGlmZmVyZW50IHNlZWQgb24gZWFjaCBydW4nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZygnLi90ZXN0L2ZpeHR1cmVzL3NhbXBsZS5qcycpO1xuXG4gICAgICAgICAgICAgICAgbGV0IG9iZnVzY2F0ZWRDb2RlMTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZTI6IHN0cmluZztcblxuICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmZ1c2NhdGlvblJlc3VsdDE6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VlZDogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmZ1c2NhdGlvblJlc3VsdDI6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VlZDogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlMSA9IG9iZnVzY2F0aW9uUmVzdWx0MS5nZXRPYmZ1c2NhdGVkQ29kZSgpO1xuICAgICAgICAgICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZTIgPSBvYmZ1c2NhdGlvblJlc3VsdDIuZ2V0T2JmdXNjYXRlZENvZGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGRpZmZlcmVudCBvYmZ1c2NhdGVkIGNvZGUgd2l0aCBkaWZmZXJlbnQgYHNlZWRgIG9wdGlvbiB2YWx1ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0Lm5vdEVxdWFsKG9iZnVzY2F0ZWRDb2RlMSwgb2JmdXNjYXRlZENvZGUyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBkZXNjcmliZSgndmFyaWFudCAjMzogc2FtZSBzZWVkIGZvciBkaWZmZXJlbnQgc291cmNlIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZTE6IHN0cmluZyA9IHJlYWRGaWxlQXNTdHJpbmcoX19kaXJuYW1lICsgJy9maXh0dXJlcy9zaW1wbGUtaW5wdXQtY3lyaWxsaWMuanMnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlMjogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL3NpbXBsZS1pbnB1dC0yLmpzJyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZWdFeHA6IFJlZ0V4cCA9IC92YXIgKF8weChcXHcpezR9KSAqPSAqXFxbJy4qJ1xcXTsvO1xuXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoMTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaDI6IHN0cmluZztcblxuICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmZ1c2NhdGlvblJlc3VsdDE6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUxLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZWQ6IDEyM1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmZ1c2NhdGlvblJlc3VsdDI6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUyLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZWQ6IDEyM1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0ZWRDb2RlMTogc3RyaW5nID0gb2JmdXNjYXRpb25SZXN1bHQxLmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0ZWRDb2RlMjogc3RyaW5nID0gb2JmdXNjYXRpb25SZXN1bHQyLmdldE9iZnVzY2F0ZWRDb2RlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gxID0gZ2V0UmVnRXhwTWF0Y2gob2JmdXNjYXRlZENvZGUxLCByZWdFeHApO1xuICAgICAgICAgICAgICAgICAgICBtYXRjaDIgPSBnZXRSZWdFeHBNYXRjaChvYmZ1c2NhdGVkQ29kZTIsIHJlZ0V4cCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBkaWZmZXJlbnQgU3RyaW5nIEFycmF5IG5hbWVzIGZvciBkaWZmZXJlbnQgc291cmNlIGNvZGUgd2l0aCBzYW1lIHNlZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydC5ub3RFcXVhbChtYXRjaDEsIG1hdGNoMik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ25ldy50YXJnZXQgTWV0YVByb3BlcnR5JywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVnRXhwOiBSZWdFeHAgPSAvbmV3XFwudGFyZ2V0ICo9PT0gKkZvby87XG5cbiAgICAgICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTogc3RyaW5nO1xuXG4gICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlOiBzdHJpbmcgPSByZWFkRmlsZUFzU3RyaW5nKF9fZGlybmFtZSArICcvZml4dHVyZXMvbmV3LXRhcmdldC5qcycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoXG4gICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLk5PX0NVU1RPTV9OT0RFU19QUkVTRVRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Nob3VsZCBrZWVwIG5ldy50YXJnZXQgTWV0YVByb3BlcnR5JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgcmVnRXhwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgnbWFuZ2xlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVnRXhwOiBSZWdFeHAgPSAvdmFyICphICo9ICoweDEvO1xuXG4gICAgICAgICAgICBsZXQgb2JmdXNjYXRlZENvZGU6IHN0cmluZztcblxuICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL21hbmdsZS5qcycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoXG4gICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hbmdsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlID0gb2JmdXNjYXRpb25SZXN1bHQuZ2V0T2JmdXNjYXRlZENvZGUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgnc2hvdWxkIG1hbmdsZSBvYmZ1c2NhdGVkIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0ZWRDb2RlLCByZWdFeHApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCczLjVrIHZhcmlhYmxlcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMudGltZW91dCgyMDAwMDApO1xuXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFZhbHVlOiBudW1iZXIgPSAzNTAwO1xuXG4gICAgICAgICAgICBsZXQgcmVzdWx0OiBudW1iZXI7XG5cbiAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvZGU6IHN0cmluZyA9IGJ1aWxkTGFyZ2VDb2RlKGV4cGVjdGVkVmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoXG4gICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sRmxvd0ZsYXR0ZW5pbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sRmxvd0ZsYXR0ZW5pbmdUaHJlc2hvbGQ6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWFkQ29kZUluamVjdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYWRDb2RlSW5qZWN0aW9uVGhyZXNob2xkOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUNvbnNvbGVPdXRwdXQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlU3RyaW5nQXJyYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdBcnJheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ0FycmF5RW5jb2Rpbmc6ICdyYzQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nQXJyYXlUaHJlc2hvbGQ6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmljb2RlRXNjYXBlU2VxdWVuY2U6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRlZENvZGU6IHN0cmluZyA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZXZhbChvYmZ1c2NhdGVkQ29kZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Nob3VsZCBjb3JyZWN0bHkgb2JmdXNjYXRlIDMuNWsgdmFyaWFibGVzJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIGV4cGVjdGVkVmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXX0=