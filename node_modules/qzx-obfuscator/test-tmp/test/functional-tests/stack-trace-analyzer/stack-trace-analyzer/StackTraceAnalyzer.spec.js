"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ServiceIdentifiers_1 = require("../../../../src/container/ServiceIdentifiers");
var estraverse = require("estraverse");
var chai_1 = require("chai");
var readFileAsString_1 = require("../../../helpers/readFileAsString");
var InversifyContainerFacade_1 = require("../../../../src/container/InversifyContainerFacade");
var Node_1 = require("../../../../src/node/Node");
var Nodes_1 = require("../../../../src/node/Nodes");
var NodeUtils_1 = require("../../../../src/node/NodeUtils");
function getFunctionDeclarationByName(astTree, name) {
    var functionDeclarationNode = null;
    estraverse.traverse(astTree, {
        enter: function enter(node) {
            if (Node_1.Node.isFunctionDeclarationNode(node) && Node_1.Node.isIdentifierNode(node.id) && node.id.name === name) {
                functionDeclarationNode = node;
                return estraverse.VisitorOption.Break;
            }
        }
    });
    return functionDeclarationNode;
}
function getFunctionExpressionByName(astTree, name) {
    var functionExpressionNode = null;
    estraverse.traverse(astTree, {
        enter: function enter(node) {
            if (Node_1.Node.isVariableDeclaratorNode(node) && node.init && Node_1.Node.isFunctionExpressionNode(node.init) && Node_1.Node.isIdentifierNode(node.id) && node.id.name === name) {
                functionExpressionNode = node.init;
                return estraverse.VisitorOption.Break;
            }
        }
    });
    return functionExpressionNode;
}
function getFunctionExpressionById(astTree, id) {
    var functionExpressionNode = null;
    estraverse.traverse(astTree, {
        enter: function enter(node) {
            if (Node_1.Node.isFunctionExpressionNode(node) && node.id && Node_1.Node.isIdentifierNode(node.id) && node.id.name === id) {
                functionExpressionNode = node;
                return estraverse.VisitorOption.Break;
            }
        }
    });
    return functionExpressionNode;
}
function getObjectFunctionExpressionByName(astTree, objectName, name) {
    var functionExpressionNode = null,
        targetObjectExpressionNode = null;
    estraverse.traverse(astTree, {
        enter: function enter(node) {
            if (Node_1.Node.isVariableDeclaratorNode(node) && Node_1.Node.isIdentifierNode(node.id) && node.init && Node_1.Node.isObjectExpressionNode(node.init) && node.id.name === objectName) {
                targetObjectExpressionNode = node.init;
                return estraverse.VisitorOption.Break;
            }
        }
    });
    if (!targetObjectExpressionNode) {
        return null;
    }
    estraverse.traverse(targetObjectExpressionNode, {
        enter: function enter(node) {
            if (Node_1.Node.isPropertyNode(node) && Node_1.Node.isFunctionExpressionNode(node.value) && (Node_1.Node.isIdentifierNode(node.key) && node.key.name === name || Node_1.Node.isLiteralNode(node.key) && node.key.value === name)) {
                functionExpressionNode = node.value;
                return estraverse.VisitorOption.Break;
            }
        }
    });
    return functionExpressionNode;
}
describe('StackTraceAnalyzer', function () {
    describe('extract (): IStackTraceData[]', function () {
        var stackTraceAnalyzer = void 0,
            expectedStackTraceData = void 0,
            stackTraceData = void 0;
        before(function () {
            var inversifyContainerFacade = new InversifyContainerFacade_1.InversifyContainerFacade();
            inversifyContainerFacade.load('', {});
            stackTraceAnalyzer = inversifyContainerFacade.get(ServiceIdentifiers_1.ServiceIdentifiers.IStackTraceAnalyzer);
        });
        describe('variant #1: basic-1', function () {
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/basic-1.js');
                var astTree = Nodes_1.Nodes.getProgramNode(NodeUtils_1.NodeUtils.convertCodeToStructure(code));
                expectedStackTraceData = [{
                    name: 'baz',
                    callee: getFunctionDeclarationByName(astTree, 'baz').body,
                    stackTrace: []
                }, {
                    name: 'foo',
                    callee: getFunctionDeclarationByName(astTree, 'foo').body,
                    stackTrace: []
                }, {
                    name: 'bar',
                    callee: getFunctionDeclarationByName(astTree, 'bar').body,
                    stackTrace: [{
                        name: 'inner2',
                        callee: getFunctionDeclarationByName(astTree, 'inner2').body,
                        stackTrace: [{
                            name: 'inner3',
                            callee: getFunctionExpressionByName(astTree, 'inner3').body,
                            stackTrace: []
                        }]
                    }, {
                        name: 'inner1',
                        callee: getFunctionDeclarationByName(astTree, 'inner1').body,
                        stackTrace: []
                    }]
                }];
                stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
            });
            it('should return correct stack trace data', function () {
                chai_1.assert.deepEqual(stackTraceData, expectedStackTraceData);
            });
        });
        describe('variant #2: basic-2', function () {
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/basic-2.js');
                var astTree = Nodes_1.Nodes.getProgramNode(NodeUtils_1.NodeUtils.convertCodeToStructure(code));
                expectedStackTraceData = [{
                    name: 'bar',
                    callee: getFunctionDeclarationByName(astTree, 'bar').body,
                    stackTrace: []
                }, {
                    name: 'baz',
                    callee: getFunctionDeclarationByName(astTree, 'baz').body,
                    stackTrace: [{
                        name: 'inner1',
                        callee: getFunctionDeclarationByName(astTree, 'inner1').body,
                        stackTrace: []
                    }]
                }, {
                    name: 'foo',
                    callee: getFunctionDeclarationByName(astTree, 'foo').body,
                    stackTrace: []
                }];
                stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
            });
            it('should return correct stack trace data', function () {
                chai_1.assert.deepEqual(stackTraceData, expectedStackTraceData);
            });
        });
        describe('variant #3: deep conditions nesting', function () {
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/deep-conditions-nesting.js');
                var astTree = Nodes_1.Nodes.getProgramNode(NodeUtils_1.NodeUtils.convertCodeToStructure(code));
                expectedStackTraceData = [{
                    name: 'bar',
                    callee: getFunctionDeclarationByName(astTree, 'bar').body,
                    stackTrace: []
                }, {
                    name: 'baz',
                    callee: getFunctionDeclarationByName(astTree, 'baz').body,
                    stackTrace: [{
                        name: 'inner1',
                        callee: getFunctionDeclarationByName(astTree, 'inner1').body,
                        stackTrace: []
                    }]
                }, {
                    name: 'foo',
                    callee: getFunctionDeclarationByName(astTree, 'foo').body,
                    stackTrace: []
                }];
                stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
            });
            it('should return correct stack trace data', function () {
                chai_1.assert.deepEqual(stackTraceData, expectedStackTraceData);
            });
        });
        describe('variant #4: call before declaration', function () {
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/call-before-declaration.js');
                var astTree = Nodes_1.Nodes.getProgramNode(NodeUtils_1.NodeUtils.convertCodeToStructure(code));
                expectedStackTraceData = [{
                    name: 'bar',
                    callee: getFunctionDeclarationByName(astTree, 'bar').body,
                    stackTrace: []
                }];
                stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
            });
            it('should return correct stack trace data', function () {
                chai_1.assert.deepEqual(stackTraceData, expectedStackTraceData);
            });
        });
        describe('variant #5: call expression of object member #1', function () {
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/call-expression-of-object-member-1.js');
                var astTree = Nodes_1.Nodes.getProgramNode(NodeUtils_1.NodeUtils.convertCodeToStructure(code));
                expectedStackTraceData = [{
                    name: 'baz',
                    callee: getObjectFunctionExpressionByName(astTree, 'object1', 'baz').body,
                    stackTrace: []
                }, {
                    name: 'baz',
                    callee: getObjectFunctionExpressionByName(astTree, 'object1', 'baz').body,
                    stackTrace: []
                }, {
                    name: 'func',
                    callee: getObjectFunctionExpressionByName(astTree, 'object1', 'func').body,
                    stackTrace: []
                }, {
                    name: 'bar',
                    callee: getObjectFunctionExpressionByName(astTree, 'object1', 'bar').body,
                    stackTrace: [{
                        name: 'inner1',
                        callee: getFunctionDeclarationByName(astTree, 'inner1').body,
                        stackTrace: []
                    }]
                }, {
                    name: 'bar',
                    callee: getObjectFunctionExpressionByName(astTree, 'object', 'bar').body,
                    stackTrace: [{
                        name: 'inner',
                        callee: getFunctionDeclarationByName(astTree, 'inner').body,
                        stackTrace: []
                    }]
                }];
                stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
            });
            it('should return correct stack trace data', function () {
                chai_1.assert.deepEqual(stackTraceData, expectedStackTraceData);
            });
        });
        describe('variant #5: call expression of object member #2', function () {
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/call-expression-of-object-member-2.js');
                var astTree = Nodes_1.Nodes.getProgramNode(NodeUtils_1.NodeUtils.convertCodeToStructure(code));
                expectedStackTraceData = [{
                    name: 'baz',
                    callee: getObjectFunctionExpressionByName(astTree, 'object', 'baz').body,
                    stackTrace: []
                }, {
                    name: 1,
                    callee: getObjectFunctionExpressionByName(astTree, 'object1', 1).body,
                    stackTrace: []
                }];
                stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
            });
            it('should return correct stack trace data', function () {
                chai_1.assert.deepEqual(stackTraceData, expectedStackTraceData);
            });
        });
        describe('variant #6: no call expressions', function () {
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/no-call-expressions.js');
                var astTree = Nodes_1.Nodes.getProgramNode(NodeUtils_1.NodeUtils.convertCodeToStructure(code));
                expectedStackTraceData = [];
                stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
            });
            it('should return correct stack trace data', function () {
                chai_1.assert.deepEqual(stackTraceData, expectedStackTraceData);
            });
        });
        describe('variant #7: only call expression', function () {
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/only-call-expression.js');
                var astTree = Nodes_1.Nodes.getProgramNode(NodeUtils_1.NodeUtils.convertCodeToStructure(code));
                expectedStackTraceData = [];
                stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
            });
            it('should return correct stack trace data', function () {
                chai_1.assert.deepEqual(stackTraceData, expectedStackTraceData);
            });
        });
        describe('variant #8: self-invoking functions', function () {
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/self-invoking-functions.js');
                var astTree = Nodes_1.Nodes.getProgramNode(NodeUtils_1.NodeUtils.convertCodeToStructure(code));
                expectedStackTraceData = [{
                    name: null,
                    callee: getFunctionExpressionById(astTree, 'foo').body,
                    stackTrace: [{
                        name: null,
                        callee: getFunctionExpressionById(astTree, 'bar').body,
                        stackTrace: [{
                            name: null,
                            callee: getFunctionExpressionById(astTree, 'baz').body,
                            stackTrace: [{
                                name: 'inner',
                                callee: getFunctionDeclarationByName(astTree, 'inner').body,
                                stackTrace: []
                            }]
                        }]
                    }]
                }];
                stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
            });
            it('should return correct stack trace data', function () {
                chai_1.assert.deepEqual(stackTraceData, expectedStackTraceData);
            });
        });
        describe('variant #9: no recursion', function () {
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/no-recursion.js');
                var astTree = Nodes_1.Nodes.getProgramNode(NodeUtils_1.NodeUtils.convertCodeToStructure(code));
                expectedStackTraceData = [{
                    name: 'bar',
                    callee: getFunctionExpressionByName(astTree, 'bar').body,
                    stackTrace: []
                }];
                stackTraceData = stackTraceAnalyzer.analyze(astTree.body);
            });
            it('should return correct stack trace data', function () {
                chai_1.assert.deepEqual(stackTraceData, expectedStackTraceData);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,