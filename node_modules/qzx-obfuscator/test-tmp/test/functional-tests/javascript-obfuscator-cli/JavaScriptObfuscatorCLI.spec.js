"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var mkdirp = require("mkdirp");
var sinon = require("sinon");
var chai_1 = require("chai");
var StdoutWriteMock_1 = require("../../mocks/StdoutWriteMock");
var JavaScriptObfuscator_1 = require("../../../src/JavaScriptObfuscator");
describe('JavaScriptObfuscatorCLI', function () {
    this.timeout(100000);
    var fixturesDirName = 'test/fixtures';
    var fixtureFileName = 'sample.js';
    var fixtureFilePath = fixturesDirName + "/" + fixtureFileName;
    var outputDirName = 'test/tmp';
    var outputFileName = 'sample-obfuscated.js';
    var outputFilePath = outputDirName + "/" + outputFileName;
    describe('run (): void', function () {
        before(function () {
            mkdirp.sync(outputDirName);
        });
        describe('`--output` option is set', function () {
            var isFileExist = void 0;
            before(function () {
                JavaScriptObfuscator_1.JavaScriptObfuscator.runCLI(['node', 'javascript-obfuscator', fixtureFilePath, '--output', outputFilePath, '--compact', 'true', '--selfDefending', '0']);
                isFileExist = fs.existsSync(outputFilePath);
            });
            it('should create file with obfuscated code in `--output` directory', function () {
                chai_1.assert.equal(isFileExist, true);
            });
            after(function () {
                fs.unlinkSync(outputFilePath);
            });
        });
        describe('`--output` option isn\'t set', function () {
            describe('variant #1: default behaviour', function () {
                var outputFixturesFilePath = void 0,
                    isFileExist = void 0;
                before(function () {
                    outputFixturesFilePath = fixturesDirName + "/" + outputFileName;
                    JavaScriptObfuscator_1.JavaScriptObfuscator.runCLI(['node', 'javascript-obfuscator', fixtureFilePath]);
                    isFileExist = fs.existsSync(outputFixturesFilePath);
                });
                it("should create file `" + outputFileName + "` with obfuscated code in `" + fixturesDirName + "` directory", function () {
                    chai_1.assert.equal(isFileExist, true);
                });
                after(function () {
                    fs.unlinkSync(outputFixturesFilePath);
                });
            });
            describe('variant #2: invalid input file path', function () {
                var expectedError = ReferenceError;
                var testFunc = void 0;
                before(function () {
                    testFunc = function testFunc() {
                        return JavaScriptObfuscator_1.JavaScriptObfuscator.runCLI(['node', 'javascript-obfuscator', 'wrong/file/path']);
                    };
                });
                it("should throw an error", function () {
                    chai_1.assert.throws(testFunc, expectedError);
                });
            });
            describe('variant #3: input file extension isn\'t `.js`', function () {
                var expectedError = ReferenceError;
                var outputFileName = 'sample-obfuscated.ts';
                var outputFilePath = outputDirName + "/" + outputFileName;
                var testFunc = void 0;
                before(function () {
                    fs.writeFileSync(outputFilePath, 'data');
                    testFunc = function testFunc() {
                        return JavaScriptObfuscator_1.JavaScriptObfuscator.runCLI(['node', 'javascript-obfuscator', outputFilePath]);
                    };
                });
                it("should throw an error", function () {
                    chai_1.assert.throws(testFunc, expectedError);
                });
                after(function () {
                    fs.unlinkSync(outputFilePath);
                });
            });
        });
        describe('`--sourceMap` option is set', function () {
            var outputSourceMapPath = outputFilePath + ".map";
            describe('variant #1: `--sourceMapMode` option value is `separate`', function () {
                describe('variant #1: default behaviour', function () {
                    var isFileExist = void 0,
                        sourceMapObject = void 0;
                    before(function () {
                        JavaScriptObfuscator_1.JavaScriptObfuscator.runCLI(['node', 'javascript-obfuscator', fixtureFilePath, '--output', outputFilePath, '--compact', 'true', '--selfDefending', '0', '--sourceMap', 'true']);
                        try {
                            var content = fs.readFileSync(outputSourceMapPath, { encoding: 'utf8' });
                            isFileExist = true;
                            sourceMapObject = JSON.parse(content);
                        } catch (e) {
                            isFileExist = false;
                        }
                    });
                    it('should create file with source map in the same directory as output file', function () {
                        chai_1.assert.equal(isFileExist, true);
                    });
                    it('source map from created file should contains property `version`', function () {
                        chai_1.assert.property(sourceMapObject, 'version');
                    });
                    it('source map from created file should contains property `sources`', function () {
                        chai_1.assert.property(sourceMapObject, 'sources');
                    });
                    it('source map from created file should contains property `names`', function () {
                        chai_1.assert.property(sourceMapObject, 'names');
                    });
                    after(function () {
                        fs.unlinkSync(outputFilePath);
                        fs.unlinkSync(outputSourceMapPath);
                    });
                });
                describe('variant #2: `sourceMapBaseUrl` option is set', function () {
                    var isFileExist = void 0,
                        sourceMapObject = void 0;
                    before(function () {
                        JavaScriptObfuscator_1.JavaScriptObfuscator.runCLI(['node', 'javascript-obfuscator', fixtureFilePath, '--output', outputFilePath, '--compact', 'true', '--selfDefending', '0', '--sourceMap', 'true', '--sourceMapBaseUrl', 'http://localhost:9000/']);
                        try {
                            var content = fs.readFileSync(outputSourceMapPath, { encoding: 'utf8' });
                            isFileExist = true;
                            sourceMapObject = JSON.parse(content);
                        } catch (e) {
                            isFileExist = false;
                        }
                    });
                    it('should create file with source map in the same directory as output file', function () {
                        chai_1.assert.equal(isFileExist, true);
                    });
                    it('source map from created file should contains property `version`', function () {
                        chai_1.assert.property(sourceMapObject, 'version');
                    });
                    it('source map from created file should contains property `sources`', function () {
                        chai_1.assert.property(sourceMapObject, 'sources');
                    });
                    it('source map from created file should contains property `names`', function () {
                        chai_1.assert.property(sourceMapObject, 'names');
                    });
                    after(function () {
                        fs.unlinkSync(outputFilePath);
                        fs.unlinkSync(outputSourceMapPath);
                    });
                });
                describe('variant #3: `--sourceMapFileName` option is set', function () {
                    var sourceMapFileName = 'test';
                    var sourceMapFilePath = sourceMapFileName + ".js.map";
                    var outputSourceMapFilePath = outputDirName + "/" + sourceMapFilePath;
                    var isFileExist = void 0,
                        sourceMapObject = void 0;
                    before(function () {
                        JavaScriptObfuscator_1.JavaScriptObfuscator.runCLI(['node', 'javascript-obfuscator', fixtureFilePath, '--output', outputFilePath, '--compact', 'true', '--selfDefending', '0', '--sourceMap', 'true', '--sourceMapFileName', sourceMapFileName]);
                        try {
                            var content = fs.readFileSync(outputSourceMapFilePath, { encoding: 'utf8' });
                            isFileExist = true;
                            sourceMapObject = JSON.parse(content);
                        } catch (e) {
                            isFileExist = false;
                        }
                    });
                    it('should create source map file with given name in the same directory as output file', function () {
                        chai_1.assert.equal(isFileExist, true);
                    });
                    it('source map from created file should contains property `version`', function () {
                        chai_1.assert.property(sourceMapObject, 'version');
                    });
                    it('source map from created file should contains property `sources`', function () {
                        chai_1.assert.property(sourceMapObject, 'sources');
                    });
                    it('source map from created file should contains property `names`', function () {
                        chai_1.assert.property(sourceMapObject, 'names');
                    });
                    after(function () {
                        fs.unlinkSync(outputFilePath);
                        fs.unlinkSync(outputSourceMapFilePath);
                    });
                });
            });
            describe('variant #2: `--sourceMapMode` option is `inline`', function () {
                var isFileExist = void 0;
                before(function () {
                    JavaScriptObfuscator_1.JavaScriptObfuscator.runCLI(['node', 'javascript-obfuscator', fixtureFilePath, '--output', outputFilePath, '--compact', 'true', '--selfDefending', '0', '--sourceMap', 'true', '--sourceMapMode', 'inline']);
                    isFileExist = fs.existsSync(outputSourceMapPath);
                });
                it('shouldn\'t create file with source map', function () {
                    chai_1.assert.equal(isFileExist, false);
                });
                after(function () {
                    fs.unlinkSync(outputFilePath);
                });
            });
        });
        describe('help output', function () {
            var callback = void 0,
                stdoutWriteMock = void 0;
            beforeEach(function () {
                callback = sinon.spy(console, 'log');
                stdoutWriteMock = new StdoutWriteMock_1.StdoutWriteMock(process.stdout.write);
            });
            describe('`--help` option is set', function () {
                var isConsoleLogCalled = void 0;
                beforeEach(function () {
                    stdoutWriteMock.mute();
                    JavaScriptObfuscator_1.JavaScriptObfuscator.runCLI(['node', 'javascript-obfuscator', fixtureFilePath, '--help']);
                    stdoutWriteMock.restore();
                    isConsoleLogCalled = callback.called;
                });
                it('should print `console.log` help', function () {
                    chai_1.assert.equal(isConsoleLogCalled, true);
                });
            });
            describe('no arguments passed', function () {
                var isConsoleLogCalled = void 0;
                beforeEach(function () {
                    stdoutWriteMock.mute();
                    JavaScriptObfuscator_1.JavaScriptObfuscator.runCLI(['node', 'javascript-obfuscator']);
                    stdoutWriteMock.restore();
                    isConsoleLogCalled = callback.called;
                });
                it('should print `console.log` help', function () {
                    chai_1.assert.equal(isConsoleLogCalled, true);
                });
            });
            afterEach(function () {
                callback.restore();
            });
        });
        after(function () {
            fs.rmdirSync(outputDirName);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,