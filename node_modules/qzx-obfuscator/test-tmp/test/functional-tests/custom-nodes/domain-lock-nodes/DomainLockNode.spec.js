"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../src/JavaScriptObfuscator");
describe('DomainLockNode', function () {
    var regExp = /var _0x([a-f0-9]){4,6} *= *new RegExp/;
    describe('`domainLock` option is set', function () {
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { domainLock: ['.example.com'] }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should correctly append custom node into the obfuscated code', function () {
            chai_1.assert.match(obfuscatedCode, regExp);
        });
    });
    describe('`domainLock` option isn\'t set', function () {
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { domainLock: [] }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('shouldn\'t append custom node into the obfuscated code', function () {
            chai_1.assert.notMatch(obfuscatedCode, regExp);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9tYWluTG9ja05vZGUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Rlc3QvZnVuY3Rpb25hbC10ZXN0cy9jdXN0b20tbm9kZXMvZG9tYWluLWxvY2stbm9kZXMvRG9tYWluTG9ja05vZGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQkFBOEI7QUFJOUIsOEJBQXVGO0FBRXZGLGlDQUFxRTtBQUVyRSxxQ0FBNEU7QUFFNUUsQUFBUSxTQUFDLEFBQWdCLGtCQUFFO0FBQ3ZCLFFBQU0sQUFBTSxTQUFXLEFBQXVDLEFBQUM7QUFFL0QsQUFBUSxhQUFDLEFBQTRCLDhCQUFFO0FBQ25DLFlBQUksQUFBc0IsQUFBQztBQUUzQixBQUFNLGVBQUM7QUFDSCxnQkFBTSxBQUFJLE9BQVcsbUJBQWdCLGlCQUFDLEFBQVMsWUFBRyxBQUEyQixBQUFDLEFBQUM7QUFDL0UsZ0JBQU0sQUFBaUIsb0JBQXVCLHVCQUFvQixxQkFBQyxBQUFTLFVBQ3hFLEFBQUksd0JBRUcsZ0JBQXNCLDBCQUN6QixBQUFVLFlBQUUsQ0FBQyxBQUFjLEFBQUMsQUFFbkMsQUFBQztBQUVGLEFBQWMsNkJBQUcsQUFBaUIsa0JBQUMsQUFBaUIsQUFBRSxBQUFDLEFBQzNEO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxXQUFDLEFBQThELGdFQUFFO0FBQy9ELG1CQUFNLE9BQUMsQUFBSyxNQUFDLEFBQWMsZ0JBQUUsQUFBTSxBQUFDLEFBQUMsQUFDekM7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQVEsYUFBQyxBQUFnQyxrQ0FBRTtBQUN2QyxZQUFJLEFBQXNCLEFBQUM7QUFFM0IsQUFBTSxlQUFDO0FBQ0gsZ0JBQU0sQUFBSSxPQUFXLG1CQUFnQixpQkFBQyxBQUFTLFlBQUcsQUFBMkIsQUFBQyxBQUFDO0FBQy9FLGdCQUFNLEFBQWlCLG9CQUF1Qix1QkFBb0IscUJBQUMsQUFBUyxVQUN4RSxBQUFJLHdCQUVHLGdCQUFzQiwwQkFDekIsQUFBVSxZQUFFLEFBQUUsQUFFckIsQUFBQztBQUVGLEFBQWMsNkJBQUcsQUFBaUIsa0JBQUMsQUFBaUIsQUFBRSxBQUFDLEFBQzNEO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxXQUFDLEFBQXdELDBEQUFFO0FBQ3pELG1CQUFNLE9BQUMsQUFBUSxTQUFDLEFBQWMsZ0JBQUUsQUFBTSxBQUFDLEFBQUMsQUFDNUM7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnY2hhaSc7XG5cbmltcG9ydCB7IElPYmZ1c2NhdGlvblJlc3VsdCB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9pbnRlcmZhY2VzL0lPYmZ1c2NhdGlvblJlc3VsdCc7XG5cbmltcG9ydCB7IE5PX0NVU1RPTV9OT0RFU19QUkVTRVQgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvb3B0aW9ucy9wcmVzZXRzL05vQ3VzdG9tTm9kZXMnO1xuXG5pbXBvcnQgeyByZWFkRmlsZUFzU3RyaW5nIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9yZWFkRmlsZUFzU3RyaW5nJztcblxuaW1wb3J0IHsgSmF2YVNjcmlwdE9iZnVzY2F0b3IgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvSmF2YVNjcmlwdE9iZnVzY2F0b3InO1xuXG5kZXNjcmliZSgnRG9tYWluTG9ja05vZGUnLCAoKSA9PiB7XG4gICAgY29uc3QgcmVnRXhwOiBSZWdFeHAgPSAvdmFyIF8weChbYS1mMC05XSl7NCw2fSAqPSAqbmV3IFJlZ0V4cC87XG5cbiAgICBkZXNjcmliZSgnYGRvbWFpbkxvY2tgIG9wdGlvbiBpcyBzZXQnLCAoKSA9PiB7XG4gICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTogc3RyaW5nO1xuXG4gICAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb2RlOiBzdHJpbmcgPSByZWFkRmlsZUFzU3RyaW5nKF9fZGlybmFtZSArICcvZml4dHVyZXMvc2ltcGxlLWlucHV0LmpzJyk7XG4gICAgICAgICAgICBjb25zdCBvYmZ1c2NhdGlvblJlc3VsdDogSU9iZnVzY2F0aW9uUmVzdWx0ID0gSmF2YVNjcmlwdE9iZnVzY2F0b3Iub2JmdXNjYXRlKFxuICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAuLi5OT19DVVNUT01fTk9ERVNfUFJFU0VULFxuICAgICAgICAgICAgICAgICAgICBkb21haW5Mb2NrOiBbJy5leGFtcGxlLmNvbSddXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgb2JmdXNjYXRlZENvZGUgPSBvYmZ1c2NhdGlvblJlc3VsdC5nZXRPYmZ1c2NhdGVkQ29kZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGNvcnJlY3RseSBhcHBlbmQgY3VzdG9tIG5vZGUgaW50byB0aGUgb2JmdXNjYXRlZCBjb2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0ZWRDb2RlLCByZWdFeHApO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdgZG9tYWluTG9ja2Agb3B0aW9uIGlzblxcJ3Qgc2V0JywgKCkgPT4ge1xuICAgICAgICBsZXQgb2JmdXNjYXRlZENvZGU6IHN0cmluZztcblxuICAgICAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL3NpbXBsZS1pbnB1dC5qcycpO1xuICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVCxcbiAgICAgICAgICAgICAgICAgICAgZG9tYWluTG9jazogW11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGRuXFwndCBhcHBlbmQgY3VzdG9tIG5vZGUgaW50byB0aGUgb2JmdXNjYXRlZCBjb2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0Lm5vdE1hdGNoKG9iZnVzY2F0ZWRDb2RlLCByZWdFeHApO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl19