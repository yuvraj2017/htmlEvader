"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../src/JavaScriptObfuscator");
describe('ConsoleOutputDisableExpressionNode', function () {
    var consoleLogRegExp = /_0x([0-9a-f]){4,6}\['console'\]\['log'\] *= *_0x([0-9a-f]){4,6};/;
    var consoleErrorRegExp = /_0x([0-9a-f]){4,6}\['console'\]\['error'\] *= *_0x([0-9a-f]){4,6};/;
    var consoleWarnRegExp = /_0x([0-9a-f]){4,6}\['console'\]\['warn'\] *= *_0x([0-9a-f]){4,6};/;
    describe('`disableConsoleOutput` option is set', function () {
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { disableConsoleOutput: true }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('match #1: should correctly append custom node into the obfuscated code', function () {
            chai_1.assert.match(obfuscatedCode, consoleLogRegExp);
        });
        it('match #2: should correctly append custom node into the obfuscated code', function () {
            chai_1.assert.match(obfuscatedCode, consoleErrorRegExp);
        });
        it('match #3: should correctly append custom node into the obfuscated code', function () {
            chai_1.assert.match(obfuscatedCode, consoleWarnRegExp);
        });
    });
    describe('`disableConsoleOutput` option isn\'t set', function () {
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { disableConsoleOutput: false }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('match #1: shouldn\'t append custom node into the obfuscated code', function () {
            chai_1.assert.notMatch(obfuscatedCode, consoleLogRegExp);
        });
        it('match #2: shouldn\'t append custom node into the obfuscated code', function () {
            chai_1.assert.notMatch(obfuscatedCode, consoleErrorRegExp);
        });
        it('match #3: shouldn\'t append custom node into the obfuscated code', function () {
            chai_1.assert.notMatch(obfuscatedCode, consoleWarnRegExp);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uc29sZU91dHB1dERpc2FibGVFeHByZXNzaW9uTm9kZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGVzdC9mdW5jdGlvbmFsLXRlc3RzL2N1c3RvbS1ub2Rlcy9jb25zb2xlLW91dHB1dC1ub2Rlcy9Db25zb2xlT3V0cHV0RGlzYWJsZUV4cHJlc3Npb25Ob2RlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUJBQThCO0FBSTlCLDhCQUF1RjtBQUV2RixpQ0FBcUU7QUFFckUscUNBQTRFO0FBRTVFLEFBQVEsU0FBQyxBQUFvQyxzQ0FBRTtBQUMzQyxRQUFNLEFBQWdCLG1CQUFXLEFBQW1FLEFBQUM7QUFDckcsUUFBTSxBQUFrQixxQkFBVyxBQUFxRSxBQUFDO0FBQ3pHLFFBQU0sQUFBaUIsb0JBQVcsQUFBb0UsQUFBQztBQUV2RyxBQUFRLGFBQUMsQUFBc0Msd0NBQUU7QUFDN0MsWUFBSSxBQUFzQixBQUFDO0FBRTNCLEFBQU0sZUFBQztBQUNILGdCQUFNLEFBQUksT0FBVyxtQkFBZ0IsaUJBQUMsQUFBUyxZQUFHLEFBQTJCLEFBQUMsQUFBQztBQUMvRSxnQkFBTSxBQUFpQixvQkFBdUIsdUJBQW9CLHFCQUFDLEFBQVMsVUFDeEUsQUFBSSx3QkFFRyxnQkFBc0IsMEJBQ3pCLEFBQW9CLHNCQUFFLEFBQUksQUFFakMsQUFBQztBQUVGLEFBQWMsNkJBQUcsQUFBaUIsa0JBQUMsQUFBaUIsQUFBRSxBQUFDLEFBQzNEO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxXQUFDLEFBQXdFLDBFQUFFO0FBQ3pFLG1CQUFNLE9BQUMsQUFBSyxNQUFDLEFBQWMsZ0JBQUUsQUFBZ0IsQUFBQyxBQUFDLEFBQ25EO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxXQUFDLEFBQXdFLDBFQUFFO0FBQ3pFLG1CQUFNLE9BQUMsQUFBSyxNQUFDLEFBQWMsZ0JBQUUsQUFBa0IsQUFBQyxBQUFDLEFBQ3JEO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxXQUFDLEFBQXdFLDBFQUFFO0FBQ3pFLG1CQUFNLE9BQUMsQUFBSyxNQUFDLEFBQWMsZ0JBQUUsQUFBaUIsQUFBQyxBQUFDLEFBQ3BEO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGFBQUMsQUFBMEMsNENBQUU7QUFDakQsWUFBSSxBQUFzQixBQUFDO0FBRTNCLEFBQU0sZUFBQztBQUNILGdCQUFNLEFBQUksT0FBVyxtQkFBZ0IsaUJBQUMsQUFBUyxZQUFHLEFBQTJCLEFBQUMsQUFBQztBQUMvRSxnQkFBTSxBQUFpQixvQkFBdUIsdUJBQW9CLHFCQUFDLEFBQVMsVUFDeEUsQUFBSSx3QkFFRyxnQkFBc0IsMEJBQ3pCLEFBQW9CLHNCQUFFLEFBQUssQUFFbEMsQUFBQztBQUVGLEFBQWMsNkJBQUcsQUFBaUIsa0JBQUMsQUFBaUIsQUFBRSxBQUFDLEFBQzNEO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxXQUFDLEFBQWtFLG9FQUFFO0FBQ25FLG1CQUFNLE9BQUMsQUFBUSxTQUFDLEFBQWMsZ0JBQUUsQUFBZ0IsQUFBQyxBQUFDLEFBQ3REO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxXQUFDLEFBQWtFLG9FQUFFO0FBQ25FLG1CQUFNLE9BQUMsQUFBUSxTQUFDLEFBQWMsZ0JBQUUsQUFBa0IsQUFBQyxBQUFDLEFBQ3hEO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxXQUFDLEFBQWtFLG9FQUFFO0FBQ25FLG1CQUFNLE9BQUMsQUFBUSxTQUFDLEFBQWMsZ0JBQUUsQUFBaUIsQUFBQyxBQUFDLEFBQ3ZEO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydCB9IGZyb20gJ2NoYWknO1xuXG5pbXBvcnQgeyBJT2JmdXNjYXRpb25SZXN1bHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvaW50ZXJmYWNlcy9JT2JmdXNjYXRpb25SZXN1bHQnO1xuXG5pbXBvcnQgeyBOT19DVVNUT01fTk9ERVNfUFJFU0VUIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL29wdGlvbnMvcHJlc2V0cy9Ob0N1c3RvbU5vZGVzJztcblxuaW1wb3J0IHsgcmVhZEZpbGVBc1N0cmluZyB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvcmVhZEZpbGVBc1N0cmluZyc7XG5cbmltcG9ydCB7IEphdmFTY3JpcHRPYmZ1c2NhdG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL0phdmFTY3JpcHRPYmZ1c2NhdG9yJztcblxuZGVzY3JpYmUoJ0NvbnNvbGVPdXRwdXREaXNhYmxlRXhwcmVzc2lvbk5vZGUnLCAoKSA9PiB7XG4gICAgY29uc3QgY29uc29sZUxvZ1JlZ0V4cDogUmVnRXhwID0gL18weChbYS1mMC05XSl7NCw2fVxcWydjb25zb2xlJ1xcXVxcWydsb2cnXFxdICo9ICpfMHgoW2EtZjAtOV0pezQsNn07L3U7XG4gICAgY29uc3QgY29uc29sZUVycm9yUmVnRXhwOiBSZWdFeHAgPSAvXzB4KFthLWYwLTldKXs0LDZ9XFxbJ2NvbnNvbGUnXFxdXFxbJ2Vycm9yJ1xcXSAqPSAqXzB4KFthLWYwLTldKXs0LDZ9Oy91O1xuICAgIGNvbnN0IGNvbnNvbGVXYXJuUmVnRXhwOiBSZWdFeHAgPSAvXzB4KFthLWYwLTldKXs0LDZ9XFxbJ2NvbnNvbGUnXFxdXFxbJ3dhcm4nXFxdICo9ICpfMHgoW2EtZjAtOV0pezQsNn07L3U7XG5cbiAgICBkZXNjcmliZSgnYGRpc2FibGVDb25zb2xlT3V0cHV0YCBvcHRpb24gaXMgc2V0JywgKCkgPT4ge1xuICAgICAgICBsZXQgb2JmdXNjYXRlZENvZGU6IHN0cmluZztcblxuICAgICAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL3NpbXBsZS1pbnB1dC5qcycpO1xuICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVCxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUNvbnNvbGVPdXRwdXQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdtYXRjaCAjMTogc2hvdWxkIGNvcnJlY3RseSBhcHBlbmQgY3VzdG9tIG5vZGUgaW50byB0aGUgb2JmdXNjYXRlZCBjb2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0ZWRDb2RlLCBjb25zb2xlTG9nUmVnRXhwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ21hdGNoICMyOiBzaG91bGQgY29ycmVjdGx5IGFwcGVuZCBjdXN0b20gbm9kZSBpbnRvIHRoZSBvYmZ1c2NhdGVkIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQubWF0Y2gob2JmdXNjYXRlZENvZGUsIGNvbnNvbGVFcnJvclJlZ0V4cCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdtYXRjaCAjMzogc2hvdWxkIGNvcnJlY3RseSBhcHBlbmQgY3VzdG9tIG5vZGUgaW50byB0aGUgb2JmdXNjYXRlZCBjb2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0ZWRDb2RlLCBjb25zb2xlV2FyblJlZ0V4cCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2BkaXNhYmxlQ29uc29sZU91dHB1dGAgb3B0aW9uIGlzblxcJ3Qgc2V0JywgKCkgPT4ge1xuICAgICAgICBsZXQgb2JmdXNjYXRlZENvZGU6IHN0cmluZztcblxuICAgICAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL3NpbXBsZS1pbnB1dC5qcycpO1xuICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVCxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUNvbnNvbGVPdXRwdXQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgb2JmdXNjYXRlZENvZGUgPSBvYmZ1c2NhdGlvblJlc3VsdC5nZXRPYmZ1c2NhdGVkQ29kZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnbWF0Y2ggIzE6IHNob3VsZG5cXCd0IGFwcGVuZCBjdXN0b20gbm9kZSBpbnRvIHRoZSBvYmZ1c2NhdGVkIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQubm90TWF0Y2gob2JmdXNjYXRlZENvZGUsIGNvbnNvbGVMb2dSZWdFeHApO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnbWF0Y2ggIzI6IHNob3VsZG5cXCd0IGFwcGVuZCBjdXN0b20gbm9kZSBpbnRvIHRoZSBvYmZ1c2NhdGVkIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQubm90TWF0Y2gob2JmdXNjYXRlZENvZGUsIGNvbnNvbGVFcnJvclJlZ0V4cCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdtYXRjaCAjMzogc2hvdWxkblxcJ3QgYXBwZW5kIGN1c3RvbSBub2RlIGludG8gdGhlIG9iZnVzY2F0ZWQgY29kZScsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5ub3RNYXRjaChvYmZ1c2NhdGVkQ29kZSwgY29uc29sZVdhcm5SZWdFeHApO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl19