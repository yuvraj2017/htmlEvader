"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../src/JavaScriptObfuscator");
describe('StringArrayNode', function () {
    var regExp = /^var _0x([a-f0-9]){4} *= *\[/;
    describe('`stringArray` option is set', function () {
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should correctly append custom node into the obfuscated code', function () {
            chai_1.assert.match(obfuscatedCode, regExp);
        });
    });
    describe('`stringArray` option isn\'t set', function () {
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: false }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('shouldn\'t append custom node into the obfuscated code', function () {
            chai_1.assert.notMatch(obfuscatedCode, regExp);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyaW5nQXJyYXlOb2RlLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZXN0L2Z1bmN0aW9uYWwtdGVzdHMvY3VzdG9tLW5vZGVzL3N0cmluZy1hcnJheS1ub2Rlcy9TdHJpbmdBcnJheU5vZGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQkFBOEI7QUFJOUIsOEJBQXVGO0FBRXZGLGlDQUFxRTtBQUVyRSxxQ0FBNEU7QUFFNUUsQUFBUSxTQUFDLEFBQWlCLG1CQUFFO0FBQ3hCLFFBQU0sQUFBTSxTQUFXLEFBQThCLEFBQUM7QUFFdEQsQUFBUSxhQUFDLEFBQTZCLCtCQUFFO0FBQ3BDLFlBQUksQUFBc0IsQUFBQztBQUUzQixBQUFNLGVBQUM7QUFDSCxnQkFBTSxBQUFJLE9BQVcsbUJBQWdCLGlCQUFDLEFBQVMsWUFBRyxBQUEyQixBQUFDLEFBQUM7QUFFL0UsZ0JBQUksQUFBaUIsb0JBQXVCLHVCQUFvQixxQkFBQyxBQUFTLFVBQ3RFLEFBQUksd0JBRUcsZ0JBQXNCLDBCQUN6QixBQUFXLGFBQUUsQUFBSSxNQUNqQixBQUFvQixzQkFBRSxBQUFDLEFBRTlCLEFBQUM7QUFFRixBQUFjLDZCQUFHLEFBQWlCLGtCQUFDLEFBQWlCLEFBQUUsQUFBQyxBQUMzRDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsV0FBQyxBQUE4RCxnRUFBRTtBQUMvRCxtQkFBTSxPQUFDLEFBQUssTUFBQyxBQUFjLGdCQUFFLEFBQU0sQUFBQyxBQUFDLEFBQ3pDO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGFBQUMsQUFBaUMsbUNBQUU7QUFDeEMsWUFBSSxBQUFzQixBQUFDO0FBRTNCLEFBQU0sZUFBQztBQUNILGdCQUFNLEFBQUksT0FBVyxtQkFBZ0IsaUJBQUMsQUFBUyxZQUFHLEFBQTJCLEFBQUMsQUFBQztBQUUvRSxnQkFBSSxBQUFpQixvQkFBdUIsdUJBQW9CLHFCQUFDLEFBQVMsVUFDdEUsQUFBSSx3QkFFRyxnQkFBc0IsMEJBQ3pCLEFBQVcsYUFBRSxBQUFLLEFBRXpCLEFBQUM7QUFFRixBQUFjLDZCQUFHLEFBQWlCLGtCQUFDLEFBQWlCLEFBQUUsQUFBQyxBQUMzRDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsV0FBQyxBQUF3RCwwREFBRTtBQUN6RCxtQkFBTSxPQUFDLEFBQVEsU0FBQyxBQUFjLGdCQUFFLEFBQU0sQUFBQyxBQUFDLEFBQzVDO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydCB9IGZyb20gJ2NoYWknO1xuXG5pbXBvcnQgeyBJT2JmdXNjYXRpb25SZXN1bHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvaW50ZXJmYWNlcy9JT2JmdXNjYXRpb25SZXN1bHQnO1xuXG5pbXBvcnQgeyBOT19DVVNUT01fTk9ERVNfUFJFU0VUIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL29wdGlvbnMvcHJlc2V0cy9Ob0N1c3RvbU5vZGVzJztcblxuaW1wb3J0IHsgcmVhZEZpbGVBc1N0cmluZyB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvcmVhZEZpbGVBc1N0cmluZyc7XG5cbmltcG9ydCB7IEphdmFTY3JpcHRPYmZ1c2NhdG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL0phdmFTY3JpcHRPYmZ1c2NhdG9yJztcblxuZGVzY3JpYmUoJ1N0cmluZ0FycmF5Tm9kZScsICgpID0+IHtcbiAgICBjb25zdCByZWdFeHA6IFJlZ0V4cCA9IC9edmFyIF8weChbYS1mMC05XSl7NH0gKj0gKlxcWy87XG5cbiAgICBkZXNjcmliZSgnYHN0cmluZ0FycmF5YCBvcHRpb24gaXMgc2V0JywgKCkgPT4ge1xuICAgICAgICBsZXQgb2JmdXNjYXRlZENvZGU6IHN0cmluZztcblxuICAgICAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL3NpbXBsZS1pbnB1dC5qcycpO1xuXG4gICAgICAgICAgICBsZXQgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVCxcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nQXJyYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ0FycmF5VGhyZXNob2xkOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgb2JmdXNjYXRlZENvZGUgPSBvYmZ1c2NhdGlvblJlc3VsdC5nZXRPYmZ1c2NhdGVkQ29kZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGNvcnJlY3RseSBhcHBlbmQgY3VzdG9tIG5vZGUgaW50byB0aGUgb2JmdXNjYXRlZCBjb2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0ZWRDb2RlLCByZWdFeHApO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdgc3RyaW5nQXJyYXlgIG9wdGlvbiBpc25cXCd0IHNldCcsICgpID0+IHtcbiAgICAgICAgbGV0IG9iZnVzY2F0ZWRDb2RlOiBzdHJpbmc7XG5cbiAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGU6IHN0cmluZyA9IHJlYWRGaWxlQXNTdHJpbmcoX19kaXJuYW1lICsgJy9maXh0dXJlcy9zaW1wbGUtaW5wdXQuanMnKTtcblxuICAgICAgICAgICAgbGV0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoXG4gICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC4uLk5PX0NVU1RPTV9OT0RFU19QUkVTRVQsXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ0FycmF5OiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlID0gb2JmdXNjYXRpb25SZXN1bHQuZ2V0T2JmdXNjYXRlZENvZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZG5cXCd0IGFwcGVuZCBjdXN0b20gbm9kZSBpbnRvIHRoZSBvYmZ1c2NhdGVkIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQubm90TWF0Y2gob2JmdXNjYXRlZENvZGUsIHJlZ0V4cCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXX0=