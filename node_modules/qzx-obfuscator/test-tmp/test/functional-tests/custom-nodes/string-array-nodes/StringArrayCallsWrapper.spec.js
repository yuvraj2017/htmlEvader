"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../src/JavaScriptObfuscator");
describe('StringArrayCallsWrapper', function () {
    var regExp = /_0x([a-f0-9]){4,6} *= *_0x([a-f0-9]){4,6} *- *0x0\;/;
    describe('`stringArray` option is set', function () {
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should correctly append custom node into the obfuscated code', function () {
            chai_1.assert.match(obfuscatedCode, regExp);
        });
    });
    describe('`stringArray` option isn\'t set', function () {
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: false }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('shouldn\'t append custom node into the obfuscated code', function () {
            chai_1.assert.notMatch(obfuscatedCode, regExp);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyaW5nQXJyYXlDYWxsc1dyYXBwZXIuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Rlc3QvZnVuY3Rpb25hbC10ZXN0cy9jdXN0b20tbm9kZXMvc3RyaW5nLWFycmF5LW5vZGVzL1N0cmluZ0FycmF5Q2FsbHNXcmFwcGVyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUJBQThCO0FBSTlCLDhCQUF1RjtBQUV2RixpQ0FBcUU7QUFFckUscUNBQTRFO0FBRTVFLEFBQVEsU0FBQyxBQUF5QiwyQkFBRTtBQUNoQyxRQUFNLEFBQU0sU0FBVyxBQUFxRCxBQUFDO0FBRTdFLEFBQVEsYUFBQyxBQUE2QiwrQkFBRTtBQUNwQyxZQUFJLEFBQXNCLEFBQUM7QUFFM0IsQUFBTSxlQUFDO0FBQ0gsZ0JBQU0sQUFBSSxPQUFXLG1CQUFnQixpQkFBQyxBQUFTLFlBQUcsQUFBMkIsQUFBQyxBQUFDO0FBRS9FLGdCQUFJLEFBQWlCLG9CQUF1Qix1QkFBb0IscUJBQUMsQUFBUyxVQUN0RSxBQUFJLHdCQUVHLGdCQUFzQiwwQkFDekIsQUFBVyxhQUFFLEFBQUksTUFDakIsQUFBb0Isc0JBQUUsQUFBQyxBQUU5QixBQUFDO0FBRUYsQUFBYyw2QkFBRyxBQUFpQixrQkFBQyxBQUFpQixBQUFFLEFBQUMsQUFDM0Q7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBOEQsZ0VBQUU7QUFDL0QsbUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBYyxnQkFBRSxBQUFNLEFBQUMsQUFBQyxBQUN6QztBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBUSxhQUFDLEFBQWlDLG1DQUFFO0FBQ3hDLFlBQUksQUFBc0IsQUFBQztBQUUzQixBQUFNLGVBQUM7QUFDSCxnQkFBTSxBQUFJLE9BQVcsbUJBQWdCLGlCQUFDLEFBQVMsWUFBRyxBQUEyQixBQUFDLEFBQUM7QUFFL0UsZ0JBQUksQUFBaUIsb0JBQXVCLHVCQUFvQixxQkFBQyxBQUFTLFVBQ3RFLEFBQUksd0JBRUcsZ0JBQXNCLDBCQUN6QixBQUFXLGFBQUUsQUFBSyxBQUV6QixBQUFDO0FBRUYsQUFBYyw2QkFBRyxBQUFpQixrQkFBQyxBQUFpQixBQUFFLEFBQUMsQUFDM0Q7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBd0QsMERBQUU7QUFDekQsbUJBQU0sT0FBQyxBQUFRLFNBQUMsQUFBYyxnQkFBRSxBQUFNLEFBQUMsQUFBQyxBQUM1QztBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQgfSBmcm9tICdjaGFpJztcblxuaW1wb3J0IHsgSU9iZnVzY2F0aW9uUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2ludGVyZmFjZXMvSU9iZnVzY2F0aW9uUmVzdWx0JztcblxuaW1wb3J0IHsgTk9fQ1VTVE9NX05PREVTX1BSRVNFVCB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9vcHRpb25zL3ByZXNldHMvTm9DdXN0b21Ob2Rlcyc7XG5cbmltcG9ydCB7IHJlYWRGaWxlQXNTdHJpbmcgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL3JlYWRGaWxlQXNTdHJpbmcnO1xuXG5pbXBvcnQgeyBKYXZhU2NyaXB0T2JmdXNjYXRvciB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9KYXZhU2NyaXB0T2JmdXNjYXRvcic7XG5cbmRlc2NyaWJlKCdTdHJpbmdBcnJheUNhbGxzV3JhcHBlcicsICgpID0+IHtcbiAgICBjb25zdCByZWdFeHA6IFJlZ0V4cCA9IC9fMHgoW2EtZjAtOV0pezQsNn0gKj0gKl8weChbYS1mMC05XSl7NCw2fSAqLSAqMHgwXFw7LztcblxuICAgIGRlc2NyaWJlKCdgc3RyaW5nQXJyYXlgIG9wdGlvbiBpcyBzZXQnLCAoKSA9PiB7XG4gICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTogc3RyaW5nO1xuXG4gICAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb2RlOiBzdHJpbmcgPSByZWFkRmlsZUFzU3RyaW5nKF9fZGlybmFtZSArICcvZml4dHVyZXMvc2ltcGxlLWlucHV0LmpzJyk7XG5cbiAgICAgICAgICAgIGxldCBvYmZ1c2NhdGlvblJlc3VsdDogSU9iZnVzY2F0aW9uUmVzdWx0ID0gSmF2YVNjcmlwdE9iZnVzY2F0b3Iub2JmdXNjYXRlKFxuICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAuLi5OT19DVVNUT01fTk9ERVNfUFJFU0VULFxuICAgICAgICAgICAgICAgICAgICBzdHJpbmdBcnJheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nQXJyYXlUaHJlc2hvbGQ6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgY29ycmVjdGx5IGFwcGVuZCBjdXN0b20gbm9kZSBpbnRvIHRoZSBvYmZ1c2NhdGVkIGNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQubWF0Y2gob2JmdXNjYXRlZENvZGUsIHJlZ0V4cCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2BzdHJpbmdBcnJheWAgb3B0aW9uIGlzblxcJ3Qgc2V0JywgKCkgPT4ge1xuICAgICAgICBsZXQgb2JmdXNjYXRlZENvZGU6IHN0cmluZztcblxuICAgICAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL3NpbXBsZS1pbnB1dC5qcycpO1xuXG4gICAgICAgICAgICBsZXQgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVCxcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nQXJyYXk6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgb2JmdXNjYXRlZENvZGUgPSBvYmZ1c2NhdGlvblJlc3VsdC5nZXRPYmZ1c2NhdGVkQ29kZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkblxcJ3QgYXBwZW5kIGN1c3RvbSBub2RlIGludG8gdGhlIG9iZnVzY2F0ZWQgY29kZScsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5ub3RNYXRjaChvYmZ1c2NhdGVkQ29kZSwgcmVnRXhwKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==