"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../src/JavaScriptObfuscator");
describe('DeadCodeInjectionTransformer', function () {
    var variableMatch = '_0x([a-f0-9]){4,6}';
    var hexMatch = '0x[a-f0-9]';
    describe('transformNode (programNode: ESTree.Program, parentNode: ESTree.Node): ESTree.Node', function () {
        this.timeout(100000);
        describe('variant #1 - 5 simple block statements', function () {
            var regExp = new RegExp("if *\\(" + variableMatch + "\\('" + hexMatch + "'\\) *[=|!]== *" + variableMatch + "\\('" + hexMatch + "'\\)\\) *\\{" + ("console\\[" + variableMatch + "\\('" + hexMatch + "'\\)\\]\\(" + variableMatch + "\\('" + hexMatch + "'\\)\\);") + "\\} *else *\\{" + ("console\\[" + variableMatch + "\\('" + hexMatch + "'\\)\\]\\(" + variableMatch + "\\('" + hexMatch + "'\\)\\);") + "\\}", 'g');
            var expectedMatchesLength = 5;
            var matchesLength = 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input-1.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { deadCodeInjection: true, deadCodeInjectionThreshold: 1, stringArray: true, stringArrayThreshold: 1 }));
                var obfuscatedCode = obfuscationResult.getObfuscatedCode();
                var matches = obfuscatedCode.match(regExp);
                if (matches) {
                    matchesLength = matches.length;
                }
            });
            it('should replace block statements with condition with original block statements and dead code', function () {
                chai_1.assert.equal(matchesLength, expectedMatchesLength);
            });
        });
        describe('variant #2 - block statements count is less than `5`', function () {
            var regexp = new RegExp("var *" + variableMatch + " *= *function *\\(\\) *\\{" + ("console\\[" + variableMatch + "\\('" + hexMatch + "'\\)\\]\\(" + variableMatch + "\\('" + hexMatch + "'\\)\\);") + "\\};", 'g');
            var expectedMatchesLength = 4;
            var matchesLength = 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/block-statements-min-count.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { deadCodeInjection: true, deadCodeInjectionThreshold: 1, stringArray: true, stringArrayThreshold: 1 }));
                var obfuscatedCode = obfuscationResult.getObfuscatedCode();
                var matches = obfuscatedCode.match(regexp);
                if (matches) {
                    matchesLength = matches.length;
                }
            });
            it('shouldn\'t add dead code', function () {
                chai_1.assert.equal(matchesLength, expectedMatchesLength);
            });
        });
        describe('variant #3 - deadCodeInjectionThreshold: 0', function () {
            var regexp = new RegExp("var *" + variableMatch + " *= *function *\\(\\) *\\{" + ("console\\[" + variableMatch + "\\('" + hexMatch + "'\\)\\]\\(" + variableMatch + "\\('" + hexMatch + "'\\)\\);") + "\\};", 'g');
            var expectedMatchesLength = 5;
            var matchesLength = 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input-1.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { deadCodeInjection: true, deadCodeInjectionThreshold: 0, stringArray: true, stringArrayThreshold: 1 }));
                var obfuscatedCode = obfuscationResult.getObfuscatedCode();
                var matches = obfuscatedCode.match(regexp);
                if (matches) {
                    matchesLength = matches.length;
                }
            });
            it('shouldn\'t add dead code', function () {
                chai_1.assert.equal(matchesLength, expectedMatchesLength);
            });
        });
        describe('variant #4 - break or continue statement in block statement', function () {
            var functionRegExp = new RegExp("var *" + variableMatch + " *= *function *\\(\\) *\\{" + ("console\\[" + variableMatch + "\\('" + hexMatch + "'\\)\\]\\(" + variableMatch + "\\('" + hexMatch + "'\\)\\);") + "\\};", 'g');
            var loopRegExp = new RegExp("for *\\(var *" + variableMatch + " *= *" + hexMatch + "; *" + variableMatch + " *< *" + hexMatch + "; *" + variableMatch + "\\+\\+\\) *\\{" + "(?:continue|break);" + "\\}", 'g');
            var expectedFunctionMatchesLength = 4;
            var expectedLoopMatchesLength = 2;
            var functionMatchesLength = 0,
                loopMatchesLength = 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/break-continue-statement.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { deadCodeInjection: true, deadCodeInjectionThreshold: 1, stringArray: true, stringArrayThreshold: 1 }));
                var obfuscatedCode = obfuscationResult.getObfuscatedCode();
                var functionMatches = obfuscatedCode.match(functionRegExp);
                var loopMatches = obfuscatedCode.match(loopRegExp);
                if (functionMatches) {
                    functionMatchesLength = functionMatches.length;
                }
                if (loopMatches) {
                    loopMatchesLength = loopMatches.length;
                }
            });
            it('match #1: shouldn\'t add dead code', function () {
                chai_1.assert.equal(functionMatchesLength, expectedFunctionMatchesLength);
            });
            it('match #2: shouldn\'t add dead code', function () {
                chai_1.assert.equal(loopMatchesLength, expectedLoopMatchesLength);
            });
        });
        describe('variant #5 - chance of `IfStatement` variant', function () {
            var samplesCount = 1000;
            var delta = 0.1;
            var expectedDistribution = 0.25;
            var ifMatch = "if *\\(!!\\[\\]\\) *\\{";
            var functionMatch = "var *" + variableMatch + " *= *function *\\(\\) *\\{";
            var match1 = "" + ("if *\\(" + variableMatch + "\\('" + hexMatch + "'\\) *=== *" + variableMatch + "\\('" + hexMatch + "'\\)\\) *\\{") + "console.*" + "\\} *else *\\{" + (variableMatch + ".*") + "\\}" + "";
            var match2 = "" + ("if *\\(" + variableMatch + "\\('" + hexMatch + "'\\) *!== *" + variableMatch + "\\('" + hexMatch + "'\\)\\) *\\{") + "console.*" + "\\} *else *\\{" + (variableMatch + ".*") + "\\}" + "";
            var match3 = "" + ("if *\\(" + variableMatch + "\\('" + hexMatch + "'\\) *=== *" + variableMatch + "\\('" + hexMatch + "'\\)\\) *\\{") + (variableMatch + ".*") + "\\} *else *\\{" + "console.*" + "\\}" + "";
            var match4 = "" + ("if *\\(" + variableMatch + "\\('" + hexMatch + "'\\) *!== *" + variableMatch + "\\('" + hexMatch + "'\\)\\) *\\{") + (variableMatch + ".*") + "\\} *else *\\{" + "console.*" + "\\}" + "";
            var distribution1 = 0,
                distribution2 = 0,
                distribution3 = 0,
                distribution4 = 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/if-statement-variants-distribution.js');
                var regExp1 = new RegExp("" + ifMatch + functionMatch + match1);
                var regExp2 = new RegExp("" + ifMatch + functionMatch + match2);
                var regExp3 = new RegExp("" + ifMatch + functionMatch + match3);
                var regExp4 = new RegExp("" + ifMatch + functionMatch + match4);
                var count1 = 0;
                var count2 = 0;
                var count3 = 0;
                var count4 = 0;
                for (var i = 0; i < samplesCount; i++) {
                    var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { deadCodeInjection: true, deadCodeInjectionThreshold: 1, stringArray: true, stringArrayThreshold: 1 }));
                    var obfuscatedCode = obfuscationResult.getObfuscatedCode();
                    if (regExp1.test(obfuscatedCode)) {
                        count1++;
                    } else if (regExp2.test(obfuscatedCode)) {
                        count2++;
                    } else if (regExp3.test(obfuscatedCode)) {
                        count3++;
                    } else if (regExp4.test(obfuscatedCode)) {
                        count4++;
                    }
                }
                distribution1 = count1 / samplesCount;
                distribution2 = count2 / samplesCount;
                distribution3 = count3 / samplesCount;
                distribution4 = count4 / samplesCount;
            });
            it('variant #1: `IfStatement` variant should have distribution close to `0.25`', function () {
                chai_1.assert.closeTo(distribution1, expectedDistribution, delta);
            });
            it('variant #2: `IfStatement` variant should have distribution close to `0.25`', function () {
                chai_1.assert.closeTo(distribution2, expectedDistribution, delta);
            });
            it('variant #3: `IfStatement` variant should have distribution close to `0.25`', function () {
                chai_1.assert.closeTo(distribution3, expectedDistribution, delta);
            });
            it('variant #4: `IfStatement` variant should have distribution close to `0.25`', function () {
                chai_1.assert.closeTo(distribution4, expectedDistribution, delta);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,