"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../src/options/presets/NoCustomNodes");
var getRegExpMatch_1 = require("../../../../helpers/getRegExpMatch");
var readFileAsString_1 = require("../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../src/JavaScriptObfuscator");
describe('FunctionDeclarationTransformer', function () {
    describe('transformation of `functionDeclaration` node names', function () {
        describe('variant #1: `functionDeclaration` parent block scope is not a `ProgramNode`', function () {
            var functionNameIdentifierRegExp = /function *(_0x[a-f0-9]{4,6}) *\(\) *\{/;
            var functionCallIdentifierRegExp = /(_0x[a-f0-9]{4,6}) *\( *\);/;
            var obfuscatedCode = void 0,
                functionNameIdentifier = void 0,
                functionCallIdentifier = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
                functionNameIdentifier = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionNameIdentifierRegExp);
                functionCallIdentifier = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionCallIdentifierRegExp);
            });
            it('should transform function name', function () {
                chai_1.assert.equal(functionNameIdentifier, functionCallIdentifier);
            });
        });
        describe('variant #2: `functionDeclaration` parent block scope is a `ProgramNode`', function () {
            var functionNameIdentifierRegExp = /function *foo *\(\) *\{/;
            var functionCallIdentifierRegExp = /foo *\( *\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('match #1: shouldn\'t transform function name', function () {
                chai_1.assert.match(obfuscatedCode, functionNameIdentifierRegExp);
            });
            it('match #2: shouldn\'t transform function name', function () {
                chai_1.assert.match(obfuscatedCode, functionCallIdentifierRegExp);
            });
        });
        describe('variant #3: generator `functionDeclaration`', function () {
            var functionNameIdentifierRegExp = /function *\* *(_0x[a-f0-9]{4,6}) *\(\) *\{/;
            var functionCallIdentifierRegExp = /let *_0x[a-f0-9]{4,6} *= *(_0x[a-f0-9]{4,6}) *\( *\);/;
            var obfuscatedCode = void 0,
                functionNameIdentifier = void 0,
                functionCallIdentifier = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/generator-function.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
                functionNameIdentifier = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionNameIdentifierRegExp);
                functionCallIdentifier = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionCallIdentifierRegExp);
            });
            it('should transform generator function name', function () {
                chai_1.assert.equal(functionNameIdentifier, functionCallIdentifier);
            });
        });
        describe('variant #4: async `functionDeclaration`', function () {
            var functionNameIdentifierRegExp = /async *function *(_0x[a-f0-9]{4,6}) *\(\) *\{/;
            var functionCallIdentifierRegExp = /await *(_0x[a-f0-9]{4,6}) *\( *\);/;
            var obfuscatedCode = void 0,
                functionNameIdentifier = void 0,
                functionCallIdentifier = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/async-function.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
                functionNameIdentifier = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionNameIdentifierRegExp);
                functionCallIdentifier = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionCallIdentifierRegExp);
            });
            it('should transform async function name', function () {
                chai_1.assert.equal(functionNameIdentifier, functionCallIdentifier);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,