"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../src/JavaScriptObfuscator");
var getRegExpMatch_1 = require("../../../../helpers/getRegExpMatch");
describe('FunctionTransformer', function () {
    describe('identifiers transformation inside `FunctionDeclaration` and `FunctionExpression` node body', function () {
        var functionParamIdentifierRegExp = /var _0x[a-f0-9]{4,6} *= *function *\((_0x[a-f0-9]{4,6})\) *\{/;
        var functionBodyIdentifierRegExp = /console\['log'\]\((_0x[a-f0-9]{4,6})\)/;
        var variableRegExp = /variable *= *0x6;/;
        var obfuscatedCode = void 0,
            functionParamIdentifierName = void 0,
            functionBodyIdentifierName = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
            var functionParamIdentifierMatch = obfuscatedCode.match(functionParamIdentifierRegExp);
            var functionBodyIdentifierMatch = obfuscatedCode.match(functionBodyIdentifierRegExp);
            functionParamIdentifierName = functionParamIdentifierMatch[1];
            functionBodyIdentifierName = functionBodyIdentifierMatch[1];
        });
        it('should correctly transform both function parameter identifier and function body identifier with same name', function () {
            chai_1.assert.equal(functionParamIdentifierName, functionBodyIdentifierName);
        });
        it('shouldn\'t transform other variables in function body', function () {
            chai_1.assert.match(obfuscatedCode, variableRegExp);
        });
    });
    describe('object pattern as parameter', function () {
        var functionParameterRegExp = /function *\(\{ *bar *\}\) *\{/;
        var functionBodyRegExp = /return *bar;/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/object-pattern-as-parameter.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('match #1: shouldn\'t transform function parameter object pattern identifier', function () {
            chai_1.assert.match(obfuscatedCode, functionParameterRegExp);
        });
        it('match #2: shouldn\'t transform function parameter object pattern identifier', function () {
            chai_1.assert.match(obfuscatedCode, functionBodyRegExp);
        });
    });
    describe('assignment pattern as parameter', function () {
        describe('variant #1: literal as right value', function () {
            var functionParameterRegExp = /function *\(_0x[a-f0-9]{4,6} *= *0x1\) *\{/;
            var functionBodyRegExp = /return *_0x[a-f0-9]{4,6};/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/assignment-pattern-as-parameter-1.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('match #1: should transform function parameter assignment pattern identifier', function () {
                chai_1.assert.match(obfuscatedCode, functionParameterRegExp);
            });
            it('match #2: should transform function parameter assignment pattern identifier', function () {
                chai_1.assert.match(obfuscatedCode, functionBodyRegExp);
            });
        });
        describe('variant #2: identifier as right value', function () {
            var variableDeclarationRegExp = /var *(_0x[a-f0-9]{4,6}) *= *0x1;/;
            var functionParameterRegExp = /function *\((_0x[a-f0-9]{4,6}) *= *(_0x[a-f0-9]{4,6})\) *\{/;
            var functionBodyRegExp = /return *(_0x[a-f0-9]{4,6});/;
            var obfuscatedCode = void 0,
                variableDeclarationIdentifierName = void 0,
                functionParameterIdentifierName = void 0,
                functionDefaultParameterIdentifierName = void 0,
                functionBodyIdentifierName = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/assignment-pattern-as-parameter-2.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
                variableDeclarationIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, variableDeclarationRegExp);
                functionParameterIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionParameterRegExp);
                functionDefaultParameterIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionParameterRegExp, 1);
                functionBodyIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionBodyRegExp);
            });
            it('match #1: should transform function parameter assignment pattern identifier', function () {
                chai_1.assert.match(obfuscatedCode, variableDeclarationRegExp);
            });
            it('match #2: should transform function parameter assignment pattern identifier', function () {
                chai_1.assert.match(obfuscatedCode, functionParameterRegExp);
            });
            it('match #3: should transform function parameter assignment pattern identifier', function () {
                chai_1.assert.match(obfuscatedCode, functionBodyRegExp);
            });
            it('should keep same names for identifier in variable declaration and default value identifier of function parameter', function () {
                chai_1.assert.equal(variableDeclarationIdentifierName, functionDefaultParameterIdentifierName);
            });
            it('should keep same names for identifiers in function params and function body', function () {
                chai_1.assert.equal(functionParameterIdentifierName, functionBodyIdentifierName);
            });
        });
        describe('variant #3: identifier as right value', function () {
            var variableDeclarationRegExp = /var *(_0x[a-f0-9]{4,6}) *= *0x1;/;
            var functionParameterRegExp = /function *\((_0x[a-f0-9]{4,6}), *(_0x[a-f0-9]{4,6}) *= *(_0x[a-f0-9]{4,6})\) *\{/;
            var functionBodyRegExp = /return *(_0x[a-f0-9]{4,6}) *\+ *(_0x[a-f0-9]{4,6});/;
            var obfuscatedCode = void 0,
                variableDeclarationIdentifierName = void 0,
                functionParameterIdentifierName = void 0,
                functionDefaultParameterIdentifierName1 = void 0,
                functionDefaultParameterIdentifierName2 = void 0,
                functionBodyIdentifierName1 = void 0,
                functionBodyIdentifierName2 = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/assignment-pattern-as-parameter-3.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
                variableDeclarationIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, variableDeclarationRegExp);
                functionParameterIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionParameterRegExp);
                functionDefaultParameterIdentifierName1 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionParameterRegExp, 1);
                functionDefaultParameterIdentifierName2 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionParameterRegExp, 2);
                functionBodyIdentifierName1 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionBodyRegExp);
                functionBodyIdentifierName2 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionBodyRegExp, 1);
            });
            it('match #1: should transform function parameter assignment pattern identifier', function () {
                chai_1.assert.match(obfuscatedCode, variableDeclarationRegExp);
            });
            it('match #2: should transform function parameter assignment pattern identifier', function () {
                chai_1.assert.match(obfuscatedCode, functionParameterRegExp);
            });
            it('match #3: should transform function parameter assignment pattern identifier', function () {
                chai_1.assert.match(obfuscatedCode, functionBodyRegExp);
            });
            it('equal #1: shouldn\'t keep same names variable declaration identifier and function parameters identifiers', function () {
                chai_1.assert.notEqual(variableDeclarationIdentifierName, functionParameterIdentifierName);
            });
            it('equal #2: shouldn\'t keep same names variable declaration identifier and function parameters identifiers', function () {
                chai_1.assert.notEqual(variableDeclarationIdentifierName, functionDefaultParameterIdentifierName1);
            });
            it('equal #3: shouldn\'t keep same names variable declaration identifier and function parameters identifiers', function () {
                chai_1.assert.notEqual(variableDeclarationIdentifierName, functionDefaultParameterIdentifierName2);
            });
            it('should keep same names for identifier in first function parameter and default value identifier of second function parameter', function () {
                chai_1.assert.equal(functionParameterIdentifierName, functionDefaultParameterIdentifierName2);
            });
            it('equal #1: should keep same names for identifiers in function params and function body', function () {
                chai_1.assert.equal(functionParameterIdentifierName, functionBodyIdentifierName1);
            });
            it('equal #2: should keep same names for identifiers in function params and function body', function () {
                chai_1.assert.equal(functionDefaultParameterIdentifierName1, functionBodyIdentifierName2);
            });
        });
    });
    describe('array pattern as parameter', function () {
        var functionParameterRegExp = /function *\(\[(_0x[a-f0-9]{4,6}), *(_0x[a-f0-9]{4,6})\]\) *\{/;
        var functionBodyRegExp = /return *(_0x[a-f0-9]{4,6}) *\+ *(_0x[a-f0-9]{4,6});/;
        var arrayPatternIdentifierName1 = void 0,
            arrayPatternIdentifierName2 = void 0,
            functionBodyIdentifierName1 = void 0,
            functionBodyIdentifierName2 = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/array-pattern-as-parameter.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            var obfuscatedCode = obfuscationResult.getObfuscatedCode();
            arrayPatternIdentifierName1 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionParameterRegExp);
            arrayPatternIdentifierName2 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionParameterRegExp, 1);
            functionBodyIdentifierName1 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionBodyRegExp);
            functionBodyIdentifierName2 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionBodyRegExp, 1);
        });
        it('equal #1: should keep same names for identifiers in function parameter array pattern and function body', function () {
            chai_1.assert.equal(arrayPatternIdentifierName1, functionBodyIdentifierName1);
        });
        it('equal #2: should keep same names for identifiers in function parameter array pattern and function body', function () {
            chai_1.assert.equal(arrayPatternIdentifierName2, functionBodyIdentifierName2);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,