"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../src/JavaScriptObfuscator");
describe('LiteralTransformer', function () {
    describe('transformation of literal node with string value', function () {
        describe('variant #1: default behaviour', function () {
            var stringArrayRegExp = /^var *_0x([a-f0-9]){4} *= *\['test'\];/;
            var stringArrayCallRegExp = /var *test *= *_0x([a-f0-9]){4}\('0x0'\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('match #1: should replace literal node value with value from string array', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayRegExp);
            });
            it('match #2: should replace literal node value with value from string array', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayCallRegExp);
            });
        });
        describe('variant #2: `stringArray` option is disabled', function () {
            var regExp = /^var *test *= *'test';/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('shouldn\'t replace literal node value with value from string array', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('variant #3: string contains non-latin and non-digit characters and `unicodeEscapeSequence` is disabled', function () {
            var testFunc = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/error-when-non-latin.js');
                testFunc = function testFunc() {
                    return JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
                };
            });
            it('should\'t throw an error', function () {
                chai_1.assert.doesNotThrow(testFunc);
            });
        });
        describe('variant #4: same literal node values', function () {
            var stringArrayRegExp = /^var *_0x([a-f0-9]){4} *= *\['test'\];/;
            var stringArrayCallRegExp = /var *test *= *_0x([a-f0-9]){4}\('0x0'\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/same-literal-values.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('match #1: should create only one item in string array for same literal node values', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayRegExp);
            });
            it('match #2: should create only one item in string array for same literal node values', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayCallRegExp);
            });
        });
        describe('variant #5: `unicodeEscapeSequence` option is enabled', function () {
            var regExp = /^var *test *= *'\\x74\\x65\\x73\\x74';$/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { unicodeEscapeSequence: true }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should replace literal node value with unicode escape sequence', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('variant #6: `unicodeEscapeSequence` and `stringArray` options are enabled', function () {
            var stringArrayRegExp = /^var *_0x([a-f0-9]){4} *= *\['\\x74\\x65\\x73\\x74'\];/;
            var stringArrayCallRegExp = /var *test *= *_0x([a-f0-9]){4}\('0x0'\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1, unicodeEscapeSequence: true }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('match #1: should replace literal node value with unicode escape sequence from string array', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayRegExp);
            });
            it('match #1: should replace literal node value with unicode escape sequence from string array', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayCallRegExp);
            });
        });
        describe('variant #7: short literal node value', function () {
            var regExp = /var *test *= *'te';/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/short-literal-value.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('shouldn\'t replace short literal node value with value from string array', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('variant #8: base64 encoding', function () {
            var stringArrayRegExp = /^var *_0x([a-f0-9]){4} *= *\['dGVzdA=='\];/;
            var stringArrayCallRegExp = /var *test *= *_0x([a-f0-9]){4}\('0x0'\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayEncoding: 'base64', stringArrayThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('match #1: should replace literal node value with value from string array encoded using base64', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayRegExp);
            });
            it('match #2: should replace literal node value with value from string array encoded using base64', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayCallRegExp);
            });
        });
        describe('variant #9: rc4 encoding', function () {
            var regExp = /var *test *= *_0x([a-f0-9]){4}\('0x0', *'.{4}'\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayEncoding: 'rc4', stringArrayThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should replace literal node value with value from string array encoded using rc4', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('variant #10: `stringArrayThreshold` option value', function () {
            var samples = 1000;
            var stringArrayThreshold = 0.5;
            var delta = 0.1;
            var regExp1 = /var *test *= *_0x([a-f0-9]){4}\('0x0'\);/g;
            var regExp2 = /var *test *= *'test';/g;
            var stringArrayProbability = void 0,
                noStringArrayProbability = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate((code + "\n").repeat(samples), Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: stringArrayThreshold }));
                var stringArrayMatchesLength = obfuscationResult.getObfuscatedCode().match(regExp1).length;
                var noStringArrayMatchesLength = obfuscationResult.getObfuscatedCode().match(regExp2).length;
                stringArrayProbability = stringArrayMatchesLength / samples;
                noStringArrayProbability = noStringArrayMatchesLength / samples;
            });
            it('variant #1: should replace literal node value with value from string array with `stringArrayThreshold` chance', function () {
                chai_1.assert.closeTo(stringArrayProbability, stringArrayThreshold, delta);
            });
            it('variant #2: shouldn\'t replace literal node value with value from string array with `(1 - stringArrayThreshold)` chance', function () {
                chai_1.assert.closeTo(noStringArrayProbability, stringArrayThreshold, delta);
            });
        });
    });
    describe('transformation of literal node with boolean value', function () {
        var regExp = /^var *test *= *!!\[\];$/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/boolean-value.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should transform literal node', function () {
            chai_1.assert.match(obfuscatedCode, regExp);
        });
    });
    describe('transformation of literal node with number value', function () {
        var regExp = /^var *test *= *0x0;$/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/number-value.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should transform literal node', function () {
            chai_1.assert.match(obfuscatedCode, regExp);
        });
    });
    describe('RegExp literal', function () {
        var regExp = /^var *regExp *= *\/\(\\d\+\)\/;$/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/regexp-literal.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should keep safe value of RegExp literal', function () {
            chai_1.assert.match(obfuscatedCode, regExp);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,