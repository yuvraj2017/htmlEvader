"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../src/JavaScriptObfuscator");
describe('ObjectExpressionTransformer', function () {
    describe('default behaviour', function () {
        var regExp = /var *test *= *\{'foo':0x0\};/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/property-with-identifier-value.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should replace object expression node `key` property with identifier value by property with literal value', function () {
            chai_1.assert.match(obfuscatedCode, regExp);
        });
    });
    describe('shorthand ES6 object expression', function () {
        var regExp = /var *_0x[a-f0-9]{4,6} *= *\{'a': *_0x[a-f0-9]{4,6}\, *'b': *_0x[a-f0-9]{4,6}\};/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/shorthand-object-expression.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should correct convert shorthand ES6 object expression to non-shorthand object expression', function () {
            chai_1.assert.match(obfuscatedCode, regExp);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JqZWN0RXhwcmVzc2lvblRyYW5zZm9ybWVyLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZXN0L2Z1bmN0aW9uYWwtdGVzdHMvbm9kZS10cmFuc2Zvcm1lcnMvb2JmdXNjYXRpbmctdHJhbnNmb3JtZXJzL29iamVjdC1leHByZXNzaW9uLXRyYW5zZm9ybWVyL09iamVjdEV4cHJlc3Npb25UcmFuc2Zvcm1lci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFCQUE4QjtBQUk5Qiw4QkFBMEY7QUFFMUYsaUNBQXdFO0FBRXhFLHFDQUErRTtBQUUvRSxBQUFRLFNBQUMsQUFBNkIsK0JBQUU7QUFDcEMsQUFBUSxhQUFDLEFBQW1CLHFCQUFFO0FBQzFCLFlBQU0sQUFBTSxTQUFXLEFBQThCLEFBQUM7QUFFdEQsWUFBSSxBQUFzQixBQUFDO0FBRTNCLEFBQU0sZUFBQztBQUNILGdCQUFNLEFBQUksT0FBVyxtQkFBZ0IsaUJBQUMsQUFBUyxZQUFHLEFBQTZDLEFBQUMsQUFBQztBQUNqRyxnQkFBTSxBQUFpQixvQkFBdUIsdUJBQW9CLHFCQUFDLEFBQVMsVUFDeEUsQUFBSSx3QkFFRyxnQkFBc0IsQUFFaEMsQUFBQztBQUVGLEFBQWMsNkJBQUcsQUFBaUIsa0JBQUMsQUFBaUIsQUFBRSxBQUFDLEFBQzVEO0FBQUMsQUFBQyxBQUFDO0FBRUYsQUFBRSxXQUFDLEFBQTJHLDZHQUFFO0FBQzVHLG1CQUFNLE9BQUMsQUFBSyxNQUFDLEFBQWMsZ0JBQUUsQUFBTSxBQUFDLEFBQUMsQUFDekM7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQVEsYUFBQyxBQUFpQyxtQ0FBRTtBQUN4QyxZQUFNLEFBQU0sU0FBVyxBQUFpRixBQUFDO0FBRXpHLFlBQUksQUFBc0IsQUFBQztBQUUzQixBQUFNLGVBQUM7QUFDSCxnQkFBTSxBQUFJLE9BQVcsbUJBQWdCLGlCQUFDLEFBQVMsWUFBRyxBQUEwQyxBQUFDLEFBQUM7QUFDOUYsZ0JBQU0sQUFBaUIsb0JBQXVCLHVCQUFvQixxQkFBQyxBQUFTLFVBQ3hFLEFBQUksd0JBRUcsZ0JBQXNCLEFBRWhDLEFBQUM7QUFFRixBQUFjLDZCQUFHLEFBQWlCLGtCQUFDLEFBQWlCLEFBQUUsQUFBQyxBQUMzRDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsV0FBQyxBQUEyRiw2RkFBRTtBQUM1RixtQkFBTSxPQUFDLEFBQUssTUFBQyxBQUFjLGdCQUFFLEFBQU0sQUFBQyxBQUFDLEFBQ3pDO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydCB9IGZyb20gJ2NoYWknO1xuXG5pbXBvcnQgeyBJT2JmdXNjYXRpb25SZXN1bHQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zcmMvaW50ZXJmYWNlcy9JT2JmdXNjYXRpb25SZXN1bHQnO1xuXG5pbXBvcnQgeyBOT19DVVNUT01fTk9ERVNfUFJFU0VUIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3JjL29wdGlvbnMvcHJlc2V0cy9Ob0N1c3RvbU5vZGVzJztcblxuaW1wb3J0IHsgcmVhZEZpbGVBc1N0cmluZyB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvcmVhZEZpbGVBc1N0cmluZyc7XG5cbmltcG9ydCB7IEphdmFTY3JpcHRPYmZ1c2NhdG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3JjL0phdmFTY3JpcHRPYmZ1c2NhdG9yJztcblxuZGVzY3JpYmUoJ09iamVjdEV4cHJlc3Npb25UcmFuc2Zvcm1lcicsICgpID0+IHtcbiAgICBkZXNjcmliZSgnZGVmYXVsdCBiZWhhdmlvdXInLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlZ0V4cDogUmVnRXhwID0gL3ZhciAqdGVzdCAqPSAqXFx7J2Zvbyc6MHgwXFx9Oy87XG5cbiAgICAgICAgbGV0IG9iZnVzY2F0ZWRDb2RlOiBzdHJpbmc7XG5cbiAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGU6IHN0cmluZyA9IHJlYWRGaWxlQXNTdHJpbmcoX19kaXJuYW1lICsgJy9maXh0dXJlcy9wcm9wZXJ0eS13aXRoLWlkZW50aWZpZXItdmFsdWUuanMnKTtcbiAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoXG4gICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC4uLk5PX0NVU1RPTV9OT0RFU19QUkVTRVRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZXBsYWNlIG9iamVjdCBleHByZXNzaW9uIG5vZGUgYGtleWAgcHJvcGVydHkgd2l0aCBpZGVudGlmaWVyIHZhbHVlIGJ5IHByb3BlcnR5IHdpdGggbGl0ZXJhbCB2YWx1ZScsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgcmVnRXhwKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnc2hvcnRoYW5kIEVTNiBvYmplY3QgZXhwcmVzc2lvbicsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVnRXhwOiBSZWdFeHAgPSAvdmFyICpfMHhbYS1mMC05XXs0LDZ9ICo9ICpcXHsnYSc6ICpfMHhbYS1mMC05XXs0LDZ9XFwsIConYic6ICpfMHhbYS1mMC05XXs0LDZ9XFx9Oy87XG5cbiAgICAgICAgbGV0IG9iZnVzY2F0ZWRDb2RlOiBzdHJpbmc7XG5cbiAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGU6IHN0cmluZyA9IHJlYWRGaWxlQXNTdHJpbmcoX19kaXJuYW1lICsgJy9maXh0dXJlcy9zaG9ydGhhbmQtb2JqZWN0LWV4cHJlc3Npb24uanMnKTtcbiAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoXG4gICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC4uLk5PX0NVU1RPTV9OT0RFU19QUkVTRVRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgY29ycmVjdCBjb252ZXJ0IHNob3J0aGFuZCBFUzYgb2JqZWN0IGV4cHJlc3Npb24gdG8gbm9uLXNob3J0aGFuZCBvYmplY3QgZXhwcmVzc2lvbicsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgcmVnRXhwKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==