"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../src/options/presets/NoCustomNodes");
var getRegExpMatch_1 = require("../../../../helpers/getRegExpMatch");
var readFileAsString_1 = require("../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../src/JavaScriptObfuscator");
describe('VariableDeclarationTransformer', function () {
    describe('variant #1: default behaviour', function () {
        var variableDeclarationRegExp = /var *_0x([a-f0-9]){4,6} *= *'abc';/;
        var variableCallRegExp = /console\['log'\]\(_0x([a-f0-9]){4,6}\);/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-declaration.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('match #1: should transform `variableDeclaration` node', function () {
            chai_1.assert.match(obfuscatedCode, variableDeclarationRegExp);
        });
        it('match #2: should transform `variableDeclaration` node', function () {
            chai_1.assert.match(obfuscatedCode, variableCallRegExp);
        });
    });
    describe('variant #2: parent block scope node is `Program` node', function () {
        var variableDeclarationRegExp = /var *test *= *0xa;/;
        var variableCallRegExp = /console\['log'\]\(test\);/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/parent-block-scope-is-program-node.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('match #1: shouldn\'t transform `variableDeclaration` node', function () {
            chai_1.assert.match(obfuscatedCode, variableDeclarationRegExp);
        });
        it('match #2: shouldn\'t transform `variableDeclaration` node', function () {
            chai_1.assert.match(obfuscatedCode, variableCallRegExp);
        });
    });
    describe('variant #3: scope of `var` kind', function () {
        var regExp = /console\['log'\]\(_0x([a-f0-9]){4,6}\);/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/var-kind.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should transform variable call (`identifier` node) outside of block scope of node in which this variable was declared with `var` kind', function () {
            chai_1.assert.match(obfuscatedCode, regExp);
        });
    });
    describe('variant #4: scope of `let` kind', function () {
        var regExp = /console\['log'\]\(test\);/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/let-kind.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('shouldn\'t transform variable call (`identifier` node) outside of block scope of node in which this variable was declared with `let` kind', function () {
            chai_1.assert.match(obfuscatedCode, regExp);
        });
    });
    describe("variant #5: variable calls before variable declaration", function () {
        var functionBodyVariableCallRegExp = /console\['log'\]\(_0x([a-f0-9]){4,6}\['item'\]\);/;
        var variableCallBeforeDeclarationRegExp = /console\['log'\]\(_0x([a-f0-9]){4,6}\);/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/variable-call-before-variable-declaration-1.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should transform variable call (`identifier` node name) before variable declaration if this call is inside function body', function () {
            chai_1.assert.match(obfuscatedCode, functionBodyVariableCallRegExp);
        });
        it('should transform variable call (`identifier` node name) before variable declaration', function () {
            chai_1.assert.match(obfuscatedCode, variableCallBeforeDeclarationRegExp);
        });
    });
    describe("variant #6: variable calls before variable declaration when function param has the same name as variables name", function () {
        var functionParamIdentifierRegExp = /function *_0x[a-f0-9]{4,6} *\((_0x[a-f0-9]{4,6})\,(_0x[a-f0-9]{4,6})\) *\{/;
        var innerFunctionParamIdentifierRegExp = /function _0x[a-f0-9]{4,6} *\((_0x[a-f0-9]{4,6})\) *\{/;
        var constructorIdentifierRegExp = /console\['log'\]\((_0x[a-f0-9]{4,6})\)/;
        var objectIdentifierRegExp = /return\{'t':(_0x[a-f0-9]{4,6})\}/;
        var variableDeclarationIdentifierRegExp = /var *(_0x[a-f0-9]{4,6});/;
        var outerFunctionParamIdentifierName = void 0,
            innerFunctionParamIdentifierName = void 0,
            constructorIdentifierName = void 0,
            objectIdentifierName = void 0,
            variableDeclarationIdentifierName = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/variable-call-before-variable-declaration-2.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            var obfuscatedCode = obfuscationResult.getObfuscatedCode();
            outerFunctionParamIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, functionParamIdentifierRegExp);
            innerFunctionParamIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, innerFunctionParamIdentifierRegExp);
            constructorIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, constructorIdentifierRegExp);
            objectIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, objectIdentifierRegExp);
            variableDeclarationIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, variableDeclarationIdentifierRegExp);
        });
        it('match #1: should\'t name variables inside inner function with names from outer function params', function () {
            chai_1.assert.notEqual(outerFunctionParamIdentifierName, constructorIdentifierName);
        });
        it('match #2: should\'t name variables inside inner function with names from outer function params', function () {
            chai_1.assert.notEqual(outerFunctionParamIdentifierName, innerFunctionParamIdentifierName);
        });
        it('match #1: should correct transform variables inside outer function body', function () {
            chai_1.assert.equal(outerFunctionParamIdentifierName, objectIdentifierName);
        });
        it('match #2: should correct transform variables inside outer function body', function () {
            chai_1.assert.equal(outerFunctionParamIdentifierName, variableDeclarationIdentifierName);
        });
        it('should correct transform variables inside inner function body', function () {
            chai_1.assert.equal(innerFunctionParamIdentifierName, constructorIdentifierName);
        });
        it('should keep equal names after transformation for variables with same names', function () {
            chai_1.assert.equal(variableDeclarationIdentifierName, objectIdentifierName);
        });
    });
    describe("variant #7: variable calls before variable declaration when catch clause param has the same name as variables name", function () {
        var catchClauseParamIdentifierRegExp = /catch *\((_0x[a-f0-9]{4,6})\) *\{/;
        var innerFunctionParamIdentifierRegExp = /function _0x[a-f0-9]{4,6} *\((_0x[a-f0-9]{4,6})\) *\{/;
        var constructorIdentifierRegExp = /console\['log'\]\((_0x[a-f0-9]{4,6})\)/;
        var objectIdentifierRegExp = /return\{'t':(_0x[a-f0-9]{4,6})\}/;
        var variableDeclarationIdentifierRegExp = /var *(_0x[a-f0-9]{4,6});/;
        var catchClauseParamIdentifierName = void 0,
            innerFunctionParamIdentifierName = void 0,
            constructorIdentifierName = void 0,
            objectIdentifierName = void 0,
            variableDeclarationIdentifierName = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/variable-call-before-variable-declaration-3.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            var obfuscatedCode = obfuscationResult.getObfuscatedCode();
            catchClauseParamIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, catchClauseParamIdentifierRegExp);
            innerFunctionParamIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, innerFunctionParamIdentifierRegExp);
            constructorIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, constructorIdentifierRegExp);
            objectIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, objectIdentifierRegExp);
            variableDeclarationIdentifierName = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, variableDeclarationIdentifierRegExp);
        });
        it('match #1: should\'t name variables inside inner function with names from catch clause param', function () {
            chai_1.assert.notEqual(catchClauseParamIdentifierName, constructorIdentifierName);
        });
        it('match #2: should\'t name variables inside inner function with names from catch clause param', function () {
            chai_1.assert.notEqual(catchClauseParamIdentifierName, innerFunctionParamIdentifierName);
        });
        it('equal #1: should correct transform variables inside catch clause body', function () {
            chai_1.assert.equal(catchClauseParamIdentifierName, objectIdentifierName);
        });
        it('equal #2: should correct transform variables inside catch clause body', function () {
            chai_1.assert.equal(catchClauseParamIdentifierName, variableDeclarationIdentifierName);
        });
        it('should correct transform variables inside inner function body', function () {
            chai_1.assert.equal(innerFunctionParamIdentifierName, constructorIdentifierName);
        });
        it('should keep equal names after transformation for variables with same names', function () {
            chai_1.assert.equal(variableDeclarationIdentifierName, objectIdentifierName);
        });
    });
    describe('variant #8: wrong replacement', function () {
        describe('variant #1: property node identifier', function () {
            var regExp = /var _0x([a-f0-9]){4,6} *= *\{'test/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/property-identifier.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('shouldn\'t replace property node identifier', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('variant #2: computed member expression identifier', function () {
            var regExp = /_0x([a-f0-9]){4,6}\['test'\]/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/member-expression-identifier.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('shouldn\'t replace computed member expression identifier', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
    });
    describe('variant #9: object pattern as variable declarator', function () {
        var objectPatternVariableDeclaratorRegExp = /var *\{ *bar *\} *= *\{ *'bar' *: *'foo' *\};/;
        var variableUsageRegExp = /console\['log'\]\(bar\);/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/object-pattern.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('match #1: shouldn\'t transform object pattern variable declarator', function () {
            chai_1.assert.match(obfuscatedCode, objectPatternVariableDeclaratorRegExp);
        });
        it('match #2: shouldn\'t transform object pattern variable declarator', function () {
            chai_1.assert.match(obfuscatedCode, variableUsageRegExp);
        });
    });
    describe('variant #10: array pattern as variable declarator', function () {
        var objectPatternVariableDeclaratorRegExp = /var *\[ *(_0x([a-f0-9]){4,6}), *(_0x([a-f0-9]){4,6}) *\] *= *\[0x1, *0x2\];/;
        var variableUsageRegExp = /console\['log'\]\((_0x([a-f0-9]){4,6}), *(_0x([a-f0-9]){4,6})\);/;
        var obfuscatedCode = void 0,
            objectPatternIdentifierName1 = void 0,
            objectPatternIdentifierName2 = void 0,
            identifierName1 = void 0,
            identifierName2 = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/array-pattern.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
            objectPatternIdentifierName1 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, objectPatternVariableDeclaratorRegExp);
            objectPatternIdentifierName2 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, objectPatternVariableDeclaratorRegExp, 1);
            identifierName1 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, variableUsageRegExp);
            identifierName2 = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, variableUsageRegExp, 1);
        });
        it('match #1: should transform array pattern variable declarator', function () {
            chai_1.assert.match(obfuscatedCode, objectPatternVariableDeclaratorRegExp);
        });
        it('match #2: should transform array pattern variable declarator', function () {
            chai_1.assert.match(obfuscatedCode, variableUsageRegExp);
        });
        it('equal #1: should keep same identifier names same for identifiers in variable declaration and after variable declaration', function () {
            chai_1.assert.equal(objectPatternIdentifierName1, identifierName1);
        });
        it('equal #2: should keep same identifier names same for identifiers in variable declaration and after variable declaration', function () {
            chai_1.assert.equal(objectPatternIdentifierName2, identifierName2);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,