"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../src/options/presets/NoCustomNodes");
var getRegExpMatch_1 = require("../../../../helpers/getRegExpMatch");
var readFileAsString_1 = require("../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../src/JavaScriptObfuscator");
describe('LabeledStatementTransformer', function () {
    describe('changeControlFlow (labeledStatementNode: ESTree.LabeledStatement): void', function () {
        var labeledStatementRegExp = /(_0x([a-f0-9]){4,6}): *\{/;
        var continueStatementRegExp = /continue *(_0x([a-f0-9]){4,6});/;
        var breakStatementRegExp = /break *(_0x([a-f0-9]){4,6});/;
        var obfuscatedCode = void 0,
            firstMatch = void 0,
            secondMatch = void 0,
            thirdMatch = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
            firstMatch = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, labeledStatementRegExp);
            secondMatch = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, continueStatementRegExp);
            thirdMatch = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, breakStatementRegExp);
        });
        it('should transform `labeledStatement` identifier', function () {
            chai_1.assert.match(obfuscatedCode, labeledStatementRegExp);
        });
        it('should transform `continueStatement` identifier', function () {
            chai_1.assert.match(obfuscatedCode, continueStatementRegExp);
        });
        it('should transform `breakStatement` identifier', function () {
            chai_1.assert.match(obfuscatedCode, breakStatementRegExp);
        });
        it('equal #1: `labeledStatement` identifier name and `labeledStatement` body `breakStatement` should be same', function () {
            chai_1.assert.equal(firstMatch, secondMatch);
        });
        it('equal #2: `labeledStatement` identifier name and `labeledStatement` body `breakStatement` should be same', function () {
            chai_1.assert.equal(secondMatch, thirdMatch);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGFiZWxlZFN0YXRlbWVudFRyYW5zZm9ybWVyLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZXN0L2Z1bmN0aW9uYWwtdGVzdHMvbm9kZS10cmFuc2Zvcm1lcnMvb2JmdXNjYXRpbmctdHJhbnNmb3JtZXJzL2xhYmVsZWQtc3RhdGVtZW50LXRyYW5zZm9ybWVyL0xhYmVsZWRTdGF0ZW1lbnRUcmFuc2Zvcm1lci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFCQUE4QjtBQUk5Qiw4QkFBMEY7QUFFMUYsK0JBQW9FO0FBQ3BFLGlDQUF3RTtBQUV4RSxxQ0FBK0U7QUFFL0UsQUFBUSxTQUFDLEFBQTZCLCtCQUFFO0FBQ3BDLEFBQVEsYUFBQyxBQUF5RSwyRUFBRTtBQUNoRixZQUFNLEFBQXNCLHlCQUFXLEFBQTJCLEFBQUM7QUFDbkUsWUFBTSxBQUF1QiwwQkFBVyxBQUFpQyxBQUFDO0FBQzFFLFlBQU0sQUFBb0IsdUJBQVcsQUFBOEIsQUFBQztBQUVwRSxZQUFJLEFBQXNCO1lBQ3RCLEFBQTRCO1lBQzVCLEFBQTZCO1lBQzdCLEFBQTRCLEFBQUM7QUFFakMsQUFBTSxlQUFDO0FBQ0gsZ0JBQU0sQUFBSSxPQUFXLG1CQUFnQixpQkFBQyxBQUFTLFlBQUcsQUFBb0IsQUFBQyxBQUFDO0FBQ3hFLGdCQUFNLEFBQWlCLG9CQUF1Qix1QkFBb0IscUJBQUMsQUFBUyxVQUN4RSxBQUFJLHdCQUVHLGdCQUFzQixBQUVoQyxBQUFDO0FBRUYsQUFBYyw2QkFBRyxBQUFpQixrQkFBQyxBQUFpQixBQUFFLEFBQUM7QUFFdkQsQUFBVSx5QkFBRyxpQkFBYyxlQUFDLEFBQWMsZ0JBQUUsQUFBc0IsQUFBQyxBQUFDO0FBQ3BFLEFBQVcsMEJBQUcsaUJBQWMsZUFBQyxBQUFjLGdCQUFFLEFBQXVCLEFBQUMsQUFBQztBQUN0RSxBQUFVLHlCQUFHLGlCQUFjLGVBQUMsQUFBYyxnQkFBRSxBQUFvQixBQUFDLEFBQUMsQUFDdEU7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBZ0Qsa0RBQUU7QUFDakQsbUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBYyxnQkFBRSxBQUFzQixBQUFDLEFBQUMsQUFDekQ7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBaUQsbURBQUU7QUFDbEQsbUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBYyxnQkFBRSxBQUF1QixBQUFDLEFBQUMsQUFDMUQ7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBOEMsZ0RBQUU7QUFDL0MsbUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBYyxnQkFBRSxBQUFvQixBQUFDLEFBQUMsQUFDdkQ7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBMEcsNEdBQUU7QUFDM0csbUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBVSxZQUFFLEFBQVcsQUFBQyxBQUFDLEFBQzFDO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBRSxXQUFDLEFBQTBHLDRHQUFFO0FBQzNHLG1CQUFNLE9BQUMsQUFBSyxNQUFDLEFBQVcsYUFBRSxBQUFVLEFBQUMsQUFBQyxBQUMxQztBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQgfSBmcm9tICdjaGFpJztcblxuaW1wb3J0IHsgSU9iZnVzY2F0aW9uUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3JjL2ludGVyZmFjZXMvSU9iZnVzY2F0aW9uUmVzdWx0JztcblxuaW1wb3J0IHsgTk9fQ1VTVE9NX05PREVTX1BSRVNFVCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NyYy9vcHRpb25zL3ByZXNldHMvTm9DdXN0b21Ob2Rlcyc7XG5cbmltcG9ydCB7IGdldFJlZ0V4cE1hdGNoIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9nZXRSZWdFeHBNYXRjaCc7XG5pbXBvcnQgeyByZWFkRmlsZUFzU3RyaW5nIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9yZWFkRmlsZUFzU3RyaW5nJztcblxuaW1wb3J0IHsgSmF2YVNjcmlwdE9iZnVzY2F0b3IgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zcmMvSmF2YVNjcmlwdE9iZnVzY2F0b3InO1xuXG5kZXNjcmliZSgnTGFiZWxlZFN0YXRlbWVudFRyYW5zZm9ybWVyJywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCdjaGFuZ2VDb250cm9sRmxvdyAobGFiZWxlZFN0YXRlbWVudE5vZGU6IEVTVHJlZS5MYWJlbGVkU3RhdGVtZW50KTogdm9pZCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgbGFiZWxlZFN0YXRlbWVudFJlZ0V4cDogUmVnRXhwID0gLyhfMHgoW2EtZjAtOV0pezQsNn0pOiAqXFx7LztcbiAgICAgICAgY29uc3QgY29udGludWVTdGF0ZW1lbnRSZWdFeHA6IFJlZ0V4cCA9IC9jb250aW51ZSAqKF8weChbYS1mMC05XSl7NCw2fSk7LztcbiAgICAgICAgY29uc3QgYnJlYWtTdGF0ZW1lbnRSZWdFeHA6IFJlZ0V4cCA9IC9icmVhayAqKF8weChbYS1mMC05XSl7NCw2fSk7LztcblxuICAgICAgICBsZXQgb2JmdXNjYXRlZENvZGU6IHN0cmluZyxcbiAgICAgICAgICAgIGZpcnN0TWF0Y2g6IHN0cmluZ3x1bmRlZmluZWQsXG4gICAgICAgICAgICBzZWNvbmRNYXRjaDogc3RyaW5nfHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRoaXJkTWF0Y2g6IHN0cmluZ3x1bmRlZmluZWQ7XG5cbiAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGU6IHN0cmluZyA9IHJlYWRGaWxlQXNTdHJpbmcoX19kaXJuYW1lICsgJy9maXh0dXJlcy9pbnB1dC5qcycpO1xuICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlID0gb2JmdXNjYXRpb25SZXN1bHQuZ2V0T2JmdXNjYXRlZENvZGUoKTtcblxuICAgICAgICAgICAgZmlyc3RNYXRjaCA9IGdldFJlZ0V4cE1hdGNoKG9iZnVzY2F0ZWRDb2RlLCBsYWJlbGVkU3RhdGVtZW50UmVnRXhwKTtcbiAgICAgICAgICAgIHNlY29uZE1hdGNoID0gZ2V0UmVnRXhwTWF0Y2gob2JmdXNjYXRlZENvZGUsIGNvbnRpbnVlU3RhdGVtZW50UmVnRXhwKTtcbiAgICAgICAgICAgIHRoaXJkTWF0Y2ggPSBnZXRSZWdFeHBNYXRjaChvYmZ1c2NhdGVkQ29kZSwgYnJlYWtTdGF0ZW1lbnRSZWdFeHApO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHRyYW5zZm9ybSBgbGFiZWxlZFN0YXRlbWVudGAgaWRlbnRpZmllcicsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgbGFiZWxlZFN0YXRlbWVudFJlZ0V4cCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgdHJhbnNmb3JtIGBjb250aW51ZVN0YXRlbWVudGAgaWRlbnRpZmllcicsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgY29udGludWVTdGF0ZW1lbnRSZWdFeHApO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHRyYW5zZm9ybSBgYnJlYWtTdGF0ZW1lbnRgIGlkZW50aWZpZXInLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQubWF0Y2gob2JmdXNjYXRlZENvZGUsIGJyZWFrU3RhdGVtZW50UmVnRXhwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ2VxdWFsICMxOiBgbGFiZWxlZFN0YXRlbWVudGAgaWRlbnRpZmllciBuYW1lIGFuZCBgbGFiZWxlZFN0YXRlbWVudGAgYm9keSBgYnJlYWtTdGF0ZW1lbnRgIHNob3VsZCBiZSBzYW1lJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGZpcnN0TWF0Y2gsIHNlY29uZE1hdGNoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ2VxdWFsICMyOiBgbGFiZWxlZFN0YXRlbWVudGAgaWRlbnRpZmllciBuYW1lIGFuZCBgbGFiZWxlZFN0YXRlbWVudGAgYm9keSBgYnJlYWtTdGF0ZW1lbnRgIHNob3VsZCBiZSBzYW1lJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHNlY29uZE1hdGNoLCB0aGlyZE1hdGNoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==