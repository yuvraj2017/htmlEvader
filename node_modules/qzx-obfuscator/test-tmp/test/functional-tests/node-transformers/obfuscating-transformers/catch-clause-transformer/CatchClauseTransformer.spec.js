"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../src/options/presets/NoCustomNodes");
var getRegExpMatch_1 = require("../../../../helpers/getRegExpMatch");
var readFileAsString_1 = require("../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../src/JavaScriptObfuscator");
describe('CatchClauseTransformer', function () {
    var obfuscatedCode = void 0;
    describe('changeControlFlow (catchClauseNode: ESTree.CatchClause): void', function () {
        var paramNameRegExp = /catch *\((_0x([a-f0-9]){4,6})\) *\{/;
        var bodyParamNameRegExp = /console\['log'\]\((_0x([a-f0-9]){4,6})\);/;
        var firstMatch = void 0,
            secondMatch = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
            firstMatch = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, paramNameRegExp);
            secondMatch = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, bodyParamNameRegExp);
        });
        it('match #1: should transform catch clause node', function () {
            chai_1.assert.match(obfuscatedCode, paramNameRegExp);
        });
        it('match #2: should transform catch clause node', function () {
            chai_1.assert.match(obfuscatedCode, bodyParamNameRegExp);
        });
        it('catch clause arguments param name and param name in body should be same', function () {
            chai_1.assert.equal(firstMatch, secondMatch);
        });
    });
    describe('object pattern as parameter', function () {
        var functionParameterMatch = /\} *catch *\(\{ *name *\}\) *\{/;
        var functionBodyMatch = /return *name;/;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/object-pattern-as-parameter.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('match #1: shouldn\'t transform function parameter object pattern identifier', function () {
            chai_1.assert.match(obfuscatedCode, functionParameterMatch);
        });
        it('match #2: shouldn\'t transform function parameter object pattern identifier', function () {
            chai_1.assert.match(obfuscatedCode, functionBodyMatch);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2F0Y2hDbGF1c2VUcmFuc2Zvcm1lci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGVzdC9mdW5jdGlvbmFsLXRlc3RzL25vZGUtdHJhbnNmb3JtZXJzL29iZnVzY2F0aW5nLXRyYW5zZm9ybWVycy9jYXRjaC1jbGF1c2UtdHJhbnNmb3JtZXIvQ2F0Y2hDbGF1c2VUcmFuc2Zvcm1lci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFCQUE4QjtBQUk5Qiw4QkFBMEY7QUFFMUYsK0JBQW9FO0FBQ3BFLGlDQUF3RTtBQUV4RSxxQ0FBK0U7QUFFL0UsQUFBUSxTQUFDLEFBQXdCLDBCQUFFO0FBQy9CLFFBQUksQUFBc0IsQUFBQztBQUUzQixBQUFRLGFBQUMsQUFBK0QsaUVBQUU7QUFDdEUsWUFBTSxBQUFlLGtCQUFXLEFBQXFDLEFBQUM7QUFDdEUsWUFBTSxBQUFtQixzQkFBVyxBQUEyQyxBQUFDO0FBRWhGLFlBQUksQUFBOEI7WUFDOUIsQUFBK0IsQUFBQztBQUVwQyxBQUFNLGVBQUM7QUFDSCxnQkFBTSxBQUFJLE9BQVcsbUJBQWdCLGlCQUFDLEFBQVMsWUFBRyxBQUFvQixBQUFDLEFBQUM7QUFDeEUsZ0JBQU0sQUFBaUIsb0JBQXVCLHVCQUFvQixxQkFBQyxBQUFTLFVBQ3hFLEFBQUksd0JBRUcsZ0JBQXNCLEFBRWhDLEFBQUM7QUFFRixBQUFjLDZCQUFHLEFBQWlCLGtCQUFDLEFBQWlCLEFBQUUsQUFBQztBQUN2RCxBQUFVLHlCQUFHLGlCQUFjLGVBQUMsQUFBYyxnQkFBRSxBQUFlLEFBQUMsQUFBQztBQUM3RCxBQUFXLDBCQUFHLGlCQUFjLGVBQUMsQUFBYyxnQkFBRSxBQUFtQixBQUFDLEFBQUMsQUFDdEU7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBOEMsZ0RBQUU7QUFDL0MsbUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBYyxnQkFBRSxBQUFlLEFBQUMsQUFBQyxBQUNsRDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsV0FBQyxBQUE4QyxnREFBRTtBQUMvQyxtQkFBTSxPQUFDLEFBQUssTUFBQyxBQUFjLGdCQUFFLEFBQW1CLEFBQUMsQUFBQyxBQUN0RDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsV0FBQyxBQUF5RSwyRUFBRTtBQUMxRSxtQkFBTSxPQUFDLEFBQUssTUFBQyxBQUFVLFlBQUUsQUFBVyxBQUFDLEFBQUMsQUFDMUM7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQVEsYUFBQyxBQUE2QiwrQkFBRTtBQUNwQyxZQUFNLEFBQXNCLHlCQUFXLEFBQWlDLEFBQUM7QUFDekUsWUFBTSxBQUFpQixvQkFBVyxBQUFlLEFBQUM7QUFFbEQsQUFBTSxlQUFDO0FBQ0gsZ0JBQU0sQUFBSSxPQUFXLG1CQUFnQixpQkFBQyxBQUFTLFlBQUcsQUFBMEMsQUFBQyxBQUFDO0FBQzlGLGdCQUFNLEFBQWlCLG9CQUF1Qix1QkFBb0IscUJBQUMsQUFBUyxVQUN4RSxBQUFJLHdCQUVHLGdCQUFzQixBQUVoQyxBQUFDO0FBRUYsQUFBYyw2QkFBRyxBQUFpQixrQkFBQyxBQUFpQixBQUFFLEFBQUMsQUFDM0Q7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBNkUsK0VBQUU7QUFDOUUsbUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBYyxnQkFBRSxBQUFzQixBQUFDLEFBQUMsQUFDekQ7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBNkUsK0VBQUU7QUFDOUUsbUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBYyxnQkFBRSxBQUFpQixBQUFDLEFBQUMsQUFDcEQ7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnY2hhaSc7XG5cbmltcG9ydCB7IElPYmZ1c2NhdGlvblJlc3VsdCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NyYy9pbnRlcmZhY2VzL0lPYmZ1c2NhdGlvblJlc3VsdCc7XG5cbmltcG9ydCB7IE5PX0NVU1RPTV9OT0RFU19QUkVTRVQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zcmMvb3B0aW9ucy9wcmVzZXRzL05vQ3VzdG9tTm9kZXMnO1xuXG5pbXBvcnQgeyBnZXRSZWdFeHBNYXRjaCB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvZ2V0UmVnRXhwTWF0Y2gnO1xuaW1wb3J0IHsgcmVhZEZpbGVBc1N0cmluZyB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvcmVhZEZpbGVBc1N0cmluZyc7XG5cbmltcG9ydCB7IEphdmFTY3JpcHRPYmZ1c2NhdG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3JjL0phdmFTY3JpcHRPYmZ1c2NhdG9yJztcblxuZGVzY3JpYmUoJ0NhdGNoQ2xhdXNlVHJhbnNmb3JtZXInLCAoKSA9PiB7XG4gICAgbGV0IG9iZnVzY2F0ZWRDb2RlOiBzdHJpbmc7XG5cbiAgICBkZXNjcmliZSgnY2hhbmdlQ29udHJvbEZsb3cgKGNhdGNoQ2xhdXNlTm9kZTogRVNUcmVlLkNhdGNoQ2xhdXNlKTogdm9pZCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgcGFyYW1OYW1lUmVnRXhwOiBSZWdFeHAgPSAvY2F0Y2ggKlxcKChfMHgoW2EtZjAtOV0pezQsNn0pXFwpICpcXHsvO1xuICAgICAgICBjb25zdCBib2R5UGFyYW1OYW1lUmVnRXhwOiBSZWdFeHAgPSAvY29uc29sZVxcWydsb2cnXFxdXFwoKF8weChbYS1mMC05XSl7NCw2fSlcXCk7LztcblxuICAgICAgICBsZXQgZmlyc3RNYXRjaDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2Vjb25kTWF0Y2g6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgICAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL2lucHV0LmpzJyk7XG4gICAgICAgICAgICBjb25zdCBvYmZ1c2NhdGlvblJlc3VsdDogSU9iZnVzY2F0aW9uUmVzdWx0ID0gSmF2YVNjcmlwdE9iZnVzY2F0b3Iub2JmdXNjYXRlKFxuICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAuLi5OT19DVVNUT01fTk9ERVNfUFJFU0VUXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgb2JmdXNjYXRlZENvZGUgPSBvYmZ1c2NhdGlvblJlc3VsdC5nZXRPYmZ1c2NhdGVkQ29kZSgpO1xuICAgICAgICAgICAgZmlyc3RNYXRjaCA9IGdldFJlZ0V4cE1hdGNoKG9iZnVzY2F0ZWRDb2RlLCBwYXJhbU5hbWVSZWdFeHApO1xuICAgICAgICAgICAgc2Vjb25kTWF0Y2ggPSBnZXRSZWdFeHBNYXRjaChvYmZ1c2NhdGVkQ29kZSwgYm9keVBhcmFtTmFtZVJlZ0V4cCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdtYXRjaCAjMTogc2hvdWxkIHRyYW5zZm9ybSBjYXRjaCBjbGF1c2Ugbm9kZScsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgcGFyYW1OYW1lUmVnRXhwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ21hdGNoICMyOiBzaG91bGQgdHJhbnNmb3JtIGNhdGNoIGNsYXVzZSBub2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0ZWRDb2RlLCBib2R5UGFyYW1OYW1lUmVnRXhwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ2NhdGNoIGNsYXVzZSBhcmd1bWVudHMgcGFyYW0gbmFtZSBhbmQgcGFyYW0gbmFtZSBpbiBib2R5IHNob3VsZCBiZSBzYW1lJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGZpcnN0TWF0Y2gsIHNlY29uZE1hdGNoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnb2JqZWN0IHBhdHRlcm4gYXMgcGFyYW1ldGVyJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBmdW5jdGlvblBhcmFtZXRlck1hdGNoOiBSZWdFeHAgPSAvXFx9ICpjYXRjaCAqXFwoXFx7ICpuYW1lICpcXH1cXCkgKlxcey87XG4gICAgICAgIGNvbnN0IGZ1bmN0aW9uQm9keU1hdGNoOiBSZWdFeHAgPSAvcmV0dXJuICpuYW1lOy87XG5cbiAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGU6IHN0cmluZyA9IHJlYWRGaWxlQXNTdHJpbmcoX19kaXJuYW1lICsgJy9maXh0dXJlcy9vYmplY3QtcGF0dGVybi1hcy1wYXJhbWV0ZXIuanMnKTtcbiAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoXG4gICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC4uLk5PX0NVU1RPTV9OT0RFU19QUkVTRVRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdtYXRjaCAjMTogc2hvdWxkblxcJ3QgdHJhbnNmb3JtIGZ1bmN0aW9uIHBhcmFtZXRlciBvYmplY3QgcGF0dGVybiBpZGVudGlmaWVyJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0ZWRDb2RlLCBmdW5jdGlvblBhcmFtZXRlck1hdGNoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ21hdGNoICMyOiBzaG91bGRuXFwndCB0cmFuc2Zvcm0gZnVuY3Rpb24gcGFyYW1ldGVyIG9iamVjdCBwYXR0ZXJuIGlkZW50aWZpZXInLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQubWF0Y2gob2JmdXNjYXRlZENvZGUsIGZ1bmN0aW9uQm9keU1hdGNoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==