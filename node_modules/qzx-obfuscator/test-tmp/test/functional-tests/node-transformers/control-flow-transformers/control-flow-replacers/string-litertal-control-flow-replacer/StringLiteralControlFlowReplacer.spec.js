"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../../src/JavaScriptObfuscator");
describe('StringLiteralControlFlowReplacer', function () {
    describe('replace (literalNode: ESTree.Literal,parentNode: ESTree.Node,controlFlowStorage: IStorage <ICustomNode>)', function () {
        var controlFlowStorageStringLiteralRegExp = /var *_0x([a-f0-9]){4,6} *= *\{'\w{5}' *: *'test'\};/;
        var controlFlowStorageCallRegExp = /var *_0x([a-f0-9]){4,6} *= *_0x([a-f0-9]){4,6}\['\w{5}'\];/;
        var obfuscatedCode = void 0;
        before(function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input-1.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should add string literal node as property of control flow storage node', function () {
            chai_1.assert.match(obfuscatedCode, controlFlowStorageStringLiteralRegExp);
        });
        it('should replace string literal node with call to control flow storage node', function () {
            chai_1.assert.match(obfuscatedCode, controlFlowStorageCallRegExp);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyaW5nTGl0ZXJhbENvbnRyb2xGbG93UmVwbGFjZXIuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Rlc3QvZnVuY3Rpb25hbC10ZXN0cy9ub2RlLXRyYW5zZm9ybWVycy9jb250cm9sLWZsb3ctdHJhbnNmb3JtZXJzL2NvbnRyb2wtZmxvdy1yZXBsYWNlcnMvc3RyaW5nLWxpdGVydGFsLWNvbnRyb2wtZmxvdy1yZXBsYWNlci9TdHJpbmdMaXRlcmFsQ29udHJvbEZsb3dSZXBsYWNlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFCQUE4QjtBQUk5Qiw4QkFBNkY7QUFFN0YsaUNBQTJFO0FBRTNFLHFDQUFrRjtBQUVsRixBQUFRLFNBQUMsQUFBa0Msb0NBQUU7QUFDekMsQUFBUSxhQUFDLEFBQTBHLDRHQUFFO0FBQ2pILFlBQU0sQUFBcUMsd0NBQVcsQUFBcUQsQUFBQztBQUM1RyxZQUFNLEFBQTRCLCtCQUFXLEFBQTRELEFBQUM7QUFFMUcsWUFBSSxBQUFzQixBQUFDO0FBRTNCLEFBQU0sZUFBQztBQUNILGdCQUFNLEFBQUksT0FBVyxtQkFBZ0IsaUJBQUMsQUFBUyxZQUFHLEFBQXNCLEFBQUMsQUFBQztBQUMxRSxnQkFBTSxBQUFpQixvQkFBdUIsdUJBQW9CLHFCQUFDLEFBQVMsVUFDeEUsQUFBSSx3QkFFRyxnQkFBc0IsMEJBQ3pCLEFBQXFCLHVCQUFFLEFBQUksTUFDM0IsQUFBOEIsZ0NBQUUsQUFBQyxBQUV4QyxBQUFDO0FBRUYsQUFBYyw2QkFBRyxBQUFpQixrQkFBQyxBQUFpQixBQUFFLEFBQUMsQUFDM0Q7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBeUUsMkVBQUU7QUFDMUUsbUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBYyxnQkFBRSxBQUFxQyxBQUFDLEFBQUMsQUFDeEU7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBMkUsNkVBQUU7QUFDNUUsbUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBYyxnQkFBRSxBQUE0QixBQUFDLEFBQUMsQUFDL0Q7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnY2hhaSc7XG5cbmltcG9ydCB7IElPYmZ1c2NhdGlvblJlc3VsdCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9pbnRlcmZhY2VzL0lPYmZ1c2NhdGlvblJlc3VsdCc7XG5cbmltcG9ydCB7IE5PX0NVU1RPTV9OT0RFU19QUkVTRVQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9zcmMvb3B0aW9ucy9wcmVzZXRzL05vQ3VzdG9tTm9kZXMnO1xuXG5pbXBvcnQgeyByZWFkRmlsZUFzU3RyaW5nIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vaGVscGVycy9yZWFkRmlsZUFzU3RyaW5nJztcblxuaW1wb3J0IHsgSmF2YVNjcmlwdE9iZnVzY2F0b3IgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9zcmMvSmF2YVNjcmlwdE9iZnVzY2F0b3InO1xuXG5kZXNjcmliZSgnU3RyaW5nTGl0ZXJhbENvbnRyb2xGbG93UmVwbGFjZXInLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJ3JlcGxhY2UgKGxpdGVyYWxOb2RlOiBFU1RyZWUuTGl0ZXJhbCxwYXJlbnROb2RlOiBFU1RyZWUuTm9kZSxjb250cm9sRmxvd1N0b3JhZ2U6IElTdG9yYWdlIDxJQ3VzdG9tTm9kZT4pJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb250cm9sRmxvd1N0b3JhZ2VTdHJpbmdMaXRlcmFsUmVnRXhwOiBSZWdFeHAgPSAvdmFyICpfMHgoW2EtZjAtOV0pezQsNn0gKj0gKlxceydcXHd7NX0nICo6ICondGVzdCdcXH07LztcbiAgICAgICAgY29uc3QgY29udHJvbEZsb3dTdG9yYWdlQ2FsbFJlZ0V4cDogUmVnRXhwID0gL3ZhciAqXzB4KFthLWYwLTldKXs0LDZ9ICo9ICpfMHgoW2EtZjAtOV0pezQsNn1cXFsnXFx3ezV9J1xcXTsvO1xuXG4gICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTogc3RyaW5nO1xuXG4gICAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb2RlOiBzdHJpbmcgPSByZWFkRmlsZUFzU3RyaW5nKF9fZGlybmFtZSArICcvZml4dHVyZXMvaW5wdXQtMS5qcycpO1xuICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVCxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbEZsb3dGbGF0dGVuaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sRmxvd0ZsYXR0ZW5pbmdUaHJlc2hvbGQ6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBvYmZ1c2NhdGVkQ29kZSA9IG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYWRkIHN0cmluZyBsaXRlcmFsIG5vZGUgYXMgcHJvcGVydHkgb2YgY29udHJvbCBmbG93IHN0b3JhZ2Ugbm9kZScsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgY29udHJvbEZsb3dTdG9yYWdlU3RyaW5nTGl0ZXJhbFJlZ0V4cCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmVwbGFjZSBzdHJpbmcgbGl0ZXJhbCBub2RlIHdpdGggY2FsbCB0byBjb250cm9sIGZsb3cgc3RvcmFnZSBub2RlJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0ZWRDb2RlLCBjb250cm9sRmxvd1N0b3JhZ2VDYWxsUmVnRXhwKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==