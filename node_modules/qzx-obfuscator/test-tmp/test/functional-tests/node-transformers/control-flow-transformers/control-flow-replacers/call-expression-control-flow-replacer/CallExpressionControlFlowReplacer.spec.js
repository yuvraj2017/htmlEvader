"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../../src/JavaScriptObfuscator");
describe('CallExpressionControlFlowReplacer', function () {
    this.timeout(100000);
    describe('replace (callExpressionNode: ESTree.CallExpression,parentNode: ESTree.Node,controlFlowStorage: IStorage <ICustomNode>)', function () {
        describe('variant #1 - single call expression', function () {
            var controlFlowStorageCallRegExp = /var *_0x([a-f0-9]){4,6} *= *_0x([a-f0-9]){4,6}\['\w{5}'\]\(_0x([a-f0-9]){4,6}, *0x1, *0x2\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input-1.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should replace call expression node with call to control flow storage node', function () {
                chai_1.assert.match(obfuscatedCode, controlFlowStorageCallRegExp);
            });
        });
        describe('variant #2 - multiple call expressions with threshold = 1', function () {
            var expectedMatchErrorsCount = 0;
            var expectedChance = 0.5;
            var samplesCount = 1000;
            var delta = 0.1;
            var controlFlowStorageCallRegExp1 = /var *_0x(?:[a-f0-9]){4,6} *= *(_0x([a-f0-9]){4,6}\['\w{5}'\])\(_0x([a-f0-9]){4,6}, *0x1, *0x2\);/;
            var controlFlowStorageCallRegExp2 = /var *_0x(?:[a-f0-9]){4,6} *= *(_0x([a-f0-9]){4,6}\['\w{5}'\])\(_0x([a-f0-9]){4,6}, *0x2, *0x3\);/;
            var matchErrorsCount = 0,
                usingExistingIdentifierChance = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input-2.js');
                var obfuscationResult = void 0,
                    obfuscatedCode = void 0,
                    firstMatchArray = void 0,
                    secondMatchArray = void 0,
                    firstMatch = void 0,
                    secondMatch = void 0,
                    equalsValue = 0;
                for (var i = 0; i < samplesCount; i++) {
                    obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                    obfuscatedCode = obfuscationResult.getObfuscatedCode();
                    firstMatchArray = obfuscatedCode.match(controlFlowStorageCallRegExp1);
                    secondMatchArray = obfuscatedCode.match(controlFlowStorageCallRegExp2);
                    if (!firstMatchArray || !secondMatchArray) {
                        matchErrorsCount++;
                        continue;
                    }
                    firstMatch = firstMatchArray ? firstMatchArray[1] : undefined;
                    secondMatch = secondMatchArray ? secondMatchArray[1] : undefined;
                    if (firstMatch === secondMatch) {
                        equalsValue++;
                    }
                }
                usingExistingIdentifierChance = equalsValue / samplesCount;
            });
            it('should replace call expression node by call to control flow storage node', function () {
                chai_1.assert.equal(matchErrorsCount, expectedMatchErrorsCount);
            });
            it('should use existing identifier for control flow storage with expected chance', function () {
                chai_1.assert.closeTo(usingExistingIdentifierChance, expectedChance, delta);
            });
        });
        describe('variant #3 - call expression callee is member expression node', function () {
            var regExp = /var *_0x([a-f0-9]){4,6} *= *_0x([a-f0-9]){4,6}\['sum'\]\(0x1, *0x2\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input-3.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('shouldn\'t replace call expression node with call to control flow storage node', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,