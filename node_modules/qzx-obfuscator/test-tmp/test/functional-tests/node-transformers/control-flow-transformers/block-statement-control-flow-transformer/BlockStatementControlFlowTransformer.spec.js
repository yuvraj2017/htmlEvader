"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../src/options/presets/NoCustomNodes");
var getRegExpMatch_1 = require("../../../../helpers/getRegExpMatch");
var readFileAsString_1 = require("../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../src/JavaScriptObfuscator");
var getStatementRegExp = function getStatementRegExp(hexNumber) {
    return new RegExp("console\\['log'\\]\\(" + hexNumber + "\\);");
};
describe('BlockStatementControlFlowTransformer', function () {
    this.timeout(100000);
    describe('transformNode (blockStatementNode: ESTree.BlockStatement): ESTree.Node', function () {
        describe('variant #1: 5 simple statements', function () {
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input-1.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            describe('`console.log` statements', function () {
                var statementRegExp1 = getStatementRegExp('0x1');
                var statementRegExp2 = getStatementRegExp('0x2');
                var statementRegExp3 = getStatementRegExp('0x3');
                var statementRegExp4 = getStatementRegExp('0x4');
                var statementRegExp5 = getStatementRegExp('0x5');
                it('should save statement', function () {
                    chai_1.assert.match(obfuscatedCode, statementRegExp1);
                });
                it('should save statement', function () {
                    chai_1.assert.match(obfuscatedCode, statementRegExp2);
                });
                it('should save statement', function () {
                    chai_1.assert.match(obfuscatedCode, statementRegExp3);
                });
                it('should save statement', function () {
                    chai_1.assert.match(obfuscatedCode, statementRegExp4);
                });
                it('should save statement', function () {
                    chai_1.assert.match(obfuscatedCode, statementRegExp5);
                });
            });
            describe('block statement statements', function () {
                var switchCaseRegExp = /switch *\(_0x([a-f0-9]){4,6}\[_0x([a-f0-9]){4,6}\+\+\]\) *\{/;
                var switchCaseLengthRegExp = /case *'[0-5]': *console\['log'\]\(0x[0-6]\);/g;
                var expectedSwitchCaseLength = 5;
                var switchCaseLength = void 0;
                before(function () {
                    switchCaseLength = obfuscatedCode.match(switchCaseLengthRegExp).length;
                });
                it('should wrap block statement statements in switch-case structure', function () {
                    chai_1.assert.match(obfuscatedCode, switchCaseRegExp);
                });
                it('each statement should be wrapped by switch-case structure', function () {
                    chai_1.assert.equal(switchCaseLength, expectedSwitchCaseLength);
                });
            });
            describe('switch-case map', function () {
                var switchCaseMapVariableRegExp = /var *_0x(?:[a-f0-9]){4,6} *= *_0x(?:[a-f0-9]){4,6}\['.*'\]\['split'\]\('\|'\)/;
                var switchCaseMapStringRegExp = /var *_0x(?:[a-f0-9]){4,6} *= *\{'.*' *: *'(.*)'\};/;
                var expectedSwitchCasesSequence = ['0', '1', '2', '3', '4'];
                var switchCaseMap = void 0;
                before(function () {
                    var switchCaseMapMatch = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, switchCaseMapStringRegExp);
                    switchCaseMap = switchCaseMapMatch.split('|').sort();
                });
                it('should create switch-case map variable', function () {
                    chai_1.assert.match(obfuscatedCode, switchCaseMapVariableRegExp);
                });
                it('should create valid switch-case map variable with order of switch cases sequence', function () {
                    chai_1.assert.deepEqual(switchCaseMap, expectedSwitchCasesSequence);
                });
            });
        });
        describe('variant #2: 5 simple statements inside while loop without break or continue statement', function () {
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input-2.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1, unicodeEscapeSequence: false }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            describe('`console.log` statements', function () {
                var statementRegExp1 = getStatementRegExp('0x1');
                var statementRegExp2 = getStatementRegExp('0x2');
                var statementRegExp3 = getStatementRegExp('0x3');
                var statementRegExp4 = getStatementRegExp('0x4');
                var statementRegExp5 = getStatementRegExp('0x5');
                it('should save statement', function () {
                    chai_1.assert.match(obfuscatedCode, statementRegExp1);
                });
                it('should save statement', function () {
                    chai_1.assert.match(obfuscatedCode, statementRegExp2);
                });
                it('should save statement', function () {
                    chai_1.assert.match(obfuscatedCode, statementRegExp3);
                });
                it('should save statement', function () {
                    chai_1.assert.match(obfuscatedCode, statementRegExp4);
                });
                it('should save statement', function () {
                    chai_1.assert.match(obfuscatedCode, statementRegExp5);
                });
            });
            describe('block statement statements', function () {
                var switchCaseRegExp = /switch *\(_0x([a-f0-9]){4,6}\[_0x([a-f0-9]){4,6}\+\+\]\) *\{/;
                var switchCaseLengthRegExp = /case *'[0-5]': *console\['log'\]\(0x[0-6]\);/g;
                var expectedSwitchCaseLength = 5;
                var switchCaseLength = void 0;
                before(function () {
                    switchCaseLength = obfuscatedCode.match(switchCaseLengthRegExp).length;
                });
                it('should wrap block statement statements in switch-case structure', function () {
                    chai_1.assert.match(obfuscatedCode, switchCaseRegExp);
                });
                it('each statement should be wrapped by switch-case structure', function () {
                    chai_1.assert.equal(switchCaseLength, expectedSwitchCaseLength);
                });
            });
            describe('switch-case map', function () {
                var switchCaseMapVariableRegExp = /var *_0x(?:[a-f0-9]){4,6} *= *_0x(?:[a-f0-9]){4,6}\['.*'\]\['split'\]\('\|'\)/;
                var switchCaseMapStringRegExp = /var *_0x(?:[a-f0-9]){4,6} *= *\{'.*' *: *'(.*)'\};/;
                var expectedSwitchCasesSequence = ['0', '1', '2', '3', '4'];
                var switchCaseMap = void 0;
                before(function () {
                    var switchCaseMapMatch = getRegExpMatch_1.getRegExpMatch(obfuscatedCode, switchCaseMapStringRegExp);
                    switchCaseMap = switchCaseMapMatch.split('|').sort();
                });
                it('should create switch-case map variable', function () {
                    chai_1.assert.match(obfuscatedCode, switchCaseMapVariableRegExp);
                });
                it('should create valid switch-case map variable with order of switch cases sequence', function () {
                    chai_1.assert.deepEqual(switchCaseMap, expectedSwitchCasesSequence);
                });
            });
        });
        describe('variant #3: statements length less then 5 statements', function () {
            var statementRegExp = /^\(function *\( *\) *\{ *console\['log'\]\(0x1\); *\} *\( *\) *\);$/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/one-statement.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('shouldn\'t transform block statement', function () {
                chai_1.assert.match(obfuscatedCode, statementRegExp);
            });
        });
        describe('variant #4: block statement contain variable declaration with `const` kind', function () {
            var statementRegExp = /^\(function *\( *\) *\{ *const *_0x([a-f0-9]){4,6} *= *0x1; *console\['log'\]\(0x1\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/const-declaration.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('shouldn\'t transform block statement', function () {
                chai_1.assert.match(obfuscatedCode, statementRegExp);
            });
        });
        describe('variant #5: block statement contain variable declaration with `let` kind', function () {
            var statementRegExp = /^\(function *\( *\) *\{ *let *_0x([a-f0-9]){4,6} *= *0x1; *console\['log'\]\(0x1\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/let-declaration.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('shouldn\'t transform block statement', function () {
                chai_1.assert.match(obfuscatedCode, statementRegExp);
            });
        });
        describe('variant #6: block statement contain break statement', function () {
            var statementRegExp = /^\(function *\( *\) *\{ *while *\(!!\[\]\) *\{ *break; *console\['log'\]\(0x1\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/break-statement.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('shouldn\'t transform block statement', function () {
                chai_1.assert.match(obfuscatedCode, statementRegExp);
            });
        });
        describe('variant #7: block statement contain continue statement', function () {
            var statementRegExp = /^\(function *\( *\) *\{ *while *\(!!\[\]\) *\{ *continue; *console\['log'\]\(0x1\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/continue-statement.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('shouldn\'t transform block statement', function () {
                chai_1.assert.match(obfuscatedCode, statementRegExp);
            });
        });
        describe('variant #8: block statement contain function declaration', function () {
            var statementRegExp = /^\(function *\( *\) *\{ *function *_0x([a-f0-9]){4,6} *\( *\) *\{ *\} *console\['log'\]\(0x1\);/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/function-declaration.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('shouldn\'t transform block statement', function () {
                chai_1.assert.match(obfuscatedCode, statementRegExp);
            });
        });
        describe('variant #9: `controlFlowFlatteningThreshold` chance', function () {
            var samples = 1000;
            var delta = 0.1;
            var controlFlowFlatteningThreshold = 0.5;
            var regExp1 = /switch *\(_0x([a-f0-9]){4,6}\[_0x([a-f0-9]){4,6}\+\+\]\) *\{/g;
            var regExp2 = /\(function *\( *\) *\{ *console\['log'\]\(0x1\);/g;
            var transformedStatementPercentage = void 0,
                untouchedStatementPercentage = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input-1.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code.repeat(samples), Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: controlFlowFlatteningThreshold }));
                var transformedStatementMatchesLength = obfuscationResult.getObfuscatedCode().match(regExp1).length;
                var untouchedStatementMatchesLength = obfuscationResult.getObfuscatedCode().match(regExp2).length;
                transformedStatementPercentage = transformedStatementMatchesLength / samples;
                untouchedStatementPercentage = untouchedStatementMatchesLength / samples;
            });
            it('should transform block statement with `controlFlowFlatteningThreshold` chance', function () {
                chai_1.assert.closeTo(transformedStatementPercentage, controlFlowFlatteningThreshold, delta);
            });
            it('should keep block statement with (1 - `controlFlowFlatteningThreshold`) chance', function () {
                chai_1.assert.closeTo(untouchedStatementPercentage, controlFlowFlatteningThreshold, delta);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,