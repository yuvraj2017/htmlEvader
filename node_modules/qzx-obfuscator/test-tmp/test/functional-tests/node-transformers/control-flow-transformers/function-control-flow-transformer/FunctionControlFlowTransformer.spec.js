"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../src/JavaScriptObfuscator");
describe('FunctionControlFlowTransformer', function () {
    this.timeout(100000);
    var variableMatch = '_0x([a-f0-9]){4,6}';
    var rootControlFlowStorageNodeMatch = "" + ("var *" + variableMatch + " *= *\\{") + ("'\\w{5}' *: *function *" + variableMatch + " *\\(" + variableMatch + ", *" + variableMatch + "\\) *\\{") + ("return *" + variableMatch + " *\\+ *" + variableMatch + ";") + "\\}" + "\\};" + "";
    var innerControlFlowStorageNodeMatch = "" + ("var *" + variableMatch + " *= *\\{") + ("'\\w{5}' *: *function *" + variableMatch + " *\\(" + variableMatch + ", *" + variableMatch + "\\) *\\{") + ("return *" + variableMatch + "\\['\\w{5}'\\]\\(" + variableMatch + ", *" + variableMatch + "\\);") + "\\}" + "\\};" + "";
    describe('transformNode (functionNode: ESTree.Function): ESTree.Node', function () {
        describe('variant #1 - single `control flow storage` node with single item', function () {
            var regexp = new RegExp(rootControlFlowStorageNodeMatch);
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input-1.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should add `control flow storage` node to the obfuscated code', function () {
                chai_1.assert.match(obfuscatedCode, regexp);
            });
        });
        describe('variant #2 - two `control flow storage` nodes: root and inner', function () {
            var expectedAppendToScopeThreshold = 0.5;
            var samplesCount = 1000;
            var delta = 0.1;
            var regExp1 = new RegExp("\\(function\\(\\) *\\{ *" + rootControlFlowStorageNodeMatch, 'g');
            var regExp2 = new RegExp("function *" + variableMatch + " *\\(\\) *\\{ *" + innerControlFlowStorageNodeMatch, 'g');
            var appendToScopeThreshold = 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input-2.js');
                var obfuscationResult = void 0,
                    obfuscatedCode = void 0,
                    totalValue = 0;
                for (var i = 0; i < samplesCount; i++) {
                    obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                    obfuscatedCode = obfuscationResult.getObfuscatedCode();
                    if (regExp1.test(obfuscatedCode)) {
                        totalValue += obfuscatedCode.match(regExp1).length;
                        if (regExp2.test(obfuscatedCode)) {
                            totalValue += obfuscatedCode.match(regExp2).length;
                        }
                    }
                }
                appendToScopeThreshold = (totalValue - samplesCount) / samplesCount;
            });
            it('should add two `control flow storage` nodes (root and inner) to the obfuscated code in different scopes', function () {
                chai_1.assert.closeTo(appendToScopeThreshold, expectedAppendToScopeThreshold, delta);
            });
        });
        describe('variant #3 - single `control flow storage` node with multiple items', function () {
            var regexp = new RegExp("var *" + variableMatch + " *= *\\{" + ("'\\w{5}' *: *function *" + variableMatch + " *\\(" + variableMatch + ", *" + variableMatch + "\\) *\\{") + ("return *" + variableMatch + " *\\+ *" + variableMatch + ";") + "\\}, *" + ("'\\w{5}' *: *function *" + variableMatch + " *\\(" + variableMatch + ", *" + variableMatch + "\\) *\\{") + ("return *" + variableMatch + " *- *" + variableMatch + ";") + "\\}" + "\\};");
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/multiple-items.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should add `control flow storage` node with multiple items to the obfuscated code', function () {
                chai_1.assert.match(obfuscatedCode, regexp);
            });
        });
        describe('variant #4 - transformed node in the root block scope', function () {
            var regExp = /^var *test *= *0x1 *\+ *0x2;$/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/root-block-scope-1.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should\'t add control flow storage node', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('variant #5 - transformed nodes not in the root block scope', function () {
            var expectedValue = 0;
            var samplesCount = 20;
            var regExp = new RegExp("var *[a-zA-Z]{6} *= *\\{" + ("'\\w{5}' *: *function *_0x[0-9] *\\(" + variableMatch + ", *" + variableMatch + "\\) *\\{") + ("return *" + variableMatch + " *\\+ *" + variableMatch + ";") + "\\}" + "\\};");
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/root-block-scope-2.js');
            var totalValue = 0;
            before(function () {
                for (var i = 0; i < samplesCount; i++) {
                    var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                    var obfuscatedCode = obfuscationResult.getObfuscatedCode();
                    if (regExp.test(obfuscatedCode)) {
                        totalValue++;
                    }
                }
            });
            it('should\'t add control flow storage node to the root block scope', function () {
                chai_1.assert.equal(totalValue, expectedValue);
            });
        });
        describe('variant #6 - threshold is `0`', function () {
            var regexp = /var *_0x([a-f0-9]){4,6} *= *0x1 *\+ *0x2;/;
            var controlFlowStorageRegExp = new RegExp(rootControlFlowStorageNodeMatch);
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/zero-threshold.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 0 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('shouldn\'t add call to control flow storage node to the obfuscated code', function () {
                chai_1.assert.match(obfuscatedCode, regexp);
            });
            it('shouldn\'t add `control flow storage` node to the obfuscated code', function () {
                chai_1.assert.notMatch(obfuscatedCode, controlFlowStorageRegExp);
            });
        });
        describe('arrow function expression', function () {
            describe('variant #1 - arrow function expression with body', function () {
                var regexp = new RegExp(rootControlFlowStorageNodeMatch);
                var obfuscatedCode = void 0;
                before(function () {
                    var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/arrow-function-expression-with-body.js');
                    var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                    obfuscatedCode = obfuscationResult.getObfuscatedCode();
                });
                it('should add `control flow storage` node to the obfuscated code', function () {
                    chai_1.assert.match(obfuscatedCode, regexp);
                });
            });
            describe('variant #2 - arrow function expression without body', function () {
                var regexp = new RegExp("var *" + variableMatch + " *= *\\(\\) *=> *0x1 *\\+ *0x2;");
                var obfuscatedCode = void 0;
                before(function () {
                    var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/arrow-function-expression-without-body.js');
                    var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { controlFlowFlattening: true, controlFlowFlatteningThreshold: 1 }));
                    obfuscatedCode = obfuscationResult.getObfuscatedCode();
                });
                it('shouldn\'t add `control flow storage` node to the obfuscated code', function () {
                    chai_1.assert.match(obfuscatedCode, regexp);
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,