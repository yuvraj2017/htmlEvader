"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../src/JavaScriptObfuscator");
describe('MethodDefinitionTransformer', function () {
    var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/input.js');
    describe('variant #1: default behaviour', function () {
        var regExp = /\['bar'\]\(\)\{\}/;
        var obfuscatedCode = void 0;
        before(function () {
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should replace method definition node `key` property with square brackets literal', function () {
            chai_1.assert.match(obfuscatedCode, regExp);
        });
    });
    describe('variant #2: `stringArray` option is enabled', function () {
        var stringArrayRegExp = /var *_0x([a-f0-9]){4} *= *\['bar'\];/;
        var stringArrayCallRegExp = /\[_0x([a-f0-9]){4}\('0x0'\)\]\(\)\{\}/;
        var obfuscatedCode = void 0;
        before(function () {
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('should add method definition node `key` property to string array', function () {
            chai_1.assert.match(obfuscatedCode, stringArrayRegExp);
        });
        it('should replace method definition node `key` property with call to string array', function () {
            chai_1.assert.match(obfuscatedCode, stringArrayCallRegExp);
        });
    });
    describe('variant #3: `constructor` key', function () {
        var regExp = /constructor\(\)\{\}/;
        var obfuscatedCode = void 0;
        before(function () {
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
            obfuscatedCode = obfuscationResult.getObfuscatedCode();
        });
        it('shouldn\'t transform method definition node with `constructor` key', function () {
            chai_1.assert.match(obfuscatedCode, regExp);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0aG9kRGVmaW5pdGlvblRyYW5zZm9ybWVyLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZXN0L2Z1bmN0aW9uYWwtdGVzdHMvbm9kZS10cmFuc2Zvcm1lcnMvY29udmVydGluZy10cmFuc2Zvcm1lcnMvbWV0aG9kLWRlZmluaXRpb24tdHJhbnNmb3JtZXIvTWV0aG9kRGVmaW5pdGlvblRyYW5zZm9ybWVyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUJBQThCO0FBSTlCLDhCQUEwRjtBQUUxRixpQ0FBd0U7QUFFeEUscUNBQStFO0FBRS9FLEFBQVEsU0FBQyxBQUE2QiwrQkFBRTtBQUNwQyxRQUFNLEFBQUksT0FBVyxtQkFBZ0IsaUJBQUMsQUFBUyxZQUFHLEFBQW9CLEFBQUMsQUFBQztBQUV4RSxBQUFRLGFBQUMsQUFBK0IsaUNBQUU7QUFDdEMsWUFBTSxBQUFNLFNBQVcsQUFBbUIsQUFBQztBQUUzQyxZQUFJLEFBQXNCLEFBQUM7QUFFM0IsQUFBTSxlQUFDO0FBQ0gsZ0JBQU0sQUFBaUIsb0JBQXVCLHVCQUFvQixxQkFBQyxBQUFTLFVBQ3hFLEFBQUksd0JBRUcsZ0JBQXNCLEFBRWhDLEFBQUM7QUFFRixBQUFjLDZCQUFHLEFBQWlCLGtCQUFDLEFBQWlCLEFBQUUsQUFBQyxBQUMzRDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsV0FBQyxBQUFtRixxRkFBRTtBQUNwRixtQkFBTSxPQUFDLEFBQUssTUFBQyxBQUFjLGdCQUFFLEFBQU0sQUFBQyxBQUFDLEFBQ3pDO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGFBQUMsQUFBNkMsK0NBQUU7QUFDcEQsWUFBTSxBQUFpQixvQkFBVyxBQUFzQyxBQUFDO0FBQ3pFLFlBQU0sQUFBcUIsd0JBQVcsQUFBdUMsQUFBQztBQUU5RSxZQUFJLEFBQXNCLEFBQUM7QUFFM0IsQUFBTSxlQUFDO0FBQ0gsZ0JBQU0sQUFBaUIsb0JBQXVCLHVCQUFvQixxQkFBQyxBQUFTLFVBQ3hFLEFBQUksd0JBRUcsZ0JBQXNCLDBCQUN6QixBQUFXLGFBQUUsQUFBSSxNQUNqQixBQUFvQixzQkFBRSxBQUFDLEFBRTlCLEFBQUM7QUFFRixBQUFjLDZCQUFHLEFBQWlCLGtCQUFDLEFBQWlCLEFBQUUsQUFBQyxBQUMzRDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsV0FBQyxBQUFrRSxvRUFBRTtBQUNuRSxtQkFBTSxPQUFDLEFBQUssTUFBQyxBQUFjLGdCQUFHLEFBQWlCLEFBQUMsQUFBQyxBQUNyRDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUUsV0FBQyxBQUFnRixrRkFBRTtBQUNqRixtQkFBTSxPQUFDLEFBQUssTUFBQyxBQUFjLGdCQUFHLEFBQXFCLEFBQUMsQUFBQyxBQUN6RDtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBUSxhQUFDLEFBQStCLGlDQUFFO0FBQ3RDLFlBQU0sQUFBTSxTQUFXLEFBQXFCLEFBQUM7QUFFN0MsWUFBSSxBQUFzQixBQUFDO0FBRTNCLEFBQU0sZUFBQztBQUNILGdCQUFNLEFBQWlCLG9CQUF1Qix1QkFBb0IscUJBQUMsQUFBUyxVQUN4RSxBQUFJLHdCQUVHLGdCQUFzQixBQUVoQyxBQUFDO0FBRUYsQUFBYyw2QkFBRyxBQUFpQixrQkFBQyxBQUFpQixBQUFFLEFBQUMsQUFDM0Q7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLFdBQUMsQUFBb0Usc0VBQUU7QUFDckUsbUJBQU0sT0FBQyxBQUFLLE1BQUMsQUFBYyxnQkFBRSxBQUFNLEFBQUMsQUFBQyxBQUN6QztBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQgfSBmcm9tICdjaGFpJztcblxuaW1wb3J0IHsgSU9iZnVzY2F0aW9uUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3JjL2ludGVyZmFjZXMvSU9iZnVzY2F0aW9uUmVzdWx0JztcblxuaW1wb3J0IHsgTk9fQ1VTVE9NX05PREVTX1BSRVNFVCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NyYy9vcHRpb25zL3ByZXNldHMvTm9DdXN0b21Ob2Rlcyc7XG5cbmltcG9ydCB7IHJlYWRGaWxlQXNTdHJpbmcgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL3JlYWRGaWxlQXNTdHJpbmcnO1xuXG5pbXBvcnQgeyBKYXZhU2NyaXB0T2JmdXNjYXRvciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NyYy9KYXZhU2NyaXB0T2JmdXNjYXRvcic7XG5cbmRlc2NyaWJlKCdNZXRob2REZWZpbml0aW9uVHJhbnNmb3JtZXInLCAoKSA9PiB7XG4gICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL2lucHV0LmpzJyk7XG5cbiAgICBkZXNjcmliZSgndmFyaWFudCAjMTogZGVmYXVsdCBiZWhhdmlvdXInLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlZ0V4cDogUmVnRXhwID0gL1xcWydiYXInXFxdXFwoXFwpXFx7XFx9LztcblxuICAgICAgICBsZXQgb2JmdXNjYXRlZENvZGU6IHN0cmluZztcblxuICAgICAgICBiZWZvcmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlID0gb2JmdXNjYXRpb25SZXN1bHQuZ2V0T2JmdXNjYXRlZENvZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZXBsYWNlIG1ldGhvZCBkZWZpbml0aW9uIG5vZGUgYGtleWAgcHJvcGVydHkgd2l0aCBzcXVhcmUgYnJhY2tldHMgbGl0ZXJhbCcsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgcmVnRXhwKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgndmFyaWFudCAjMjogYHN0cmluZ0FycmF5YCBvcHRpb24gaXMgZW5hYmxlZCcsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RyaW5nQXJyYXlSZWdFeHA6IFJlZ0V4cCA9IC92YXIgKl8weChbYS1mMC05XSl7NH0gKj0gKlxcWydiYXInXFxdOy87XG4gICAgICAgIGNvbnN0IHN0cmluZ0FycmF5Q2FsbFJlZ0V4cDogUmVnRXhwID0gL1xcW18weChbYS1mMC05XSl7NH1cXCgnMHgwJ1xcKVxcXVxcKFxcKVxce1xcfS87XG5cbiAgICAgICAgbGV0IG9iZnVzY2F0ZWRDb2RlOiBzdHJpbmc7XG5cbiAgICAgICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9iZnVzY2F0aW9uUmVzdWx0OiBJT2JmdXNjYXRpb25SZXN1bHQgPSBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUoXG4gICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC4uLk5PX0NVU1RPTV9OT0RFU19QUkVTRVQsXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ0FycmF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzdHJpbmdBcnJheVRocmVzaG9sZDogMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIG9iZnVzY2F0ZWRDb2RlID0gb2JmdXNjYXRpb25SZXN1bHQuZ2V0T2JmdXNjYXRlZENvZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBhZGQgbWV0aG9kIGRlZmluaXRpb24gbm9kZSBga2V5YCBwcm9wZXJ0eSB0byBzdHJpbmcgYXJyYXknLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQubWF0Y2gob2JmdXNjYXRlZENvZGUsICBzdHJpbmdBcnJheVJlZ0V4cCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmVwbGFjZSBtZXRob2QgZGVmaW5pdGlvbiBub2RlIGBrZXlgIHByb3BlcnR5IHdpdGggY2FsbCB0byBzdHJpbmcgYXJyYXknLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQubWF0Y2gob2JmdXNjYXRlZENvZGUsICBzdHJpbmdBcnJheUNhbGxSZWdFeHApO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd2YXJpYW50ICMzOiBgY29uc3RydWN0b3JgIGtleScsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVnRXhwOiBSZWdFeHAgPSAvY29uc3RydWN0b3JcXChcXClcXHtcXH0vO1xuXG4gICAgICAgIGxldCBvYmZ1c2NhdGVkQ29kZTogc3RyaW5nO1xuXG4gICAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvYmZ1c2NhdGlvblJlc3VsdDogSU9iZnVzY2F0aW9uUmVzdWx0ID0gSmF2YVNjcmlwdE9iZnVzY2F0b3Iub2JmdXNjYXRlKFxuICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAuLi5OT19DVVNUT01fTk9ERVNfUFJFU0VUXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgb2JmdXNjYXRlZENvZGUgPSBvYmZ1c2NhdGlvblJlc3VsdC5nZXRPYmZ1c2NhdGVkQ29kZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkblxcJ3QgdHJhbnNmb3JtIG1ldGhvZCBkZWZpbml0aW9uIG5vZGUgd2l0aCBgY29uc3RydWN0b3JgIGtleScsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGVkQ29kZSwgcmVnRXhwKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==