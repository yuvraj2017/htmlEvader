"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../src/JavaScriptObfuscator");
describe('MemberExpressionTransformer', function () {
    describe('transformation of member expression node with dot notation', function () {
        describe('`stringArray` option is disabled', function () {
            var regExp = /var *test *= *console\['log'\];/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/dot-notation-call.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should replace member expression dot notation call with literal value', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
        describe('`stringArray` option is enabled', function () {
            var stringArrayRegExp = /var *_0x([a-f0-9]){4} *= *\['log'\];/;
            var stringArrayCallRegExp = /var *test *= *console\[_0x([a-f0-9]){4}\('0x0'\)\];/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/dot-notation-call.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should add member expression identifier to string array', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayRegExp);
            });
            it('should replace member expression dot notation call with call to string array', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayCallRegExp);
            });
        });
    });
    describe('transformation of member expression node with square brackets', function () {
        describe('variant #1: square brackets literal ', function () {
            var stringArrayRegExp = /var *_0x([a-f0-9]){4} *= *\['log'\];/;
            var stringArrayCallRegExp = /var *test *= *console\[_0x([a-f0-9]){4}\('0x0'\)\];/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/square-brackets-call.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { stringArray: true, stringArrayThreshold: 1 }));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should add member expression square brackets literal to string array', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayRegExp);
            });
            it('should replace member expression square brackets identifier with call to string array', function () {
                chai_1.assert.match(obfuscatedCode, stringArrayCallRegExp);
            });
        });
        describe('variant #2: square brackets identifier', function () {
            var regExp = /var *test *= *console\[identifier\];/;
            var obfuscatedCode = void 0;
            before(function () {
                var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/square-brackets-with-identifier-call.js');
                var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET));
                obfuscatedCode = obfuscationResult.getObfuscatedCode();
            });
            it('should ignore square brackets call with identifier value', function () {
                chai_1.assert.match(obfuscatedCode, regExp);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,