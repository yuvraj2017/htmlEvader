"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var NoCustomNodes_1 = require("../../../../../src/options/presets/NoCustomNodes");
var readFileAsString_1 = require("../../../../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../../../../src/JavaScriptObfuscator");
describe('TemplateLiteralTransformer', function () {
    describe('variant #1: simple template literal', function () {
        it('should transform es6 template literal to es5', function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/simple-input.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { unicodeEscapeSequence: false }));
            chai_1.assert.match(obfuscationResult.getObfuscatedCode(), /^var *test *= *'abc\\x20' *\+ *foo;$/);
        });
    });
    describe('variant #1: simple template literal with expression only', function () {
        it('should transform es6 template literal to es5 and add empty literal node before expression node', function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/expression-only.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { unicodeEscapeSequence: false }));
            chai_1.assert.match(obfuscationResult.getObfuscatedCode(), /^var *test *= *'' *\+ *foo;$/);
        });
    });
    describe('variant #3: literal node inside expression', function () {
        it('should transform es6 template literal to es5', function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/literal-inside-expression.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { unicodeEscapeSequence: false }));
            chai_1.assert.match(obfuscationResult.getObfuscatedCode(), /^var *test *= *'abc';$/);
        });
    });
    describe('variant #4: multiple expressions', function () {
        it('should transform es6 template literal to es5', function () {
            var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/multiple-expressions.js');
            var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, Object.assign({}, NoCustomNodes_1.NO_CUSTOM_NODES_PRESET, { unicodeEscapeSequence: false }));
            chai_1.assert.match(obfuscationResult.getObfuscatedCode(), /^var *test *= *0x1 *\+ *0x1 *\+ *'\\x20abc\\x20' *\+ *\(0x1 *\+ *0x1\);$/);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGxhdGVMaXRlcmFsVHJhbnNmb3JtZXIuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Rlc3QvZnVuY3Rpb25hbC10ZXN0cy9ub2RlLXRyYW5zZm9ybWVycy9jb252ZXJ0aW5nLXRyYW5zZm9ybWVycy90ZW1wbGF0ZS1saXRlcmFsLXRyYW5zZm9ybWVyL1RlbXBsYXRlTGl0ZXJhbFRyYW5zZm9ybWVyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUJBQThCO0FBSTlCLDhCQUEwRjtBQUUxRixpQ0FBd0U7QUFFeEUscUNBQStFO0FBRS9FLEFBQVEsU0FBQyxBQUE0Qiw4QkFBRTtBQUNuQyxBQUFRLGFBQUMsQUFBcUMsdUNBQUU7QUFDNUMsQUFBRSxXQUFDLEFBQThDLGdEQUFFO0FBQy9DLGdCQUFNLEFBQUksT0FBVyxtQkFBZ0IsaUJBQUMsQUFBUyxZQUFHLEFBQTJCLEFBQUMsQUFBQztBQUMvRSxnQkFBTSxBQUFpQixvQkFBdUIsdUJBQW9CLHFCQUFDLEFBQVMsVUFDeEUsQUFBSSx3QkFFRyxnQkFBc0IsMEJBQ3pCLEFBQXFCLHVCQUFFLEFBQUssQUFFbkMsQUFBQztBQUVGLG1CQUFNLE9BQUMsQUFBSyxNQUFDLEFBQWlCLGtCQUFDLEFBQWlCLEFBQUUscUJBQUcsQUFBc0MsQUFBQyxBQUFDLEFBQ2pHO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGFBQUMsQUFBMEQsNERBQUU7QUFDakUsQUFBRSxXQUFDLEFBQWdHLGtHQUFFO0FBQ2pHLGdCQUFNLEFBQUksT0FBVyxtQkFBZ0IsaUJBQUMsQUFBUyxZQUFHLEFBQThCLEFBQUMsQUFBQztBQUNsRixnQkFBTSxBQUFpQixvQkFBdUIsdUJBQW9CLHFCQUFDLEFBQVMsVUFDeEUsQUFBSSx3QkFFRyxnQkFBc0IsMEJBQ3pCLEFBQXFCLHVCQUFFLEFBQUssQUFFbkMsQUFBQztBQUVGLG1CQUFNLE9BQUMsQUFBSyxNQUFDLEFBQWlCLGtCQUFDLEFBQWlCLEFBQUUscUJBQUcsQUFBOEIsQUFBQyxBQUFDLEFBQ3pGO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGFBQUMsQUFBNEMsOENBQUU7QUFDbkQsQUFBRSxXQUFDLEFBQThDLGdEQUFFO0FBQy9DLGdCQUFNLEFBQUksT0FBVyxtQkFBZ0IsaUJBQUMsQUFBUyxZQUFHLEFBQXdDLEFBQUMsQUFBQztBQUM1RixnQkFBTSxBQUFpQixvQkFBdUIsdUJBQW9CLHFCQUFDLEFBQVMsVUFDeEUsQUFBSSx3QkFFRyxnQkFBc0IsMEJBQ3pCLEFBQXFCLHVCQUFFLEFBQUssQUFFbkMsQUFBQztBQUVGLG1CQUFNLE9BQUMsQUFBSyxNQUFDLEFBQWlCLGtCQUFDLEFBQWlCLEFBQUUscUJBQUcsQUFBd0IsQUFBQyxBQUFDLEFBQ25GO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFRLGFBQUMsQUFBa0Msb0NBQUU7QUFDekMsQUFBRSxXQUFDLEFBQThDLGdEQUFFO0FBQy9DLGdCQUFNLEFBQUksT0FBVyxtQkFBZ0IsaUJBQUMsQUFBUyxZQUFHLEFBQW1DLEFBQUMsQUFBQztBQUN2RixnQkFBTSxBQUFpQixvQkFBdUIsdUJBQW9CLHFCQUFDLEFBQVMsVUFDeEUsQUFBSSx3QkFFRyxnQkFBc0IsMEJBQ3pCLEFBQXFCLHVCQUFFLEFBQUssQUFFbkMsQUFBQztBQUVGLG1CQUFNLE9BQUMsQUFBSyxNQUFDLEFBQWlCLGtCQUFDLEFBQWlCLEFBQUUscUJBQUcsQUFBMEUsQUFBQyxBQUFDLEFBQ3JJO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydCB9IGZyb20gJ2NoYWknO1xuXG5pbXBvcnQgeyBJT2JmdXNjYXRpb25SZXN1bHQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zcmMvaW50ZXJmYWNlcy9JT2JmdXNjYXRpb25SZXN1bHQnO1xuXG5pbXBvcnQgeyBOT19DVVNUT01fTk9ERVNfUFJFU0VUIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3JjL29wdGlvbnMvcHJlc2V0cy9Ob0N1c3RvbU5vZGVzJztcblxuaW1wb3J0IHsgcmVhZEZpbGVBc1N0cmluZyB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvcmVhZEZpbGVBc1N0cmluZyc7XG5cbmltcG9ydCB7IEphdmFTY3JpcHRPYmZ1c2NhdG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3JjL0phdmFTY3JpcHRPYmZ1c2NhdG9yJztcblxuZGVzY3JpYmUoJ1RlbXBsYXRlTGl0ZXJhbFRyYW5zZm9ybWVyJywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCd2YXJpYW50ICMxOiBzaW1wbGUgdGVtcGxhdGUgbGl0ZXJhbCcsICgpID0+IHtcbiAgICAgICAgaXQoJ3Nob3VsZCB0cmFuc2Zvcm0gZXM2IHRlbXBsYXRlIGxpdGVyYWwgdG8gZXM1JywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29kZTogc3RyaW5nID0gcmVhZEZpbGVBc1N0cmluZyhfX2Rpcm5hbWUgKyAnL2ZpeHR1cmVzL3NpbXBsZS1pbnB1dC5qcycpO1xuICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVCxcbiAgICAgICAgICAgICAgICAgICAgdW5pY29kZUVzY2FwZVNlcXVlbmNlOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGlvblJlc3VsdC5nZXRPYmZ1c2NhdGVkQ29kZSgpLCAgL152YXIgKnRlc3QgKj0gKidhYmNcXFxceDIwJyAqXFwrICpmb287JC8pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd2YXJpYW50ICMxOiBzaW1wbGUgdGVtcGxhdGUgbGl0ZXJhbCB3aXRoIGV4cHJlc3Npb24gb25seScsICgpID0+IHtcbiAgICAgICAgaXQoJ3Nob3VsZCB0cmFuc2Zvcm0gZXM2IHRlbXBsYXRlIGxpdGVyYWwgdG8gZXM1IGFuZCBhZGQgZW1wdHkgbGl0ZXJhbCBub2RlIGJlZm9yZSBleHByZXNzaW9uIG5vZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb2RlOiBzdHJpbmcgPSByZWFkRmlsZUFzU3RyaW5nKF9fZGlybmFtZSArICcvZml4dHVyZXMvZXhwcmVzc2lvbi1vbmx5LmpzJyk7XG4gICAgICAgICAgICBjb25zdCBvYmZ1c2NhdGlvblJlc3VsdDogSU9iZnVzY2F0aW9uUmVzdWx0ID0gSmF2YVNjcmlwdE9iZnVzY2F0b3Iub2JmdXNjYXRlKFxuICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAuLi5OT19DVVNUT01fTk9ERVNfUFJFU0VULFxuICAgICAgICAgICAgICAgICAgICB1bmljb2RlRXNjYXBlU2VxdWVuY2U6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXNzZXJ0Lm1hdGNoKG9iZnVzY2F0aW9uUmVzdWx0LmdldE9iZnVzY2F0ZWRDb2RlKCksICAvXnZhciAqdGVzdCAqPSAqJycgKlxcKyAqZm9vOyQvKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgndmFyaWFudCAjMzogbGl0ZXJhbCBub2RlIGluc2lkZSBleHByZXNzaW9uJywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvdWxkIHRyYW5zZm9ybSBlczYgdGVtcGxhdGUgbGl0ZXJhbCB0byBlczUnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb2RlOiBzdHJpbmcgPSByZWFkRmlsZUFzU3RyaW5nKF9fZGlybmFtZSArICcvZml4dHVyZXMvbGl0ZXJhbC1pbnNpZGUtZXhwcmVzc2lvbi5qcycpO1xuICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVCxcbiAgICAgICAgICAgICAgICAgICAgdW5pY29kZUVzY2FwZVNlcXVlbmNlOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGlvblJlc3VsdC5nZXRPYmZ1c2NhdGVkQ29kZSgpLCAgL152YXIgKnRlc3QgKj0gKidhYmMnOyQvKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgndmFyaWFudCAjNDogbXVsdGlwbGUgZXhwcmVzc2lvbnMnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdzaG91bGQgdHJhbnNmb3JtIGVzNiB0ZW1wbGF0ZSBsaXRlcmFsIHRvIGVzNScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGU6IHN0cmluZyA9IHJlYWRGaWxlQXNTdHJpbmcoX19kaXJuYW1lICsgJy9maXh0dXJlcy9tdWx0aXBsZS1leHByZXNzaW9ucy5qcycpO1xuICAgICAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uTk9fQ1VTVE9NX05PREVTX1BSRVNFVCxcbiAgICAgICAgICAgICAgICAgICAgdW5pY29kZUVzY2FwZVNlcXVlbmNlOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGFzc2VydC5tYXRjaChvYmZ1c2NhdGlvblJlc3VsdC5nZXRPYmZ1c2NhdGVkQ29kZSgpLCAgL152YXIgKnRlc3QgKj0gKjB4MSAqXFwrICoweDEgKlxcKyAqJ1xcXFx4MjBhYmNcXFxceDIwJyAqXFwrICpcXCgweDEgKlxcKyAqMHgxXFwpOyQvKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==