"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var readFileAsString_1 = require("../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../src/JavaScriptObfuscator");
describe('JavaScriptObfuscator runtime eval', function () {
    this.timeout(100000);
    var obfuscatedCode = void 0;
    before(function () {
        var code = readFileAsString_1.readFileAsString(__dirname + '/fixtures/sha256.js');
        var obfuscationResult = JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(code, {
            controlFlowFlattening: true,
            deadCodeInjection: true,
            debugProtection: true,
            selfDefending: true,
            stringArrayEncoding: 'rc4'
        });
        obfuscatedCode = obfuscationResult.getObfuscatedCode();
    });
    it('should obfuscate code without any runtime errors after obfuscation: variant #1 sha256', function () {
        chai_1.assert.equal(eval(obfuscatedCode + " sha256('test');"), '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSmF2YVNjcmlwdE9iZnVzY2F0b3JSdW50aW1lLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L3J1bnRpbWUtdGVzdHMvSmF2YVNjcmlwdE9iZnVzY2F0b3JSdW50aW1lLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUJBQThCO0FBSTlCLGlDQUErRDtBQUUvRCxxQ0FBc0U7QUFFdEUsQUFBUSxTQUFDLEFBQW1DLHFDQUFFO0FBQzFDLEFBQUksU0FBQyxBQUFPLFFBQUMsQUFBTSxBQUFDLEFBQUM7QUFFckIsUUFBSSxBQUFzQixBQUFDO0FBRTNCLEFBQU0sV0FBQztBQUNILFlBQU0sQUFBSSxPQUFXLG1CQUFnQixpQkFBQyxBQUFTLFlBQUcsQUFBcUIsQUFBQyxBQUFDO0FBQ3pFLFlBQU0sQUFBaUIsMkNBQTJDLHFCQUFDLEFBQVMsVUFDeEUsQUFBSTtBQUVBLEFBQXFCLG1DQUFFLEFBQUk7QUFDM0IsQUFBaUIsK0JBQUUsQUFBSTtBQUN2QixBQUFlLDZCQUFFLEFBQUk7QUFDckIsQUFBYSwyQkFBRSxBQUFJO0FBQ25CLEFBQW1CLGlDQUFFLEFBQUssQUFDN0IsQUFDSixBQUFDO0FBUEUsU0FGMEM7QUFXOUMsQUFBYyx5QkFBRyxBQUFpQixrQkFBQyxBQUFpQixBQUFFLEFBQUMsQUFDM0Q7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFFLE9BQUMsQUFBdUYseUZBQUU7QUFDeEYsZUFBTSxPQUFDLEFBQUssTUFDUixBQUFJLEFBQUMsS0FBRyxBQUFjLEFBQWtCLEFBQUMsc0NBQ3pDLEFBQWtFLEFBQ3JFLEFBQUMsQUFDTjtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnY2hhaSc7XG5cbmltcG9ydCB7IElPYmZ1c2NhdGlvblJlc3VsdCB9IGZyb20gJy4uLy4uL3NyYy9pbnRlcmZhY2VzL0lPYmZ1c2NhdGlvblJlc3VsdCc7XG5cbmltcG9ydCB7IHJlYWRGaWxlQXNTdHJpbmcgfSBmcm9tICcuLi9oZWxwZXJzL3JlYWRGaWxlQXNTdHJpbmcnO1xuXG5pbXBvcnQgeyBKYXZhU2NyaXB0T2JmdXNjYXRvciB9IGZyb20gJy4uLy4uL3NyYy9KYXZhU2NyaXB0T2JmdXNjYXRvcic7XG5cbmRlc2NyaWJlKCdKYXZhU2NyaXB0T2JmdXNjYXRvciBydW50aW1lIGV2YWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50aW1lb3V0KDEwMDAwMCk7XG5cbiAgICBsZXQgb2JmdXNjYXRlZENvZGU6IHN0cmluZztcblxuICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvZGU6IHN0cmluZyA9IHJlYWRGaWxlQXNTdHJpbmcoX19kaXJuYW1lICsgJy9maXh0dXJlcy9zaGEyNTYuanMnKTtcbiAgICAgICAgY29uc3Qgb2JmdXNjYXRpb25SZXN1bHQ6IElPYmZ1c2NhdGlvblJlc3VsdCA9IEphdmFTY3JpcHRPYmZ1c2NhdG9yLm9iZnVzY2F0ZShcbiAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29udHJvbEZsb3dGbGF0dGVuaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRlYWRDb2RlSW5qZWN0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRlYnVnUHJvdGVjdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZWxmRGVmZW5kaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN0cmluZ0FycmF5RW5jb2Rpbmc6ICdyYzQnXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgb2JmdXNjYXRlZENvZGUgPSBvYmZ1c2NhdGlvblJlc3VsdC5nZXRPYmZ1c2NhdGVkQ29kZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBvYmZ1c2NhdGUgY29kZSB3aXRob3V0IGFueSBydW50aW1lIGVycm9ycyBhZnRlciBvYmZ1c2NhdGlvbjogdmFyaWFudCAjMSBzaGEyNTYnLCAoKSA9PiB7XG4gICAgICAgIGFzc2VydC5lcXVhbChcbiAgICAgICAgICAgIGV2YWwoYCR7b2JmdXNjYXRlZENvZGV9IHNoYTI1NigndGVzdCcpO2ApLFxuICAgICAgICAgICAgJzlmODZkMDgxODg0YzdkNjU5YTJmZWFhMGM1NWFkMDE1YTNiZjRmMWIyYjBiODIyY2QxNWQ2YzE1YjBmMDBhMDgnXG4gICAgICAgICk7XG4gICAgfSk7XG59KTtcbiJdfQ==