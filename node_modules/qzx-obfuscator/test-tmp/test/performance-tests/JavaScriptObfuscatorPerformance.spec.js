"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var readFileAsString_1 = require("../helpers/readFileAsString");
var JavaScriptObfuscator_1 = require("../../src/JavaScriptObfuscator");
describe('JavaScriptObfuscator performance', function () {
    var iterationsCount = 500;
    this.timeout(100000);
    describe('performance: multiple calls', function () {
        it('shows performance time with multiple obfuscator calls', function () {
            for (var i = 0; i < iterationsCount; i++) {
                JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(readFileAsString_1.readFileAsString('./test/fixtures/sample.js'));
            }
            chai_1.assert.isOk(true);
        });
    });
    describe('performance: large source code', function () {
        it('shows performance time with large code size', function () {
            JavaScriptObfuscator_1.JavaScriptObfuscator.obfuscate(readFileAsString_1.readFileAsString('./test/fixtures/sample.js').repeat(iterationsCount));
            chai_1.assert.isOk(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSmF2YVNjcmlwdE9iZnVzY2F0b3JQZXJmb3JtYW5jZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdC9wZXJmb3JtYW5jZS10ZXN0cy9KYXZhU2NyaXB0T2JmdXNjYXRvclBlcmZvcm1hbmNlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUJBQThCO0FBRTlCLGlDQUErRDtBQUUvRCxxQ0FBc0U7QUFFdEUsQUFBUSxTQUFDLEFBQWtDLG9DQUFFO0FBQ3pDLFFBQU0sQUFBZSxrQkFBVyxBQUFHLEFBQUM7QUFFcEMsQUFBSSxTQUFDLEFBQU8sUUFBQyxBQUFNLEFBQUMsQUFBQztBQUVyQixBQUFRLGFBQUMsQUFBNkIsK0JBQUU7QUFDcEMsQUFBRSxXQUFDLEFBQXVELHlEQUFFO0FBQ3hELEFBQUcsQUFBQyxpQkFBQyxJQUFJLEFBQUMsSUFBVyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQWUsaUJBQUUsQUFBQyxBQUFFLEtBQUUsQUFBQztBQUMvQyx1Q0FBb0IscUJBQUMsQUFBUyxVQUFDLG1CQUFnQixpQkFBQyxBQUEyQixBQUFDLEFBQUMsQUFBQyxBQUNsRjtBQUFDO0FBRUQsbUJBQU0sT0FBQyxBQUFJLEtBQUMsQUFBSSxBQUFDLEFBQUMsQUFDdEI7QUFBQyxBQUFDLEFBQUMsQUFDUDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQVEsYUFBQyxBQUFnQyxrQ0FBRTtBQUN2QyxBQUFFLFdBQUMsQUFBNkMsK0NBQUU7QUFDOUMsbUNBQW9CLHFCQUFDLEFBQVMsVUFBQyxtQkFBZ0IsaUJBQUMsQUFBMkIsQUFBQyw2QkFBQyxBQUFNLE9BQUMsQUFBZSxBQUFDLEFBQUMsQUFBQztBQUV0RyxtQkFBTSxPQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQyxBQUN0QjtBQUFDLEFBQUMsQUFBQyxBQUNQO0FBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQyxBQUFDLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQgfSBmcm9tICdjaGFpJztcblxuaW1wb3J0IHsgcmVhZEZpbGVBc1N0cmluZyB9IGZyb20gJy4uL2hlbHBlcnMvcmVhZEZpbGVBc1N0cmluZyc7XG5cbmltcG9ydCB7IEphdmFTY3JpcHRPYmZ1c2NhdG9yIH0gZnJvbSAnLi4vLi4vc3JjL0phdmFTY3JpcHRPYmZ1c2NhdG9yJztcblxuZGVzY3JpYmUoJ0phdmFTY3JpcHRPYmZ1c2NhdG9yIHBlcmZvcm1hbmNlJywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGl0ZXJhdGlvbnNDb3VudDogbnVtYmVyID0gNTAwO1xuXG4gICAgdGhpcy50aW1lb3V0KDEwMDAwMCk7XG5cbiAgICBkZXNjcmliZSgncGVyZm9ybWFuY2U6IG11bHRpcGxlIGNhbGxzJywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvd3MgcGVyZm9ybWFuY2UgdGltZSB3aXRoIG11bHRpcGxlIG9iZnVzY2F0b3IgY2FsbHMnLCAoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgaXRlcmF0aW9uc0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUocmVhZEZpbGVBc1N0cmluZygnLi90ZXN0L2ZpeHR1cmVzL3NhbXBsZS5qcycpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXNzZXJ0LmlzT2sodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3BlcmZvcm1hbmNlOiBsYXJnZSBzb3VyY2UgY29kZScsICgpID0+IHtcbiAgICAgICAgaXQoJ3Nob3dzIHBlcmZvcm1hbmNlIHRpbWUgd2l0aCBsYXJnZSBjb2RlIHNpemUnLCAoKSA9PiB7XG4gICAgICAgICAgICBKYXZhU2NyaXB0T2JmdXNjYXRvci5vYmZ1c2NhdGUocmVhZEZpbGVBc1N0cmluZygnLi90ZXN0L2ZpeHR1cmVzL3NhbXBsZS5qcycpLnJlcGVhdChpdGVyYXRpb25zQ291bnQpKTtcblxuICAgICAgICAgICAgYXNzZXJ0LmlzT2sodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXX0=